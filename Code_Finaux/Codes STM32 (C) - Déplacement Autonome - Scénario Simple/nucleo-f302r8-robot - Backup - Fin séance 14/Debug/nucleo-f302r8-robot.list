
nucleo-f302r8-robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08005ba4  08005ba4  00015ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d80  08005d80  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005d80  08005d80  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d80  08005d80  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d80  08005d80  00015d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d84  08005d84  00015d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000834  20000074  08005dfc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a8  08005dfc  000208a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c9a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002434  00000000  00000000  00030d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00033178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  00033f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c790  00000000  00000000  00034bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118a7  00000000  00000000  00051340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6a87  00000000  00000000  00062be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010966e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cf4  00000000  00000000  001096c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b8c 	.word	0x08005b8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005b8c 	.word	0x08005b8c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  	if (htim==&htim2) // Every 100Âµs
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	4a06      	ldr	r2, [pc, #24]	; (80002c4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	d102      	bne.n	80002b6 <HAL_TIM_PeriodElapsedCallback+0x16>
  	{
  		transceiver_clk = 1;
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80002b2:	2201      	movs	r2, #1
 80002b4:	701a      	strb	r2, [r3, #0]
  	}
}
 80002b6:	bf00      	nop
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	20000090 	.word	0x20000090
 80002c8:	200002fc 	.word	0x200002fc

080002cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d0:	f000 ff98 	bl	8001204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d4:	f000 f832 	bl	800033c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d8:	f000 f98a 	bl	80005f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80002dc:	f000 f962 	bl	80005a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80002e0:	f000 f900 	bl	80004e4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80002e4:	f000 f880 	bl	80003e8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80002e8:	f000 f8cc 	bl	8000484 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80002ec:	f000 f92a 	bl	8000544 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Init_DMA_Rcvd(&huart1);
 80002f0:	480e      	ldr	r0, [pc, #56]	; (800032c <main+0x60>)
 80002f2:	f000 fca9 	bl	8000c48 <Init_DMA_Rcvd>
  Init_DMA_Rcvd(&huart3);
 80002f6:	480e      	ldr	r0, [pc, #56]	; (8000330 <main+0x64>)
 80002f8:	f000 fca6 	bl	8000c48 <Init_DMA_Rcvd>
  Start_DMA_Rcvd(&huart1); // Start reception of messages
 80002fc:	480b      	ldr	r0, [pc, #44]	; (800032c <main+0x60>)
 80002fe:	f000 fccd 	bl	8000c9c <Start_DMA_Rcvd>
  Start_DMA_Rcvd(&huart3);
 8000302:	480b      	ldr	r0, [pc, #44]	; (8000330 <main+0x64>)
 8000304:	f000 fcca 	bl	8000c9c <Start_DMA_Rcvd>
  HAL_TIM_Base_Start_IT(&htim2); // Start timer
 8000308:	480a      	ldr	r0, [pc, #40]	; (8000334 <main+0x68>)
 800030a:	f003 f8e9 	bl	80034e0 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (transceiver_clk == 1)
 800030e:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <main+0x6c>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d1fb      	bne.n	800030e <main+0x42>
	{
		transceiver_clk = 0;
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <main+0x6c>)
 8000318:	2200      	movs	r2, #0
 800031a:	701a      	strb	r2, [r3, #0]
		UART_Send_Messages(&huart1, &huart3); // Send to-send messages through UART
 800031c:	4904      	ldr	r1, [pc, #16]	; (8000330 <main+0x64>)
 800031e:	4803      	ldr	r0, [pc, #12]	; (800032c <main+0x60>)
 8000320:	f000 fe1a 	bl	8000f58 <UART_Send_Messages>
		// Retrieve and interpret a message received through UART
		Interpret_Message_Recv();
 8000324:	f000 f9d2 	bl	80006cc <Interpret_Message_Recv>
	if (transceiver_clk == 1)
 8000328:	e7f1      	b.n	800030e <main+0x42>
 800032a:	bf00      	nop
 800032c:	200000dc 	.word	0x200000dc
 8000330:	200001ec 	.word	0x200001ec
 8000334:	20000090 	.word	0x20000090
 8000338:	200002fc 	.word	0x200002fc

0800033c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b09c      	sub	sp, #112	; 0x70
 8000340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000342:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000346:	2228      	movs	r2, #40	; 0x28
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f004 ff02 	bl	8005154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000350:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	605a      	str	r2, [r3, #4]
 800035a:	609a      	str	r2, [r3, #8]
 800035c:	60da      	str	r2, [r3, #12]
 800035e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000360:	463b      	mov	r3, r7
 8000362:	2234      	movs	r2, #52	; 0x34
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f004 fef4 	bl	8005154 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800036c:	2302      	movs	r3, #2
 800036e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000370:	2301      	movs	r3, #1
 8000372:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000374:	2310      	movs	r3, #16
 8000376:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000378:	2302      	movs	r3, #2
 800037a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800037c:	2300      	movs	r3, #0
 800037e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000380:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000384:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000386:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800038a:	4618      	mov	r0, r3
 800038c:	f001 fc4a 	bl	8001c24 <HAL_RCC_OscConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000396:	f000 f993 	bl	80006c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039a:	230f      	movs	r3, #15
 800039c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039e:	2302      	movs	r3, #2
 80003a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003b4:	2102      	movs	r1, #2
 80003b6:	4618      	mov	r0, r3
 80003b8:	f002 fc72 	bl	8002ca0 <HAL_RCC_ClockConfig>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80003c2:	f000 f97d 	bl	80006c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003c6:	2301      	movs	r3, #1
 80003c8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ce:	463b      	mov	r3, r7
 80003d0:	4618      	mov	r0, r3
 80003d2:	f002 fe9b 	bl	800310c <HAL_RCCEx_PeriphCLKConfig>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80003dc:	f000 f970 	bl	80006c0 <Error_Handler>
  }
}
 80003e0:	bf00      	nop
 80003e2:	3770      	adds	r7, #112	; 0x70
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000406:	4b1e      	ldr	r3, [pc, #120]	; (8000480 <MX_TIM2_Init+0x98>)
 8000408:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800040c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 800040e:	4b1c      	ldr	r3, [pc, #112]	; (8000480 <MX_TIM2_Init+0x98>)
 8000410:	223f      	movs	r2, #63	; 0x3f
 8000412:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000414:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <MX_TIM2_Init+0x98>)
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800041a:	4b19      	ldr	r3, [pc, #100]	; (8000480 <MX_TIM2_Init+0x98>)
 800041c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000420:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000422:	4b17      	ldr	r3, [pc, #92]	; (8000480 <MX_TIM2_Init+0x98>)
 8000424:	2200      	movs	r2, #0
 8000426:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <MX_TIM2_Init+0x98>)
 800042a:	2200      	movs	r2, #0
 800042c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800042e:	4814      	ldr	r0, [pc, #80]	; (8000480 <MX_TIM2_Init+0x98>)
 8000430:	f002 fffe 	bl	8003430 <HAL_TIM_Base_Init>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800043a:	f000 f941 	bl	80006c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800043e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000442:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	4619      	mov	r1, r3
 800044a:	480d      	ldr	r0, [pc, #52]	; (8000480 <MX_TIM2_Init+0x98>)
 800044c:	f003 f9bb 	bl	80037c6 <HAL_TIM_ConfigClockSource>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000456:	f000 f933 	bl	80006c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800045a:	2300      	movs	r3, #0
 800045c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800045e:	2300      	movs	r3, #0
 8000460:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	4619      	mov	r1, r3
 8000466:	4806      	ldr	r0, [pc, #24]	; (8000480 <MX_TIM2_Init+0x98>)
 8000468:	f003 fba6 	bl	8003bb8 <HAL_TIMEx_MasterConfigSynchronization>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000472:	f000 f925 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000476:	bf00      	nop
 8000478:	3720      	adds	r7, #32
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	20000090 	.word	0x20000090

08000484 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <MX_USART1_UART_Init+0x58>)
 800048a:	4a15      	ldr	r2, [pc, #84]	; (80004e0 <MX_USART1_UART_Init+0x5c>)
 800048c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800048e:	4b13      	ldr	r3, [pc, #76]	; (80004dc <MX_USART1_UART_Init+0x58>)
 8000490:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000494:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <MX_USART1_UART_Init+0x58>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <MX_USART1_UART_Init+0x58>)
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <MX_USART1_UART_Init+0x58>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <MX_USART1_UART_Init+0x58>)
 80004aa:	220c      	movs	r2, #12
 80004ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <MX_USART1_UART_Init+0x58>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b4:	4b09      	ldr	r3, [pc, #36]	; (80004dc <MX_USART1_UART_Init+0x58>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <MX_USART1_UART_Init+0x58>)
 80004bc:	2200      	movs	r2, #0
 80004be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <MX_USART1_UART_Init+0x58>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004c6:	4805      	ldr	r0, [pc, #20]	; (80004dc <MX_USART1_UART_Init+0x58>)
 80004c8:	f003 fbfa 	bl	8003cc0 <HAL_UART_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004d2:	f000 f8f5 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	200000dc 	.word	0x200000dc
 80004e0:	40013800 	.word	0x40013800

080004e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <MX_USART2_UART_Init+0x58>)
 80004ea:	4a15      	ldr	r2, [pc, #84]	; (8000540 <MX_USART2_UART_Init+0x5c>)
 80004ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004ee:	4b13      	ldr	r3, [pc, #76]	; (800053c <MX_USART2_UART_Init+0x58>)
 80004f0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_USART2_UART_Init+0x58>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <MX_USART2_UART_Init+0x58>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_USART2_UART_Init+0x58>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_USART2_UART_Init+0x58>)
 800050a:	220c      	movs	r2, #12
 800050c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <MX_USART2_UART_Init+0x58>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <MX_USART2_UART_Init+0x58>)
 8000516:	2200      	movs	r2, #0
 8000518:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <MX_USART2_UART_Init+0x58>)
 800051c:	2200      	movs	r2, #0
 800051e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <MX_USART2_UART_Init+0x58>)
 8000522:	2200      	movs	r2, #0
 8000524:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <MX_USART2_UART_Init+0x58>)
 8000528:	f003 fbca 	bl	8003cc0 <HAL_UART_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000532:	f000 f8c5 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000164 	.word	0x20000164
 8000540:	40004400 	.word	0x40004400

08000544 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <MX_USART3_UART_Init+0x58>)
 800054a:	4a15      	ldr	r2, [pc, #84]	; (80005a0 <MX_USART3_UART_Init+0x5c>)
 800054c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 800054e:	4b13      	ldr	r3, [pc, #76]	; (800059c <MX_USART3_UART_Init+0x58>)
 8000550:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000554:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <MX_USART3_UART_Init+0x58>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_USART3_UART_Init+0x58>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <MX_USART3_UART_Init+0x58>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_USART3_UART_Init+0x58>)
 800056a:	220c      	movs	r2, #12
 800056c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <MX_USART3_UART_Init+0x58>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_USART3_UART_Init+0x58>)
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <MX_USART3_UART_Init+0x58>)
 800057c:	2200      	movs	r2, #0
 800057e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_USART3_UART_Init+0x58>)
 8000582:	2200      	movs	r2, #0
 8000584:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000586:	4805      	ldr	r0, [pc, #20]	; (800059c <MX_USART3_UART_Init+0x58>)
 8000588:	f003 fb9a 	bl	8003cc0 <HAL_UART_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000592:	f000 f895 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200001ec 	.word	0x200001ec
 80005a0:	40004800 	.word	0x40004800

080005a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <MX_DMA_Init+0x48>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a0f      	ldr	r2, [pc, #60]	; (80005ec <MX_DMA_Init+0x48>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <MX_DMA_Init+0x48>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	200d      	movs	r0, #13
 80005c8:	f000 ff5d 	bl	8001486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80005cc:	200d      	movs	r0, #13
 80005ce:	f000 ff76 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	200f      	movs	r0, #15
 80005d8:	f000 ff55 	bl	8001486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80005dc:	200f      	movs	r0, #15
 80005de:	f000 ff6e 	bl	80014be <HAL_NVIC_EnableIRQ>

}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	; 0x28
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000606:	4b2b      	ldr	r3, [pc, #172]	; (80006b4 <MX_GPIO_Init+0xc4>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a2a      	ldr	r2, [pc, #168]	; (80006b4 <MX_GPIO_Init+0xc4>)
 800060c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000610:	6153      	str	r3, [r2, #20]
 8000612:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <MX_GPIO_Init+0xc4>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061e:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <MX_GPIO_Init+0xc4>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a24      	ldr	r2, [pc, #144]	; (80006b4 <MX_GPIO_Init+0xc4>)
 8000624:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000628:	6153      	str	r3, [r2, #20]
 800062a:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <MX_GPIO_Init+0xc4>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <MX_GPIO_Init+0xc4>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a1e      	ldr	r2, [pc, #120]	; (80006b4 <MX_GPIO_Init+0xc4>)
 800063c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <MX_GPIO_Init+0xc4>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <MX_GPIO_Init+0xc4>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <MX_GPIO_Init+0xc4>)
 8000654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_GPIO_Init+0xc4>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066c:	4812      	ldr	r0, [pc, #72]	; (80006b8 <MX_GPIO_Init+0xc8>)
 800066e:	f001 fac1 	bl	8001bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000678:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	480c      	ldr	r0, [pc, #48]	; (80006bc <MX_GPIO_Init+0xcc>)
 800068a:	f001 f941 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800068e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	4619      	mov	r1, r3
 80006a6:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_GPIO_Init+0xc8>)
 80006a8:	f001 f932 	bl	8001910 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ac:	bf00      	nop
 80006ae:	3728      	adds	r7, #40	; 0x28
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40021000 	.word	0x40021000
 80006b8:	48000400 	.word	0x48000400
 80006bc:	48000800 	.word	0x48000800

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <Error_Handler+0x8>
	...

080006cc <Interpret_Message_Recv>:
/**
  * @brief Interprets a new message, given using Retrieve_Msg function
  * @retval None
  */
void Interpret_Message_Recv()
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
	// Make sure this is the only instance of this function running currently
	if (interpreter_running == 0)
 80006d2:	4b3c      	ldr	r3, [pc, #240]	; (80007c4 <Interpret_Message_Recv+0xf8>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d170      	bne.n	80007bc <Interpret_Message_Recv+0xf0>
	{
		interpreter_running = 1; // Function cannot be executed twice
 80006da:	4b3a      	ldr	r3, [pc, #232]	; (80007c4 <Interpret_Message_Recv+0xf8>)
 80006dc:	2201      	movs	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]

		/* Get one message from the input buffer, along with the UART Handle
		   from which it was received */
		char dev[4];
		int Size = Retrieve_Msg(InterpretBuf, dev);
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	4619      	mov	r1, r3
 80006e6:	4838      	ldr	r0, [pc, #224]	; (80007c8 <Interpret_Message_Recv+0xfc>)
 80006e8:	f000 fbac 	bl	8000e44 <Retrieve_Msg>
 80006ec:	6178      	str	r0, [r7, #20]

		/**********************************************************************************/
		/******************** Interpret data found now in InterpretBuf ********************/
		/**********************************************************************************/
		if (Size > 0)
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	dd60      	ble.n	80007b6 <Interpret_Message_Recv+0xea>
		{
			if (strncmp("rpi", dev, 3) == 0)
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2203      	movs	r2, #3
 80006fa:	4619      	mov	r1, r3
 80006fc:	4833      	ldr	r0, [pc, #204]	; (80007cc <Interpret_Message_Recv+0x100>)
 80006fe:	f004 fd51 	bl	80051a4 <strncmp>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d12c      	bne.n	8000762 <Interpret_Message_Recv+0x96>
			{
				/************** Command to open a specific cell of the letter box *****************/
				if (strncmp("OPEN_CELL:", (char *)InterpretBuf, 11) == 0)
 8000708:	492f      	ldr	r1, [pc, #188]	; (80007c8 <Interpret_Message_Recv+0xfc>)
 800070a:	4831      	ldr	r0, [pc, #196]	; (80007d0 <Interpret_Message_Recv+0x104>)
 800070c:	f7ff fd60 	bl	80001d0 <strcmp>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d112      	bne.n	800073c <Interpret_Message_Recv+0x70>
				{
					int cell_number = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
					char cell_number_str[10];

					// Convert to integer the number sent alongside the command
					strncpy(cell_number_str, (char *)InterpretBuf+10, Size-10);
 800071a:	492e      	ldr	r1, [pc, #184]	; (80007d4 <Interpret_Message_Recv+0x108>)
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	3b0a      	subs	r3, #10
 8000720:	461a      	mov	r2, r3
 8000722:	463b      	mov	r3, r7
 8000724:	4618      	mov	r0, r3
 8000726:	f004 fd51 	bl	80051cc <strncpy>
					cell_number = atoi(cell_number_str);
 800072a:	463b      	mov	r3, r7
 800072c:	4618      	mov	r0, r3
 800072e:	f004 fcd4 	bl	80050da <atoi>
 8000732:	6138      	str	r0, [r7, #16]

					// Ask to open the corresponding cell
					Open_Cell(cell_number);
 8000734:	6938      	ldr	r0, [r7, #16]
 8000736:	f000 f85f 	bl	80007f8 <Open_Cell>
 800073a:	e03c      	b.n	80007b6 <Interpret_Message_Recv+0xea>
				}

				/*********************** Confirmation cell can be opened **************************/
				else if (strncmp("OK_CELL", (char *)InterpretBuf, 8) == 0)
 800073c:	4922      	ldr	r1, [pc, #136]	; (80007c8 <Interpret_Message_Recv+0xfc>)
 800073e:	4826      	ldr	r0, [pc, #152]	; (80007d8 <Interpret_Message_Recv+0x10c>)
 8000740:	f7ff fd46 	bl	80001d0 <strcmp>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d105      	bne.n	8000756 <Interpret_Message_Recv+0x8a>
				{
					// Send back acknowledge signal to signal good reception of valid message
					Send_Msg("ACK", 3, "rpi");
 800074a:	4a20      	ldr	r2, [pc, #128]	; (80007cc <Interpret_Message_Recv+0x100>)
 800074c:	2103      	movs	r1, #3
 800074e:	4823      	ldr	r0, [pc, #140]	; (80007dc <Interpret_Message_Recv+0x110>)
 8000750:	f000 fcaa 	bl	80010a8 <Send_Msg>
 8000754:	e02f      	b.n	80007b6 <Interpret_Message_Recv+0xea>

				/****************************** Incorrect command *********************************/
				else
				{
					// Send back error message, meaning the command isn't a valid one
					Send_Msg((char *)"INVALID_COMMAND", 15, "rpi");
 8000756:	4a1d      	ldr	r2, [pc, #116]	; (80007cc <Interpret_Message_Recv+0x100>)
 8000758:	210f      	movs	r1, #15
 800075a:	4821      	ldr	r0, [pc, #132]	; (80007e0 <Interpret_Message_Recv+0x114>)
 800075c:	f000 fca4 	bl	80010a8 <Send_Msg>
 8000760:	e029      	b.n	80007b6 <Interpret_Message_Recv+0xea>
				}
			}

			else if (strncmp("ser", dev, 3) == 0)
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2203      	movs	r2, #3
 8000768:	4619      	mov	r1, r3
 800076a:	481e      	ldr	r0, [pc, #120]	; (80007e4 <Interpret_Message_Recv+0x118>)
 800076c:	f004 fd1a 	bl	80051a4 <strncmp>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d11f      	bne.n	80007b6 <Interpret_Message_Recv+0xea>
			{
				if (strncmp("nop", (char *)InterpretBuf, 3) == 0)
 8000776:	2203      	movs	r2, #3
 8000778:	4913      	ldr	r1, [pc, #76]	; (80007c8 <Interpret_Message_Recv+0xfc>)
 800077a:	481b      	ldr	r0, [pc, #108]	; (80007e8 <Interpret_Message_Recv+0x11c>)
 800077c:	f004 fd12 	bl	80051a4 <strncmp>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d105      	bne.n	8000792 <Interpret_Message_Recv+0xc6>
				{
					Send_Msg((char *)"nope xd", 7, "ser");
 8000786:	4a17      	ldr	r2, [pc, #92]	; (80007e4 <Interpret_Message_Recv+0x118>)
 8000788:	2107      	movs	r1, #7
 800078a:	4818      	ldr	r0, [pc, #96]	; (80007ec <Interpret_Message_Recv+0x120>)
 800078c:	f000 fc8c 	bl	80010a8 <Send_Msg>
 8000790:	e011      	b.n	80007b6 <Interpret_Message_Recv+0xea>
				}
				else if (strncmp("u", (char *)InterpretBuf, 2) == 0)
 8000792:	490d      	ldr	r1, [pc, #52]	; (80007c8 <Interpret_Message_Recv+0xfc>)
 8000794:	4816      	ldr	r0, [pc, #88]	; (80007f0 <Interpret_Message_Recv+0x124>)
 8000796:	f7ff fd1b 	bl	80001d0 <strcmp>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d105      	bne.n	80007ac <Interpret_Message_Recv+0xe0>
				{
					// Send back acknowledge signal to signal good reception of valid message
					Send_Msg("digo", 4, "rpi");
 80007a0:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <Interpret_Message_Recv+0x100>)
 80007a2:	2104      	movs	r1, #4
 80007a4:	4813      	ldr	r0, [pc, #76]	; (80007f4 <Interpret_Message_Recv+0x128>)
 80007a6:	f000 fc7f 	bl	80010a8 <Send_Msg>
 80007aa:	e004      	b.n	80007b6 <Interpret_Message_Recv+0xea>
				}
				else
				{
					// Send back error message, meaning the command isn't a valid one
					Send_Msg((char *)"INVALID_COMMAND", 15, "ser");
 80007ac:	4a0d      	ldr	r2, [pc, #52]	; (80007e4 <Interpret_Message_Recv+0x118>)
 80007ae:	210f      	movs	r1, #15
 80007b0:	480b      	ldr	r0, [pc, #44]	; (80007e0 <Interpret_Message_Recv+0x114>)
 80007b2:	f000 fc79 	bl	80010a8 <Send_Msg>
				}

			}
		}

		interpreter_running = 0; // Function can be executed now
 80007b6:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <Interpret_Message_Recv+0xf8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
	}
}
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200002fd 	.word	0x200002fd
 80007c8:	20000300 	.word	0x20000300
 80007cc:	08005ba4 	.word	0x08005ba4
 80007d0:	08005ba8 	.word	0x08005ba8
 80007d4:	2000030a 	.word	0x2000030a
 80007d8:	08005bb4 	.word	0x08005bb4
 80007dc:	08005bbc 	.word	0x08005bbc
 80007e0:	08005bc0 	.word	0x08005bc0
 80007e4:	08005bd0 	.word	0x08005bd0
 80007e8:	08005bd4 	.word	0x08005bd4
 80007ec:	08005bd8 	.word	0x08005bd8
 80007f0:	08005be0 	.word	0x08005be0
 80007f4:	08005be4 	.word	0x08005be4

080007f8 <Open_Cell>:
/**
  * @brief Opens the cell identified by cell_number, if possible
  * @retval None
  */
void Open_Cell(int cell_number)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	char open_cell_str[20];

	// Valid cell
	if (cell_number >= CELL_NUM_MIN && cell_number <= CELL_NUM_MAX)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	dd17      	ble.n	8000836 <Open_Cell+0x3e>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2b05      	cmp	r3, #5
 800080a:	dc14      	bgt.n	8000836 <Open_Cell+0x3e>
	{
		// Send back a confirmation question about the cell to open (prevent data corruption)
		sprintf(open_cell_str, "CONF_CELL:%i", cell_number);
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	490e      	ldr	r1, [pc, #56]	; (800084c <Open_Cell+0x54>)
 8000814:	4618      	mov	r0, r3
 8000816:	f004 fca5 	bl	8005164 <siprintf>
		Send_Msg((char *)open_cell_str, strlen(open_cell_str), "rpi");
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fce0 	bl	80001e4 <strlen>
 8000824:	4603      	mov	r3, r0
 8000826:	4619      	mov	r1, r3
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	4a08      	ldr	r2, [pc, #32]	; (8000850 <Open_Cell+0x58>)
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fc3a 	bl	80010a8 <Send_Msg>
 8000834:	e005      	b.n	8000842 <Open_Cell+0x4a>
	}
	else // Invalid cell number
	{
		Send_Msg((char *)"INVALID_CELL_NB", 15, "rpi");
 8000836:	4a06      	ldr	r2, [pc, #24]	; (8000850 <Open_Cell+0x58>)
 8000838:	210f      	movs	r1, #15
 800083a:	4806      	ldr	r0, [pc, #24]	; (8000854 <Open_Cell+0x5c>)
 800083c:	f000 fc34 	bl	80010a8 <Send_Msg>
	}
}
 8000840:	bf00      	nop
 8000842:	bf00      	nop
 8000844:	3720      	adds	r7, #32
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	08005bec 	.word	0x08005bec
 8000850:	08005ba4 	.word	0x08005ba4
 8000854:	08005bfc 	.word	0x08005bfc

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <HAL_MspInit+0x44>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	4a0e      	ldr	r2, [pc, #56]	; (800089c <HAL_MspInit+0x44>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6193      	str	r3, [r2, #24]
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <HAL_MspInit+0x44>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_MspInit+0x44>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	4a08      	ldr	r2, [pc, #32]	; (800089c <HAL_MspInit+0x44>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000880:	61d3      	str	r3, [r2, #28]
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_MspInit+0x44>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800088e:	2007      	movs	r0, #7
 8000890:	f000 fdee 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40021000 	.word	0x40021000

080008a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008b0:	d113      	bne.n	80008da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <HAL_TIM_Base_MspInit+0x44>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <HAL_TIM_Base_MspInit+0x44>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	61d3      	str	r3, [r2, #28]
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <HAL_TIM_Base_MspInit+0x44>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2100      	movs	r1, #0
 80008ce:	201c      	movs	r0, #28
 80008d0:	f000 fdd9 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008d4:	201c      	movs	r0, #28
 80008d6:	f000 fdf2 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000

080008e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08e      	sub	sp, #56	; 0x38
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a74      	ldr	r2, [pc, #464]	; (8000ad8 <HAL_UART_MspInit+0x1f0>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d156      	bne.n	80009b8 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800090a:	4b74      	ldr	r3, [pc, #464]	; (8000adc <HAL_UART_MspInit+0x1f4>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	4a73      	ldr	r2, [pc, #460]	; (8000adc <HAL_UART_MspInit+0x1f4>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000914:	6193      	str	r3, [r2, #24]
 8000916:	4b71      	ldr	r3, [pc, #452]	; (8000adc <HAL_UART_MspInit+0x1f4>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091e:	623b      	str	r3, [r7, #32]
 8000920:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	4b6e      	ldr	r3, [pc, #440]	; (8000adc <HAL_UART_MspInit+0x1f4>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	4a6d      	ldr	r2, [pc, #436]	; (8000adc <HAL_UART_MspInit+0x1f4>)
 8000928:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800092c:	6153      	str	r3, [r2, #20]
 800092e:	4b6b      	ldr	r3, [pc, #428]	; (8000adc <HAL_UART_MspInit+0x1f4>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000936:	61fb      	str	r3, [r7, #28]
 8000938:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800093a:	2330      	movs	r3, #48	; 0x30
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800094a:	2307      	movs	r3, #7
 800094c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000952:	4619      	mov	r1, r3
 8000954:	4862      	ldr	r0, [pc, #392]	; (8000ae0 <HAL_UART_MspInit+0x1f8>)
 8000956:	f000 ffdb 	bl	8001910 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800095a:	4b62      	ldr	r3, [pc, #392]	; (8000ae4 <HAL_UART_MspInit+0x1fc>)
 800095c:	4a62      	ldr	r2, [pc, #392]	; (8000ae8 <HAL_UART_MspInit+0x200>)
 800095e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000960:	4b60      	ldr	r3, [pc, #384]	; (8000ae4 <HAL_UART_MspInit+0x1fc>)
 8000962:	2200      	movs	r2, #0
 8000964:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000966:	4b5f      	ldr	r3, [pc, #380]	; (8000ae4 <HAL_UART_MspInit+0x1fc>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800096c:	4b5d      	ldr	r3, [pc, #372]	; (8000ae4 <HAL_UART_MspInit+0x1fc>)
 800096e:	2280      	movs	r2, #128	; 0x80
 8000970:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000972:	4b5c      	ldr	r3, [pc, #368]	; (8000ae4 <HAL_UART_MspInit+0x1fc>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000978:	4b5a      	ldr	r3, [pc, #360]	; (8000ae4 <HAL_UART_MspInit+0x1fc>)
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800097e:	4b59      	ldr	r3, [pc, #356]	; (8000ae4 <HAL_UART_MspInit+0x1fc>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000984:	4b57      	ldr	r3, [pc, #348]	; (8000ae4 <HAL_UART_MspInit+0x1fc>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800098a:	4856      	ldr	r0, [pc, #344]	; (8000ae4 <HAL_UART_MspInit+0x1fc>)
 800098c:	f000 fdb1 	bl	80014f2 <HAL_DMA_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 8000996:	f7ff fe93 	bl	80006c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a51      	ldr	r2, [pc, #324]	; (8000ae4 <HAL_UART_MspInit+0x1fc>)
 800099e:	675a      	str	r2, [r3, #116]	; 0x74
 80009a0:	4a50      	ldr	r2, [pc, #320]	; (8000ae4 <HAL_UART_MspInit+0x1fc>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	2025      	movs	r0, #37	; 0x25
 80009ac:	f000 fd6b 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009b0:	2025      	movs	r0, #37	; 0x25
 80009b2:	f000 fd84 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009b6:	e08b      	b.n	8000ad0 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a4b      	ldr	r2, [pc, #300]	; (8000aec <HAL_UART_MspInit+0x204>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d129      	bne.n	8000a16 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c2:	4b46      	ldr	r3, [pc, #280]	; (8000adc <HAL_UART_MspInit+0x1f4>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	4a45      	ldr	r2, [pc, #276]	; (8000adc <HAL_UART_MspInit+0x1f4>)
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	61d3      	str	r3, [r2, #28]
 80009ce:	4b43      	ldr	r3, [pc, #268]	; (8000adc <HAL_UART_MspInit+0x1f4>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d6:	61bb      	str	r3, [r7, #24]
 80009d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b40      	ldr	r3, [pc, #256]	; (8000adc <HAL_UART_MspInit+0x1f4>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	4a3f      	ldr	r2, [pc, #252]	; (8000adc <HAL_UART_MspInit+0x1f4>)
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e4:	6153      	str	r3, [r2, #20]
 80009e6:	4b3d      	ldr	r3, [pc, #244]	; (8000adc <HAL_UART_MspInit+0x1f4>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009f2:	230c      	movs	r3, #12
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a02:	2307      	movs	r3, #7
 8000a04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a10:	f000 ff7e 	bl	8001910 <HAL_GPIO_Init>
}
 8000a14:	e05c      	b.n	8000ad0 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a35      	ldr	r2, [pc, #212]	; (8000af0 <HAL_UART_MspInit+0x208>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d157      	bne.n	8000ad0 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a20:	4b2e      	ldr	r3, [pc, #184]	; (8000adc <HAL_UART_MspInit+0x1f4>)
 8000a22:	69db      	ldr	r3, [r3, #28]
 8000a24:	4a2d      	ldr	r2, [pc, #180]	; (8000adc <HAL_UART_MspInit+0x1f4>)
 8000a26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a2a:	61d3      	str	r3, [r2, #28]
 8000a2c:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <HAL_UART_MspInit+0x1f4>)
 8000a2e:	69db      	ldr	r3, [r3, #28]
 8000a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a38:	4b28      	ldr	r3, [pc, #160]	; (8000adc <HAL_UART_MspInit+0x1f4>)
 8000a3a:	695b      	ldr	r3, [r3, #20]
 8000a3c:	4a27      	ldr	r2, [pc, #156]	; (8000adc <HAL_UART_MspInit+0x1f4>)
 8000a3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a42:	6153      	str	r3, [r2, #20]
 8000a44:	4b25      	ldr	r3, [pc, #148]	; (8000adc <HAL_UART_MspInit+0x1f4>)
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a50:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a62:	2307      	movs	r3, #7
 8000a64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4821      	ldr	r0, [pc, #132]	; (8000af4 <HAL_UART_MspInit+0x20c>)
 8000a6e:	f000 ff4f 	bl	8001910 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <HAL_UART_MspInit+0x210>)
 8000a74:	4a21      	ldr	r2, [pc, #132]	; (8000afc <HAL_UART_MspInit+0x214>)
 8000a76:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a78:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <HAL_UART_MspInit+0x210>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <HAL_UART_MspInit+0x210>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a84:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <HAL_UART_MspInit+0x210>)
 8000a86:	2280      	movs	r2, #128	; 0x80
 8000a88:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <HAL_UART_MspInit+0x210>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <HAL_UART_MspInit+0x210>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <HAL_UART_MspInit+0x210>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <HAL_UART_MspInit+0x210>)
 8000a9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aa2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000aa4:	4814      	ldr	r0, [pc, #80]	; (8000af8 <HAL_UART_MspInit+0x210>)
 8000aa6:	f000 fd24 	bl	80014f2 <HAL_DMA_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <HAL_UART_MspInit+0x1cc>
      Error_Handler();
 8000ab0:	f7ff fe06 	bl	80006c0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <HAL_UART_MspInit+0x210>)
 8000ab8:	675a      	str	r2, [r3, #116]	; 0x74
 8000aba:	4a0f      	ldr	r2, [pc, #60]	; (8000af8 <HAL_UART_MspInit+0x210>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	2027      	movs	r0, #39	; 0x27
 8000ac6:	f000 fcde 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000aca:	2027      	movs	r0, #39	; 0x27
 8000acc:	f000 fcf7 	bl	80014be <HAL_NVIC_EnableIRQ>
}
 8000ad0:	bf00      	nop
 8000ad2:	3738      	adds	r7, #56	; 0x38
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40013800 	.word	0x40013800
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	48000800 	.word	0x48000800
 8000ae4:	20000274 	.word	0x20000274
 8000ae8:	40020058 	.word	0x40020058
 8000aec:	40004400 	.word	0x40004400
 8000af0:	40004800 	.word	0x40004800
 8000af4:	48000400 	.word	0x48000400
 8000af8:	200002b8 	.word	0x200002b8
 8000afc:	40020030 	.word	0x40020030

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <NMI_Handler+0x4>

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <MemManage_Handler+0x4>

08000b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4c:	f000 fba0 	bl	8001290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <DMA1_Channel3_IRQHandler+0x10>)
 8000b5a:	f000 fde7 	bl	800172c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200002b8 	.word	0x200002b8

08000b68 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <DMA1_Channel5_IRQHandler+0x10>)
 8000b6e:	f000 fddd 	bl	800172c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000274 	.word	0x20000274

08000b7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <TIM2_IRQHandler+0x10>)
 8000b82:	f002 fd01 	bl	8003588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000090 	.word	0x20000090

08000b90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <USART1_IRQHandler+0x10>)
 8000b96:	f003 f93f 	bl	8003e18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200000dc 	.word	0x200000dc

08000ba4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <USART3_IRQHandler+0x10>)
 8000baa:	f003 f935 	bl	8003e18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200001ec 	.word	0x200001ec

08000bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc0:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <_sbrk+0x5c>)
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <_sbrk+0x60>)
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <_sbrk+0x64>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <_sbrk+0x68>)
 8000bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d207      	bcs.n	8000bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be8:	f004 fa7c 	bl	80050e4 <__errno>
 8000bec:	4603      	mov	r3, r0
 8000bee:	220c      	movs	r2, #12
 8000bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	e009      	b.n	8000c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <_sbrk+0x64>)
 8000c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20004000 	.word	0x20004000
 8000c18:	00000400 	.word	0x00000400
 8000c1c:	20000334 	.word	0x20000334
 8000c20:	200008a8 	.word	0x200008a8

08000c24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <SystemInit+0x20>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <SystemInit+0x20>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <Init_DMA_Rcvd>:
/**********************************************************************************/
/******************** Functions for the reception of messages *********************/
/**********************************************************************************/

void Init_DMA_Rcvd(UART_HandleTypeDef *huart)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <Init_DMA_Rcvd+0x48>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d108      	bne.n	8000c6c <Init_DMA_Rcvd+0x24>
	{
		huartArr[0] = *huart;
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <Init_DMA_Rcvd+0x4c>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4610      	mov	r0, r2
 8000c60:	4619      	mov	r1, r3
 8000c62:	2388      	movs	r3, #136	; 0x88
 8000c64:	461a      	mov	r2, r3
 8000c66:	f004 fa67 	bl	8005138 <memcpy>
	}
	else if (huart->Instance == USART3)
	{
		huartArr[1] = *huart;
	}
}
 8000c6a:	e00c      	b.n	8000c86 <Init_DMA_Rcvd+0x3e>
	else if (huart->Instance == USART3)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <Init_DMA_Rcvd+0x50>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d107      	bne.n	8000c86 <Init_DMA_Rcvd+0x3e>
		huartArr[1] = *huart;
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <Init_DMA_Rcvd+0x4c>)
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	3388      	adds	r3, #136	; 0x88
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	2288      	movs	r2, #136	; 0x88
 8000c80:	4618      	mov	r0, r3
 8000c82:	f004 fa59 	bl	8005138 <memcpy>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40013800 	.word	0x40013800
 8000c94:	20000338 	.word	0x20000338
 8000c98:	40004800 	.word	0x40004800

08000c9c <Start_DMA_Rcvd>:
/**
  * @brief Initialize DMA Reception and save UART Handlers (huart) in an array
  * @retval None
  */
void Start_DMA_Rcvd(UART_HandleTypeDef *huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <Start_DMA_Rcvd+0x3c>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d105      	bne.n	8000cba <Start_DMA_Rcvd+0x1e>
	{
		//SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)Rx_Buf1) & ~(uint32_t)0x1F), RxBuf_SIZE+32);
		HAL_UARTEx_ReceiveToIdle_DMA(huart, (uint8_t *) Rx_Buf1, RxBuf_SIZE);
 8000cae:	2232      	movs	r2, #50	; 0x32
 8000cb0:	490a      	ldr	r1, [pc, #40]	; (8000cdc <Start_DMA_Rcvd+0x40>)
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f004 f9bd 	bl	8005032 <HAL_UARTEx_ReceiveToIdle_DMA>
	else if (huart->Instance == USART3)
	{
		//SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)Rx_Buf2) & ~(uint32_t)0x1F), RxBuf_SIZE+32);
		HAL_UARTEx_ReceiveToIdle_DMA(huart, (uint8_t *) Rx_Buf2, RxBuf_SIZE);
	}
}
 8000cb8:	e009      	b.n	8000cce <Start_DMA_Rcvd+0x32>
	else if (huart->Instance == USART3)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <Start_DMA_Rcvd+0x44>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d104      	bne.n	8000cce <Start_DMA_Rcvd+0x32>
		HAL_UARTEx_ReceiveToIdle_DMA(huart, (uint8_t *) Rx_Buf2, RxBuf_SIZE);
 8000cc4:	2232      	movs	r2, #50	; 0x32
 8000cc6:	4907      	ldr	r1, [pc, #28]	; (8000ce4 <Start_DMA_Rcvd+0x48>)
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f004 f9b2 	bl	8005032 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40013800 	.word	0x40013800
 8000cdc:	20000448 	.word	0x20000448
 8000ce0:	40004800 	.word	0x40004800
 8000ce4:	2000047c 	.word	0x2000047c

08000ce8 <HAL_UARTEx_RxEventCallback>:
/**
  * @brief Callback function for RX uart, dont forget to start DMA in main file (use last two lines of this function)
  * @retval None
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	807b      	strh	r3, [r7, #2]
	uint16_t datatocopy;

	if (recv_msg_cnt < NB_RX_MSG_MAX)
 8000cf4:	4b46      	ldr	r3, [pc, #280]	; (8000e10 <HAL_UARTEx_RxEventCallback+0x128>)
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	2b13      	cmp	r3, #19
 8000cfa:	f200 8081 	bhi.w	8000e00 <HAL_UARTEx_RxEventCallback+0x118>
	{
		uint8_t *Rx_Buf;
		if ((&huartArr[0])->Instance == huart->Instance)
 8000cfe:	4b45      	ldr	r3, [pc, #276]	; (8000e14 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d10a      	bne.n	8000d20 <HAL_UARTEx_RxEventCallback+0x38>
		{
			Rx_Buf = Rx_Buf1;
 8000d0a:	4b43      	ldr	r3, [pc, #268]	; (8000e18 <HAL_UARTEx_RxEventCallback+0x130>)
 8000d0c:	60fb      	str	r3, [r7, #12]
			strncpy(recv_msg_dev[recv_msg_write_pos], UART0_NAME, 4);
 8000d0e:	4b43      	ldr	r3, [pc, #268]	; (8000e1c <HAL_UARTEx_RxEventCallback+0x134>)
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4a42      	ldr	r2, [pc, #264]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x138>)
 8000d16:	4413      	add	r3, r2
 8000d18:	4a42      	ldr	r2, [pc, #264]	; (8000e24 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000d1a:	6810      	ldr	r0, [r2, #0]
 8000d1c:	6018      	str	r0, [r3, #0]
 8000d1e:	e010      	b.n	8000d42 <HAL_UARTEx_RxEventCallback+0x5a>
		}
		else if ((&huartArr[1])->Instance == huart->Instance)
 8000d20:	4b3c      	ldr	r3, [pc, #240]	; (8000e14 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000d22:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d109      	bne.n	8000d42 <HAL_UARTEx_RxEventCallback+0x5a>
		{
			Rx_Buf = Rx_Buf2;
 8000d2e:	4b3e      	ldr	r3, [pc, #248]	; (8000e28 <HAL_UARTEx_RxEventCallback+0x140>)
 8000d30:	60fb      	str	r3, [r7, #12]
			strncpy(recv_msg_dev[recv_msg_write_pos], UART1_NAME, 4);
 8000d32:	4b3a      	ldr	r3, [pc, #232]	; (8000e1c <HAL_UARTEx_RxEventCallback+0x134>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4a39      	ldr	r2, [pc, #228]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x138>)
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a3b      	ldr	r2, [pc, #236]	; (8000e2c <HAL_UARTEx_RxEventCallback+0x144>)
 8000d3e:	6810      	ldr	r0, [r2, #0]
 8000d40:	6018      	str	r0, [r3, #0]
		}

		// Position updating
		oldPos_Rx = newPos_Rx; // Update the last position before copying new data
 8000d42:	4b3b      	ldr	r3, [pc, #236]	; (8000e30 <HAL_UARTEx_RxEventCallback+0x148>)
 8000d44:	881a      	ldrh	r2, [r3, #0]
 8000d46:	4b3b      	ldr	r3, [pc, #236]	; (8000e34 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000d48:	801a      	strh	r2, [r3, #0]
		//uint16_t currPos_Rx = newPos_Rx;

		// Copy to MainRxBuf from Rx_Buf
		if (oldPos_Rx+Size > MainRxBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8000d4a:	4b3a      	ldr	r3, [pc, #232]	; (8000e34 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	887b      	ldrh	r3, [r7, #2]
 8000d52:	4413      	add	r3, r2
 8000d54:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000d58:	dd1f      	ble.n	8000d9a <HAL_UARTEx_RxEventCallback+0xb2>
		{
			datatocopy = MainRxBuf_SIZE-oldPos_Rx;  // find out how much space is left in the main buffer
 8000d5a:	4b36      	ldr	r3, [pc, #216]	; (8000e34 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8000d62:	817b      	strh	r3, [r7, #10]
			newPos_Rx = (Size-datatocopy);  // update the position
 8000d64:	887a      	ldrh	r2, [r7, #2]
 8000d66:	897b      	ldrh	r3, [r7, #10]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	4b30      	ldr	r3, [pc, #192]	; (8000e30 <HAL_UARTEx_RxEventCallback+0x148>)
 8000d6e:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainRxBuf+oldPos_Rx, Rx_Buf, datatocopy);  // copy data in that remaining space
 8000d70:	4b30      	ldr	r3, [pc, #192]	; (8000e34 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b30      	ldr	r3, [pc, #192]	; (8000e38 <HAL_UARTEx_RxEventCallback+0x150>)
 8000d78:	4413      	add	r3, r2
 8000d7a:	897a      	ldrh	r2, [r7, #10]
 8000d7c:	68f9      	ldr	r1, [r7, #12]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f004 f9da 	bl	8005138 <memcpy>
			memcpy ((uint8_t *)MainRxBuf, (uint8_t *)Rx_Buf+datatocopy, (Size-datatocopy));  // copy the remaining data
 8000d84:	897b      	ldrh	r3, [r7, #10]
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	18d1      	adds	r1, r2, r3
 8000d8a:	887a      	ldrh	r2, [r7, #2]
 8000d8c:	897b      	ldrh	r3, [r7, #10]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	461a      	mov	r2, r3
 8000d92:	4829      	ldr	r0, [pc, #164]	; (8000e38 <HAL_UARTEx_RxEventCallback+0x150>)
 8000d94:	f004 f9d0 	bl	8005138 <memcpy>
 8000d98:	e010      	b.n	8000dbc <HAL_UARTEx_RxEventCallback+0xd4>
		}
		else
		{
			newPos_Rx = Size+oldPos_Rx;
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000d9c:	881a      	ldrh	r2, [r3, #0]
 8000d9e:	887b      	ldrh	r3, [r7, #2]
 8000da0:	4413      	add	r3, r2
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <HAL_UARTEx_RxEventCallback+0x148>)
 8000da6:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainRxBuf+oldPos_Rx, Rx_Buf, Size);
 8000da8:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <HAL_UARTEx_RxEventCallback+0x150>)
 8000db0:	4413      	add	r3, r2
 8000db2:	887a      	ldrh	r2, [r7, #2]
 8000db4:	68f9      	ldr	r1, [r7, #12]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f004 f9be 	bl	8005138 <memcpy>
		}

		recv_msg_start[recv_msg_write_pos] = oldPos_Rx; // Add new msg's start position
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <HAL_UARTEx_RxEventCallback+0x134>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000dc4:	8819      	ldrh	r1, [r3, #0]
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <HAL_UARTEx_RxEventCallback+0x154>)
 8000dc8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		recv_msg_size[recv_msg_write_pos] = Size; // Add new msg's size
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <HAL_UARTEx_RxEventCallback+0x134>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4a1b      	ldr	r2, [pc, #108]	; (8000e40 <HAL_UARTEx_RxEventCallback+0x158>)
 8000dd4:	887b      	ldrh	r3, [r7, #2]
 8000dd6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
		recv_msg_cnt++; // New message added
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <HAL_UARTEx_RxEventCallback+0x128>)
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_UARTEx_RxEventCallback+0x128>)
 8000de4:	801a      	strh	r2, [r3, #0]
		recv_msg_write_pos++; // Update position for next msg
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <HAL_UARTEx_RxEventCallback+0x134>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_UARTEx_RxEventCallback+0x134>)
 8000df0:	801a      	strh	r2, [r3, #0]
		if (recv_msg_write_pos == NB_RX_MSG_MAX) // Cycle position if at the end of array
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_UARTEx_RxEventCallback+0x134>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	2b14      	cmp	r3, #20
 8000df8:	d102      	bne.n	8000e00 <HAL_UARTEx_RxEventCallback+0x118>
		{
			recv_msg_write_pos = 0;
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_UARTEx_RxEventCallback+0x134>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	801a      	strh	r2, [r3, #0]
		}
	}

	/* start the DMA again */
	Start_DMA_Rcvd(huart);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff4b 	bl	8000c9c <Start_DMA_Rcvd>
}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200005e4 	.word	0x200005e4
 8000e14:	20000338 	.word	0x20000338
 8000e18:	20000448 	.word	0x20000448
 8000e1c:	200005e2 	.word	0x200005e2
 8000e20:	20000638 	.word	0x20000638
 8000e24:	08005c0c 	.word	0x08005c0c
 8000e28:	2000047c 	.word	0x2000047c
 8000e2c:	08005c10 	.word	0x08005c10
 8000e30:	200005de 	.word	0x200005de
 8000e34:	200005dc 	.word	0x200005dc
 8000e38:	200004b0 	.word	0x200004b0
 8000e3c:	200005e8 	.word	0x200005e8
 8000e40:	20000610 	.word	0x20000610

08000e44 <Retrieve_Msg>:
/**
  * @brief Retrieves one new message in main buffer (FIFO)
  * @retval Size of message, 0 if no new message
  */
int Retrieve_Msg(uint8_t *InterpretBuf, char *dev)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
	if (recv_msg_cnt > 0) // Make sure there is a new msg to interpret
 8000e4e:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <Retrieve_Msg+0xdc>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d05e      	beq.n	8000f14 <Retrieve_Msg+0xd0>
		/* Buffer for copying from MainBuf when processing data
		 * to avoid */
		//uint8_t InterpretBuf[RxBuf_SIZE];

		// Get Position, Size and Source of received message
		uint16_t startPos = recv_msg_start[recv_msg_read_pos];
 8000e56:	4b33      	ldr	r3, [pc, #204]	; (8000f24 <Retrieve_Msg+0xe0>)
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	4b32      	ldr	r3, [pc, #200]	; (8000f28 <Retrieve_Msg+0xe4>)
 8000e5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e62:	81fb      	strh	r3, [r7, #14]
		uint16_t Size = recv_msg_size[recv_msg_read_pos];
 8000e64:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <Retrieve_Msg+0xe0>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b30      	ldr	r3, [pc, #192]	; (8000f2c <Retrieve_Msg+0xe8>)
 8000e6c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e70:	81bb      	strh	r3, [r7, #12]
		strncpy(dev, recv_msg_dev[recv_msg_read_pos], 4);
 8000e72:	4b2c      	ldr	r3, [pc, #176]	; (8000f24 <Retrieve_Msg+0xe0>)
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4a2d      	ldr	r2, [pc, #180]	; (8000f30 <Retrieve_Msg+0xec>)
 8000e7a:	4413      	add	r3, r2
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	4619      	mov	r1, r3
 8000e80:	6838      	ldr	r0, [r7, #0]
 8000e82:	f004 f9a3 	bl	80051cc <strncpy>

		// Update position of next message and message count
		recv_msg_read_pos++;
 8000e86:	4b27      	ldr	r3, [pc, #156]	; (8000f24 <Retrieve_Msg+0xe0>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <Retrieve_Msg+0xe0>)
 8000e90:	801a      	strh	r2, [r3, #0]
		recv_msg_cnt--; // One less message to interpret
 8000e92:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <Retrieve_Msg+0xdc>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <Retrieve_Msg+0xdc>)
 8000e9c:	801a      	strh	r2, [r3, #0]
		if (recv_msg_read_pos == NB_RX_MSG_MAX) // Cycle position if at the end of array
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <Retrieve_Msg+0xe0>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	2b14      	cmp	r3, #20
 8000ea4:	d102      	bne.n	8000eac <Retrieve_Msg+0x68>
		{
			recv_msg_read_pos = 0;
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <Retrieve_Msg+0xe0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	801a      	strh	r2, [r3, #0]
		}

		/* Copy data from MainBuf to InterpretBuf */
		if (startPos+Size > MainRxBuf_SIZE) // Data looped back at some point to beginning of buffer
 8000eac:	89fa      	ldrh	r2, [r7, #14]
 8000eae:	89bb      	ldrh	r3, [r7, #12]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000eb6:	dd1e      	ble.n	8000ef6 <Retrieve_Msg+0xb2>
		{
			uint16_t datatocopy = MainRxBuf_SIZE-startPos;  // find out how much space is left in the main buffer
 8000eb8:	89fb      	ldrh	r3, [r7, #14]
 8000eba:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8000ebe:	817b      	strh	r3, [r7, #10]
			memcpy (InterpretBuf, (uint8_t *)MainRxBuf+startPos, datatocopy);  // Copy first half to beginning of InterpretBuf
 8000ec0:	89fb      	ldrh	r3, [r7, #14]
 8000ec2:	4a1c      	ldr	r2, [pc, #112]	; (8000f34 <Retrieve_Msg+0xf0>)
 8000ec4:	4413      	add	r3, r2
 8000ec6:	897a      	ldrh	r2, [r7, #10]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f004 f934 	bl	8005138 <memcpy>
			memcpy ((uint8_t *)InterpretBuf+datatocopy, MainRxBuf, (Size-datatocopy));  // copy the remaining data
 8000ed0:	897b      	ldrh	r3, [r7, #10]
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	18d0      	adds	r0, r2, r3
 8000ed6:	89ba      	ldrh	r2, [r7, #12]
 8000ed8:	897b      	ldrh	r3, [r7, #10]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	461a      	mov	r2, r3
 8000ede:	4915      	ldr	r1, [pc, #84]	; (8000f34 <Retrieve_Msg+0xf0>)
 8000ee0:	f004 f92a 	bl	8005138 <memcpy>
			InterpretBuf[Size-datatocopy] = '\0'; // End copied string with null char (signal end of string)
 8000ee4:	89ba      	ldrh	r2, [r7, #12]
 8000ee6:	897b      	ldrh	r3, [r7, #10]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
 8000ef4:	e00c      	b.n	8000f10 <Retrieve_Msg+0xcc>
		}
		else // Data isn't looped from end to start of buffer (continuous ;D)
		{
			memcpy (InterpretBuf, (uint8_t *)MainRxBuf+startPos, Size);  // copy the remaining data
 8000ef6:	89fb      	ldrh	r3, [r7, #14]
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <Retrieve_Msg+0xf0>)
 8000efa:	4413      	add	r3, r2
 8000efc:	89ba      	ldrh	r2, [r7, #12]
 8000efe:	4619      	mov	r1, r3
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f004 f919 	bl	8005138 <memcpy>
			InterpretBuf[Size] = '\0'; // End copied string with null char (signal end of string)
 8000f06:	89bb      	ldrh	r3, [r7, #12]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
		}

		return Size;
 8000f10:	89bb      	ldrh	r3, [r7, #12]
 8000f12:	e000      	b.n	8000f16 <Retrieve_Msg+0xd2>
	}
	else
	{
		return 0;
 8000f14:	2300      	movs	r3, #0
	}
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200005e4 	.word	0x200005e4
 8000f24:	200005e0 	.word	0x200005e0
 8000f28:	200005e8 	.word	0x200005e8
 8000f2c:	20000610 	.word	0x20000610
 8000f30:	20000638 	.word	0x20000638
 8000f34:	200004b0 	.word	0x200004b0

08000f38 <HAL_UART_TxCpltCallback>:
/**
  * @brief Callback function for TX uart, signaling end of transmission with variable inside
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	msg_end_of_tx = 1; // Ready to send a new message
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <HAL_UART_TxCpltCallback+0x1c>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000004 	.word	0x20000004

08000f58 <UART_Send_Messages>:

void UART_Send_Messages(UART_HandleTypeDef *huart0, UART_HandleTypeDef *huart1)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	// Remaining msgs to send, none currently being transmitted and only instance
	// of this function currently being executed
	if (send_msg_cnt > 0 && msg_end_of_tx == 1 && uart_sending_msgs == 0)
 8000f62:	4b46      	ldr	r3, [pc, #280]	; (800107c <UART_Send_Messages+0x124>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 8083 	beq.w	8001072 <UART_Send_Messages+0x11a>
 8000f6c:	4b44      	ldr	r3, [pc, #272]	; (8001080 <UART_Send_Messages+0x128>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d17e      	bne.n	8001072 <UART_Send_Messages+0x11a>
 8000f74:	4b43      	ldr	r3, [pc, #268]	; (8001084 <UART_Send_Messages+0x12c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d17a      	bne.n	8001072 <UART_Send_Messages+0x11a>
	{
		char dev[4];

		uart_sending_msgs = 1; // So this function does not compute twice
 8000f7c:	4b41      	ldr	r3, [pc, #260]	; (8001084 <UART_Send_Messages+0x12c>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
							   // at the same time.
		msg_end_of_tx = 0; // Indicate a message is to be sent shortly  to prevent
 8000f82:	4b3f      	ldr	r3, [pc, #252]	; (8001080 <UART_Send_Messages+0x128>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
						   // trying to send through uart 2 msgs at the same time

		uint16_t startPos = send_msg_start[send_msg_read_pos];
 8000f88:	4b3f      	ldr	r3, [pc, #252]	; (8001088 <UART_Send_Messages+0x130>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b3f      	ldr	r3, [pc, #252]	; (800108c <UART_Send_Messages+0x134>)
 8000f90:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f94:	82fb      	strh	r3, [r7, #22]
		uint16_t Size = send_msg_size[send_msg_read_pos];
 8000f96:	4b3c      	ldr	r3, [pc, #240]	; (8001088 <UART_Send_Messages+0x130>)
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b3c      	ldr	r3, [pc, #240]	; (8001090 <UART_Send_Messages+0x138>)
 8000f9e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000fa2:	82bb      	strh	r3, [r7, #20]
		strncpy(dev, send_msg_dev[send_msg_read_pos], 4);
 8000fa4:	4b38      	ldr	r3, [pc, #224]	; (8001088 <UART_Send_Messages+0x130>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4a3a      	ldr	r2, [pc, #232]	; (8001094 <UART_Send_Messages+0x13c>)
 8000fac:	1899      	adds	r1, r3, r2
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f004 f909 	bl	80051cc <strncpy>
		send_msg_cnt--; // One less message to interpret
 8000fba:	4b30      	ldr	r3, [pc, #192]	; (800107c <UART_Send_Messages+0x124>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	4b2e      	ldr	r3, [pc, #184]	; (800107c <UART_Send_Messages+0x124>)
 8000fc4:	801a      	strh	r2, [r3, #0]
		// Update the position of msgs info read
		send_msg_read_pos++;
 8000fc6:	4b30      	ldr	r3, [pc, #192]	; (8001088 <UART_Send_Messages+0x130>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <UART_Send_Messages+0x130>)
 8000fd0:	801a      	strh	r2, [r3, #0]
		if (send_msg_read_pos == NB_TX_MSG_MAX) // Cycle position if at the end of array
 8000fd2:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <UART_Send_Messages+0x130>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	2b14      	cmp	r3, #20
 8000fd8:	d102      	bne.n	8000fe0 <UART_Send_Messages+0x88>
		{
			send_msg_read_pos = 0;
 8000fda:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <UART_Send_Messages+0x130>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	801a      	strh	r2, [r3, #0]
		}

		if (startPos+Size > TxBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8000fe0:	8afa      	ldrh	r2, [r7, #22]
 8000fe2:	8abb      	ldrh	r3, [r7, #20]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000fea:	dd16      	ble.n	800101a <UART_Send_Messages+0xc2>
		{
			uint16_t datatocopy = TxBuf_SIZE-startPos;  // find out how much space is left in the main buffer
 8000fec:	8afb      	ldrh	r3, [r7, #22]
 8000fee:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8000ff2:	827b      	strh	r3, [r7, #18]

			memcpy (UART_send_buff, Tx_Buf+startPos, datatocopy);
 8000ff4:	8afb      	ldrh	r3, [r7, #22]
 8000ff6:	4a28      	ldr	r2, [pc, #160]	; (8001098 <UART_Send_Messages+0x140>)
 8000ff8:	4413      	add	r3, r2
 8000ffa:	8a7a      	ldrh	r2, [r7, #18]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4827      	ldr	r0, [pc, #156]	; (800109c <UART_Send_Messages+0x144>)
 8001000:	f004 f89a 	bl	8005138 <memcpy>
			memcpy (UART_send_buff+datatocopy, Tx_Buf, Size-datatocopy);
 8001004:	8a7b      	ldrh	r3, [r7, #18]
 8001006:	4a25      	ldr	r2, [pc, #148]	; (800109c <UART_Send_Messages+0x144>)
 8001008:	1898      	adds	r0, r3, r2
 800100a:	8aba      	ldrh	r2, [r7, #20]
 800100c:	8a7b      	ldrh	r3, [r7, #18]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	461a      	mov	r2, r3
 8001012:	4921      	ldr	r1, [pc, #132]	; (8001098 <UART_Send_Messages+0x140>)
 8001014:	f004 f890 	bl	8005138 <memcpy>
 8001018:	e007      	b.n	800102a <UART_Send_Messages+0xd2>
		}
		else
		{
			memcpy (UART_send_buff, Tx_Buf + startPos, Size);
 800101a:	8afb      	ldrh	r3, [r7, #22]
 800101c:	4a1e      	ldr	r2, [pc, #120]	; (8001098 <UART_Send_Messages+0x140>)
 800101e:	4413      	add	r3, r2
 8001020:	8aba      	ldrh	r2, [r7, #20]
 8001022:	4619      	mov	r1, r3
 8001024:	481d      	ldr	r0, [pc, #116]	; (800109c <UART_Send_Messages+0x144>)
 8001026:	f004 f887 	bl	8005138 <memcpy>
		/* Clean D-cache */
		/* Make sure the address is 32-byte aligned and add 32-bytes to length, in case it overlaps cacheline */
		//SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)UART_send_buff) & ~(uint32_t)0x1F), MSG_MAX_SIZE+32);

		/* DMA Transmit */
		if (strncmp(dev, UART0_NAME, 3) == 0)
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	2203      	movs	r2, #3
 8001030:	491b      	ldr	r1, [pc, #108]	; (80010a0 <UART_Send_Messages+0x148>)
 8001032:	4618      	mov	r0, r3
 8001034:	f004 f8b6 	bl	80051a4 <strncmp>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d106      	bne.n	800104c <UART_Send_Messages+0xf4>
		{
			//HAL_UART_Transmit_DMA(&huartArr[0], UART_send_buff, Size);
			HAL_UART_Transmit_IT(huart0, UART_send_buff, Size);
 800103e:	8abb      	ldrh	r3, [r7, #20]
 8001040:	461a      	mov	r2, r3
 8001042:	4916      	ldr	r1, [pc, #88]	; (800109c <UART_Send_Messages+0x144>)
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f002 fe89 	bl	8003d5c <HAL_UART_Transmit_IT>
 800104a:	e00f      	b.n	800106c <UART_Send_Messages+0x114>

		}
		else if (strncmp(dev, UART1_NAME, 3) == 0)
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2203      	movs	r2, #3
 8001052:	4914      	ldr	r1, [pc, #80]	; (80010a4 <UART_Send_Messages+0x14c>)
 8001054:	4618      	mov	r0, r3
 8001056:	f004 f8a5 	bl	80051a4 <strncmp>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d105      	bne.n	800106c <UART_Send_Messages+0x114>
		{
			//HAL_UART_Transmit_DMA(&huartArr[1], UART_send_buff, Size);
			HAL_UART_Transmit_IT(huart1, UART_send_buff, Size);
 8001060:	8abb      	ldrh	r3, [r7, #20]
 8001062:	461a      	mov	r2, r3
 8001064:	490d      	ldr	r1, [pc, #52]	; (800109c <UART_Send_Messages+0x144>)
 8001066:	6838      	ldr	r0, [r7, #0]
 8001068:	f002 fe78 	bl	8003d5c <HAL_UART_Transmit_IT>
		}

		uart_sending_msgs = 0; // Function ready to be called again
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <UART_Send_Messages+0x12c>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
	}
}
 8001072:	bf00      	nop
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200007f2 	.word	0x200007f2
 8001080:	20000004 	.word	0x20000004
 8001084:	20000688 	.word	0x20000688
 8001088:	200007ee 	.word	0x200007ee
 800108c:	200007f4 	.word	0x200007f4
 8001090:	2000081c 	.word	0x2000081c
 8001094:	20000844 	.word	0x20000844
 8001098:	2000068c 	.word	0x2000068c
 800109c:	200007b8 	.word	0x200007b8
 80010a0:	08005c0c 	.word	0x08005c0c
 80010a4:	08005c10 	.word	0x08005c10

080010a8 <Send_Msg>:
/**
  * @brief Add a new message to the buffer of messages to be sent through UART
  * @retval None
  */
void Send_Msg(char *msg, int Size, char *dev)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
	uint16_t currPos_Tx = newPos_Tx; // Store start of current message received (to transmit to interpreter later)
 80010b4:	4b36      	ldr	r3, [pc, #216]	; (8001190 <Send_Msg+0xe8>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	82fb      	strh	r3, [r7, #22]
	uint16_t datatocopy;

	if (send_msg_cnt < NB_TX_MSG_MAX)
 80010ba:	4b36      	ldr	r3, [pc, #216]	; (8001194 <Send_Msg+0xec>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	2b13      	cmp	r3, #19
 80010c0:	d862      	bhi.n	8001188 <Send_Msg+0xe0>
	{
		oldPos_Tx = newPos_Tx;  // Update the last position before copying new data
 80010c2:	4b33      	ldr	r3, [pc, #204]	; (8001190 <Send_Msg+0xe8>)
 80010c4:	881a      	ldrh	r2, [r3, #0]
 80010c6:	4b34      	ldr	r3, [pc, #208]	; (8001198 <Send_Msg+0xf0>)
 80010c8:	801a      	strh	r2, [r3, #0]

		if (currPos_Tx+Size > TxBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 80010ca:	8afa      	ldrh	r2, [r7, #22]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	4413      	add	r3, r2
 80010d0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80010d4:	dd1d      	ble.n	8001112 <Send_Msg+0x6a>
		{
			datatocopy = TxBuf_SIZE-currPos_Tx;  // find out how much space is left in the main buffer
 80010d6:	8afb      	ldrh	r3, [r7, #22]
 80010d8:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 80010dc:	82bb      	strh	r3, [r7, #20]
			newPos_Tx = (Size-datatocopy);  // update the position
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	8abb      	ldrh	r3, [r7, #20]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	4b29      	ldr	r3, [pc, #164]	; (8001190 <Send_Msg+0xe8>)
 80010ea:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)Tx_Buf+currPos_Tx, msg, datatocopy);  // copy data in that remaining space
 80010ec:	8afb      	ldrh	r3, [r7, #22]
 80010ee:	4a2b      	ldr	r2, [pc, #172]	; (800119c <Send_Msg+0xf4>)
 80010f0:	4413      	add	r3, r2
 80010f2:	8aba      	ldrh	r2, [r7, #20]
 80010f4:	68f9      	ldr	r1, [r7, #12]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f004 f81e 	bl	8005138 <memcpy>
			memcpy ((uint8_t *)Tx_Buf, (uint8_t *)msg+datatocopy, (Size-datatocopy));  // copy the remaining data
 80010fc:	8abb      	ldrh	r3, [r7, #20]
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	18d1      	adds	r1, r2, r3
 8001102:	8abb      	ldrh	r3, [r7, #20]
 8001104:	68ba      	ldr	r2, [r7, #8]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	461a      	mov	r2, r3
 800110a:	4824      	ldr	r0, [pc, #144]	; (800119c <Send_Msg+0xf4>)
 800110c:	f004 f814 	bl	8005138 <memcpy>
 8001110:	e00e      	b.n	8001130 <Send_Msg+0x88>
		}
		else
		{
			newPos_Tx = Size+currPos_Tx;
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	b29a      	uxth	r2, r3
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	4413      	add	r3, r2
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <Send_Msg+0xe8>)
 800111e:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)Tx_Buf+currPos_Tx, msg, Size);
 8001120:	8afb      	ldrh	r3, [r7, #22]
 8001122:	4a1e      	ldr	r2, [pc, #120]	; (800119c <Send_Msg+0xf4>)
 8001124:	4413      	add	r3, r2
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	68f9      	ldr	r1, [r7, #12]
 800112a:	4618      	mov	r0, r3
 800112c:	f004 f804 	bl	8005138 <memcpy>
		}

		send_msg_start[send_msg_write_pos] = currPos_Tx; // Add new msg's start position
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <Send_Msg+0xf8>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	4a1b      	ldr	r2, [pc, #108]	; (80011a4 <Send_Msg+0xfc>)
 8001138:	8afb      	ldrh	r3, [r7, #22]
 800113a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
		send_msg_size[send_msg_write_pos] = Size; // Add new msg's size
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <Send_Msg+0xf8>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	b299      	uxth	r1, r3
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <Send_Msg+0x100>)
 800114a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		strncpy(send_msg_dev[send_msg_write_pos], dev, 4); // Copy device name
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <Send_Msg+0xf8>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4a15      	ldr	r2, [pc, #84]	; (80011ac <Send_Msg+0x104>)
 8001156:	4413      	add	r3, r2
 8001158:	2204      	movs	r2, #4
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4618      	mov	r0, r3
 800115e:	f004 f835 	bl	80051cc <strncpy>
		send_msg_cnt++; // New message added
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <Send_Msg+0xec>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <Send_Msg+0xec>)
 800116c:	801a      	strh	r2, [r3, #0]
		send_msg_write_pos++; // Update position for next msg
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <Send_Msg+0xf8>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	b29a      	uxth	r2, r3
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <Send_Msg+0xf8>)
 8001178:	801a      	strh	r2, [r3, #0]
		if (send_msg_write_pos == NB_TX_MSG_MAX) // Cycle position if at the end of array
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <Send_Msg+0xf8>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	2b14      	cmp	r3, #20
 8001180:	d102      	bne.n	8001188 <Send_Msg+0xe0>
		{
			send_msg_write_pos = 0;
 8001182:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <Send_Msg+0xf8>)
 8001184:	2200      	movs	r2, #0
 8001186:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8001188:	bf00      	nop
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200007ec 	.word	0x200007ec
 8001194:	200007f2 	.word	0x200007f2
 8001198:	200007ea 	.word	0x200007ea
 800119c:	2000068c 	.word	0x2000068c
 80011a0:	200007f0 	.word	0x200007f0
 80011a4:	200007f4 	.word	0x200007f4
 80011a8:	2000081c 	.word	0x2000081c
 80011ac:	20000844 	.word	0x20000844

080011b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011b4:	f7ff fd36 	bl	8000c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <LoopForever+0x6>)
  ldr r1, =_edata
 80011ba:	490d      	ldr	r1, [pc, #52]	; (80011f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011bc:	4a0d      	ldr	r2, [pc, #52]	; (80011f4 <LoopForever+0xe>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c0:	e002      	b.n	80011c8 <LoopCopyDataInit>

080011c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c6:	3304      	adds	r3, #4

080011c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011cc:	d3f9      	bcc.n	80011c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011d0:	4c0a      	ldr	r4, [pc, #40]	; (80011fc <LoopForever+0x16>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d4:	e001      	b.n	80011da <LoopFillZerobss>

080011d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d8:	3204      	adds	r2, #4

080011da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011dc:	d3fb      	bcc.n	80011d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011de:	f003 ff87 	bl	80050f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011e2:	f7ff f873 	bl	80002cc <main>

080011e6 <LoopForever>:

LoopForever:
    b LoopForever
 80011e6:	e7fe      	b.n	80011e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011e8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80011ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80011f4:	08005d88 	.word	0x08005d88
  ldr r2, =_sbss
 80011f8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80011fc:	200008a8 	.word	0x200008a8

08001200 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001200:	e7fe      	b.n	8001200 <ADC1_IRQHandler>
	...

08001204 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <HAL_Init+0x28>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a07      	ldr	r2, [pc, #28]	; (800122c <HAL_Init+0x28>)
 800120e:	f043 0310 	orr.w	r3, r3, #16
 8001212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001214:	2003      	movs	r0, #3
 8001216:	f000 f92b 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800121a:	2000      	movs	r0, #0
 800121c:	f000 f808 	bl	8001230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001220:	f7ff fb1a 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40022000 	.word	0x40022000

08001230 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_InitTick+0x54>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_InitTick+0x58>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001246:	fbb3 f3f1 	udiv	r3, r3, r1
 800124a:	fbb2 f3f3 	udiv	r3, r2, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f943 	bl	80014da <HAL_SYSTICK_Config>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e00e      	b.n	800127c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b0f      	cmp	r3, #15
 8001262:	d80a      	bhi.n	800127a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001264:	2200      	movs	r2, #0
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f000 f90b 	bl	8001486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001270:	4a06      	ldr	r2, [pc, #24]	; (800128c <HAL_InitTick+0x5c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	e000      	b.n	800127c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000000 	.word	0x20000000
 8001288:	2000000c 	.word	0x2000000c
 800128c:	20000008 	.word	0x20000008

08001290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x20>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x24>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <HAL_IncTick+0x24>)
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	2000000c 	.word	0x2000000c
 80012b4:	20000894 	.word	0x20000894

080012b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <HAL_GetTick+0x14>)
 80012be:	681b      	ldr	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000894 	.word	0x20000894

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	60d3      	str	r3, [r2, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db0b      	blt.n	800135e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 021f 	and.w	r2, r3, #31
 800134c:	4907      	ldr	r1, [pc, #28]	; (800136c <__NVIC_EnableIRQ+0x38>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	2001      	movs	r0, #1
 8001356:	fa00 f202 	lsl.w	r2, r0, r2
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800143c:	d301      	bcc.n	8001442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143e:	2301      	movs	r3, #1
 8001440:	e00f      	b.n	8001462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <SysTick_Config+0x40>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144a:	210f      	movs	r1, #15
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f7ff ff8e 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SysTick_Config+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <SysTick_Config+0x40>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff29 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001498:	f7ff ff3e 	bl	8001318 <__NVIC_GetPriorityGrouping>
 800149c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f7ff ff8e 	bl	80013c4 <NVIC_EncodePriority>
 80014a8:	4602      	mov	r2, r0
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff5d 	bl	8001370 <__NVIC_SetPriority>
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff31 	bl	8001334 <__NVIC_EnableIRQ>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffa2 	bl	800142c <SysTick_Config>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e037      	b.n	8001578 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2202      	movs	r2, #2
 800150c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800151e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001522:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800152c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001538:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001544:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	4313      	orrs	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f9b8 	bl	80018d0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}  
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d101      	bne.n	80015a0 <HAL_DMA_Start_IT+0x20>
 800159c:	2302      	movs	r3, #2
 800159e:	e04a      	b.n	8001636 <HAL_DMA_Start_IT+0xb6>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d13a      	bne.n	8001628 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2202      	movs	r2, #2
 80015b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0201 	bic.w	r2, r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 f94b 	bl	8001872 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d008      	beq.n	80015f6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 020e 	orr.w	r2, r2, #14
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	e00f      	b.n	8001616 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f042 020a 	orr.w	r2, r2, #10
 8001604:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0204 	bic.w	r2, r2, #4
 8001614:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f042 0201 	orr.w	r2, r2, #1
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	e005      	b.n	8001634 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001630:	2302      	movs	r3, #2
 8001632:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001634:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001636:	4618      	mov	r0, r3
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800164c:	2b02      	cmp	r3, #2
 800164e:	d008      	beq.n	8001662 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2204      	movs	r2, #4
 8001654:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e020      	b.n	80016a4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 020e 	bic.w	r2, r2, #14
 8001670:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0201 	bic.w	r2, r2, #1
 8001680:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168a:	2101      	movs	r1, #1
 800168c:	fa01 f202 	lsl.w	r2, r1, r2
 8001690:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d005      	beq.n	80016d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2204      	movs	r2, #4
 80016ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	e027      	b.n	8001722 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 020e 	bic.w	r2, r2, #14
 80016e0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0201 	bic.w	r2, r2, #1
 80016f0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fa:	2101      	movs	r1, #1
 80016fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001700:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	4798      	blx	r3
    } 
  }
  return status;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	2204      	movs	r2, #4
 800174a:	409a      	lsls	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4013      	ands	r3, r2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d024      	beq.n	800179e <HAL_DMA_IRQHandler+0x72>
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	2b00      	cmp	r3, #0
 800175c:	d01f      	beq.n	800179e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0320 	and.w	r3, r3, #32
 8001768:	2b00      	cmp	r3, #0
 800176a:	d107      	bne.n	800177c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0204 	bic.w	r2, r2, #4
 800177a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001784:	2104      	movs	r1, #4
 8001786:	fa01 f202 	lsl.w	r2, r1, r2
 800178a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001790:	2b00      	cmp	r3, #0
 8001792:	d06a      	beq.n	800186a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800179c:	e065      	b.n	800186a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	2202      	movs	r2, #2
 80017a4:	409a      	lsls	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d02c      	beq.n	8001808 <HAL_DMA_IRQHandler+0xdc>
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d027      	beq.n	8001808 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0320 	and.w	r3, r3, #32
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10b      	bne.n	80017de <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 020a 	bic.w	r2, r2, #10
 80017d4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e6:	2102      	movs	r1, #2
 80017e8:	fa01 f202 	lsl.w	r2, r1, r2
 80017ec:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d035      	beq.n	800186a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001806:	e030      	b.n	800186a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	2208      	movs	r2, #8
 800180e:	409a      	lsls	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d028      	beq.n	800186a <HAL_DMA_IRQHandler+0x13e>
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d023      	beq.n	800186a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 020e 	bic.w	r2, r2, #14
 8001830:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183a:	2101      	movs	r1, #1
 800183c:	fa01 f202 	lsl.w	r2, r1, r2
 8001840:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	2b00      	cmp	r3, #0
 800185e:	d004      	beq.n	800186a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	4798      	blx	r3
    }
  }
}  
 8001868:	e7ff      	b.n	800186a <HAL_DMA_IRQHandler+0x13e>
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001872:	b480      	push	{r7}
 8001874:	b085      	sub	sp, #20
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001888:	2101      	movs	r1, #1
 800188a:	fa01 f202 	lsl.w	r2, r1, r2
 800188e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b10      	cmp	r3, #16
 800189e:	d108      	bne.n	80018b2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018b0:	e007      	b.n	80018c2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	60da      	str	r2, [r3, #12]
}
 80018c2:	bf00      	nop
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <DMA_CalcBaseAndBitshift+0x34>)
 80018e0:	4413      	add	r3, r2
 80018e2:	4a09      	ldr	r2, [pc, #36]	; (8001908 <DMA_CalcBaseAndBitshift+0x38>)
 80018e4:	fba2 2303 	umull	r2, r3, r2, r3
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	009a      	lsls	r2, r3, #2
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a06      	ldr	r2, [pc, #24]	; (800190c <DMA_CalcBaseAndBitshift+0x3c>)
 80018f4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	bffdfff8 	.word	0xbffdfff8
 8001908:	cccccccd 	.word	0xcccccccd
 800190c:	40020000 	.word	0x40020000

08001910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001910:	b480      	push	{r7}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191e:	e14e      	b.n	8001bbe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	2101      	movs	r1, #1
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	fa01 f303 	lsl.w	r3, r1, r3
 800192c:	4013      	ands	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 8140 	beq.w	8001bb8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b01      	cmp	r3, #1
 8001942:	d005      	beq.n	8001950 <HAL_GPIO_Init+0x40>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d130      	bne.n	80019b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	2203      	movs	r2, #3
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001986:	2201      	movs	r2, #1
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	091b      	lsrs	r3, r3, #4
 800199c:	f003 0201 	and.w	r2, r3, #1
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	d017      	beq.n	80019ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	2203      	movs	r2, #3
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d123      	bne.n	8001a42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	08da      	lsrs	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3208      	adds	r2, #8
 8001a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	220f      	movs	r2, #15
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	691a      	ldr	r2, [r3, #16]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	08da      	lsrs	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3208      	adds	r2, #8
 8001a3c:	6939      	ldr	r1, [r7, #16]
 8001a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0203 	and.w	r2, r3, #3
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 809a 	beq.w	8001bb8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a84:	4b55      	ldr	r3, [pc, #340]	; (8001bdc <HAL_GPIO_Init+0x2cc>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a54      	ldr	r2, [pc, #336]	; (8001bdc <HAL_GPIO_Init+0x2cc>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b52      	ldr	r3, [pc, #328]	; (8001bdc <HAL_GPIO_Init+0x2cc>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a9c:	4a50      	ldr	r2, [pc, #320]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	220f      	movs	r2, #15
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ac6:	d013      	beq.n	8001af0 <HAL_GPIO_Init+0x1e0>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a46      	ldr	r2, [pc, #280]	; (8001be4 <HAL_GPIO_Init+0x2d4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d00d      	beq.n	8001aec <HAL_GPIO_Init+0x1dc>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a45      	ldr	r2, [pc, #276]	; (8001be8 <HAL_GPIO_Init+0x2d8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d007      	beq.n	8001ae8 <HAL_GPIO_Init+0x1d8>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a44      	ldr	r2, [pc, #272]	; (8001bec <HAL_GPIO_Init+0x2dc>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d101      	bne.n	8001ae4 <HAL_GPIO_Init+0x1d4>
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e006      	b.n	8001af2 <HAL_GPIO_Init+0x1e2>
 8001ae4:	2305      	movs	r3, #5
 8001ae6:	e004      	b.n	8001af2 <HAL_GPIO_Init+0x1e2>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e002      	b.n	8001af2 <HAL_GPIO_Init+0x1e2>
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <HAL_GPIO_Init+0x1e2>
 8001af0:	2300      	movs	r3, #0
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	f002 0203 	and.w	r2, r2, #3
 8001af8:	0092      	lsls	r2, r2, #2
 8001afa:	4093      	lsls	r3, r2
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b02:	4937      	ldr	r1, [pc, #220]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	089b      	lsrs	r3, r3, #2
 8001b08:	3302      	adds	r3, #2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b10:	4b37      	ldr	r3, [pc, #220]	; (8001bf0 <HAL_GPIO_Init+0x2e0>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b34:	4a2e      	ldr	r2, [pc, #184]	; (8001bf0 <HAL_GPIO_Init+0x2e0>)
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <HAL_GPIO_Init+0x2e0>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b5e:	4a24      	ldr	r2, [pc, #144]	; (8001bf0 <HAL_GPIO_Init+0x2e0>)
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b64:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <HAL_GPIO_Init+0x2e0>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b88:	4a19      	ldr	r2, [pc, #100]	; (8001bf0 <HAL_GPIO_Init+0x2e0>)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b8e:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <HAL_GPIO_Init+0x2e0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bb2:	4a0f      	ldr	r2, [pc, #60]	; (8001bf0 <HAL_GPIO_Init+0x2e0>)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f47f aea9 	bne.w	8001920 <HAL_GPIO_Init+0x10>
  }
}
 8001bce:	bf00      	nop
 8001bd0:	bf00      	nop
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40010000 	.word	0x40010000
 8001be4:	48000400 	.word	0x48000400
 8001be8:	48000800 	.word	0x48000800
 8001bec:	48000c00 	.word	0x48000c00
 8001bf0:	40010400 	.word	0x40010400

08001bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	807b      	strh	r3, [r7, #2]
 8001c00:	4613      	mov	r3, r2
 8001c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c04:	787b      	ldrb	r3, [r7, #1]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c0a:	887a      	ldrh	r2, [r7, #2]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c10:	e002      	b.n	8001c18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c12:	887a      	ldrh	r2, [r7, #2]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c34:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	f001 b823 	b.w	8002c90 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 817d 	beq.w	8001f5a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c60:	4bbc      	ldr	r3, [pc, #752]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d00c      	beq.n	8001c86 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c6c:	4bb9      	ldr	r3, [pc, #740]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d15c      	bne.n	8001d32 <HAL_RCC_OscConfig+0x10e>
 8001c78:	4bb6      	ldr	r3, [pc, #728]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c84:	d155      	bne.n	8001d32 <HAL_RCC_OscConfig+0x10e>
 8001c86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c8a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001c92:	fa93 f3a3 	rbit	r3, r3
 8001c96:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c9a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	095b      	lsrs	r3, r3, #5
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d102      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x94>
 8001cb2:	4ba8      	ldr	r3, [pc, #672]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	e015      	b.n	8001ce4 <HAL_RCC_OscConfig+0xc0>
 8001cb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cbc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001cc4:	fa93 f3a3 	rbit	r3, r3
 8001cc8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ccc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cd0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001cd4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001cd8:	fa93 f3a3 	rbit	r3, r3
 8001cdc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001ce0:	4b9c      	ldr	r3, [pc, #624]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ce8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001cec:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001cf0:	fa92 f2a2 	rbit	r2, r2
 8001cf4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001cf8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001cfc:	fab2 f282 	clz	r2, r2
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	f042 0220 	orr.w	r2, r2, #32
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	f002 021f 	and.w	r2, r2, #31
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 811f 	beq.w	8001f58 <HAL_RCC_OscConfig+0x334>
 8001d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 8116 	bne.w	8001f58 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f000 bfaf 	b.w	8002c90 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d42:	d106      	bne.n	8001d52 <HAL_RCC_OscConfig+0x12e>
 8001d44:	4b83      	ldr	r3, [pc, #524]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a82      	ldr	r2, [pc, #520]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	e036      	b.n	8001dc0 <HAL_RCC_OscConfig+0x19c>
 8001d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x158>
 8001d62:	4b7c      	ldr	r3, [pc, #496]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a7b      	ldr	r2, [pc, #492]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	4b79      	ldr	r3, [pc, #484]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a78      	ldr	r2, [pc, #480]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001d74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e021      	b.n	8001dc0 <HAL_RCC_OscConfig+0x19c>
 8001d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d8c:	d10c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x184>
 8001d8e:	4b71      	ldr	r3, [pc, #452]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a70      	ldr	r2, [pc, #448]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	4b6e      	ldr	r3, [pc, #440]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a6d      	ldr	r2, [pc, #436]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e00b      	b.n	8001dc0 <HAL_RCC_OscConfig+0x19c>
 8001da8:	4b6a      	ldr	r3, [pc, #424]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a69      	ldr	r2, [pc, #420]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	4b67      	ldr	r3, [pc, #412]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a66      	ldr	r2, [pc, #408]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dbe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dc0:	4b64      	ldr	r3, [pc, #400]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	f023 020f 	bic.w	r2, r3, #15
 8001dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	495f      	ldr	r1, [pc, #380]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d059      	beq.n	8001e9e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7ff fa65 	bl	80012b8 <HAL_GetTick>
 8001dee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df2:	e00a      	b.n	8001e0a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df4:	f7ff fa60 	bl	80012b8 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b64      	cmp	r3, #100	; 0x64
 8001e02:	d902      	bls.n	8001e0a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	f000 bf43 	b.w	8002c90 <HAL_RCC_OscConfig+0x106c>
 8001e0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e0e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001e1e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	095b      	lsrs	r3, r3, #5
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d102      	bne.n	8001e3c <HAL_RCC_OscConfig+0x218>
 8001e36:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	e015      	b.n	8001e68 <HAL_RCC_OscConfig+0x244>
 8001e3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e40:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001e50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e54:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001e58:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001e5c:	fa93 f3a3 	rbit	r3, r3
 8001e60:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001e64:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e6c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001e70:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001e74:	fa92 f2a2 	rbit	r2, r2
 8001e78:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001e7c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001e80:	fab2 f282 	clz	r2, r2
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	f042 0220 	orr.w	r2, r2, #32
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	f002 021f 	and.w	r2, r2, #31
 8001e90:	2101      	movs	r1, #1
 8001e92:	fa01 f202 	lsl.w	r2, r1, r2
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0ab      	beq.n	8001df4 <HAL_RCC_OscConfig+0x1d0>
 8001e9c:	e05d      	b.n	8001f5a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9e:	f7ff fa0b 	bl	80012b8 <HAL_GetTick>
 8001ea2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea6:	e00a      	b.n	8001ebe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea8:	f7ff fa06 	bl	80012b8 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b64      	cmp	r3, #100	; 0x64
 8001eb6:	d902      	bls.n	8001ebe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	f000 bee9 	b.w	8002c90 <HAL_RCC_OscConfig+0x106c>
 8001ebe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001ed2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	095b      	lsrs	r3, r3, #5
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d102      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x2cc>
 8001eea:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	e015      	b.n	8001f1c <HAL_RCC_OscConfig+0x2f8>
 8001ef0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ef4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001f04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f08:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001f0c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001f10:	fa93 f3a3 	rbit	r3, r3
 8001f14:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001f18:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f20:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001f24:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001f28:	fa92 f2a2 	rbit	r2, r2
 8001f2c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001f30:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001f34:	fab2 f282 	clz	r2, r2
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	f042 0220 	orr.w	r2, r2, #32
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	f002 021f 	and.w	r2, r2, #31
 8001f44:	2101      	movs	r1, #1
 8001f46:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1ab      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x284>
 8001f50:	e003      	b.n	8001f5a <HAL_RCC_OscConfig+0x336>
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 817d 	beq.w	800226a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f70:	4ba6      	ldr	r3, [pc, #664]	; (800220c <HAL_RCC_OscConfig+0x5e8>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 030c 	and.w	r3, r3, #12
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00b      	beq.n	8001f94 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f7c:	4ba3      	ldr	r3, [pc, #652]	; (800220c <HAL_RCC_OscConfig+0x5e8>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d172      	bne.n	800206e <HAL_RCC_OscConfig+0x44a>
 8001f88:	4ba0      	ldr	r3, [pc, #640]	; (800220c <HAL_RCC_OscConfig+0x5e8>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d16c      	bne.n	800206e <HAL_RCC_OscConfig+0x44a>
 8001f94:	2302      	movs	r3, #2
 8001f96:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001fa6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	095b      	lsrs	r3, r3, #5
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d102      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x3a0>
 8001fbe:	4b93      	ldr	r3, [pc, #588]	; (800220c <HAL_RCC_OscConfig+0x5e8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	e013      	b.n	8001fec <HAL_RCC_OscConfig+0x3c8>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001fdc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001fe8:	4b88      	ldr	r3, [pc, #544]	; (800220c <HAL_RCC_OscConfig+0x5e8>)
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	2202      	movs	r2, #2
 8001fee:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001ff2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001ff6:	fa92 f2a2 	rbit	r2, r2
 8001ffa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001ffe:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002002:	fab2 f282 	clz	r2, r2
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f042 0220 	orr.w	r2, r2, #32
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	f002 021f 	and.w	r2, r2, #31
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f202 	lsl.w	r2, r1, r2
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00a      	beq.n	8002034 <HAL_RCC_OscConfig+0x410>
 800201e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002022:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d002      	beq.n	8002034 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	f000 be2e 	b.w	8002c90 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002034:	4b75      	ldr	r3, [pc, #468]	; (800220c <HAL_RCC_OscConfig+0x5e8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800203c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002040:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	21f8      	movs	r1, #248	; 0xf8
 800204a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002052:	fa91 f1a1 	rbit	r1, r1
 8002056:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800205a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800205e:	fab1 f181 	clz	r1, r1
 8002062:	b2c9      	uxtb	r1, r1
 8002064:	408b      	lsls	r3, r1
 8002066:	4969      	ldr	r1, [pc, #420]	; (800220c <HAL_RCC_OscConfig+0x5e8>)
 8002068:	4313      	orrs	r3, r2
 800206a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206c:	e0fd      	b.n	800226a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800206e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002072:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 8088 	beq.w	8002190 <HAL_RCC_OscConfig+0x56c>
 8002080:	2301      	movs	r3, #1
 8002082:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002092:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	461a      	mov	r2, r3
 80020a8:	2301      	movs	r3, #1
 80020aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7ff f904 	bl	80012b8 <HAL_GetTick>
 80020b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b4:	e00a      	b.n	80020cc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b6:	f7ff f8ff 	bl	80012b8 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d902      	bls.n	80020cc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	f000 bde2 	b.w	8002c90 <HAL_RCC_OscConfig+0x106c>
 80020cc:	2302      	movs	r3, #2
 80020ce:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80020d6:	fa93 f3a3 	rbit	r3, r3
 80020da:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80020de:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e2:	fab3 f383 	clz	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	095b      	lsrs	r3, r3, #5
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d102      	bne.n	80020fc <HAL_RCC_OscConfig+0x4d8>
 80020f6:	4b45      	ldr	r3, [pc, #276]	; (800220c <HAL_RCC_OscConfig+0x5e8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	e013      	b.n	8002124 <HAL_RCC_OscConfig+0x500>
 80020fc:	2302      	movs	r3, #2
 80020fe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002102:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800210e:	2302      	movs	r3, #2
 8002110:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002114:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002120:	4b3a      	ldr	r3, [pc, #232]	; (800220c <HAL_RCC_OscConfig+0x5e8>)
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	2202      	movs	r2, #2
 8002126:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800212a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800212e:	fa92 f2a2 	rbit	r2, r2
 8002132:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002136:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800213a:	fab2 f282 	clz	r2, r2
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	f042 0220 	orr.w	r2, r2, #32
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	f002 021f 	and.w	r2, r2, #31
 800214a:	2101      	movs	r1, #1
 800214c:	fa01 f202 	lsl.w	r2, r1, r2
 8002150:	4013      	ands	r3, r2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0af      	beq.n	80020b6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002156:	4b2d      	ldr	r3, [pc, #180]	; (800220c <HAL_RCC_OscConfig+0x5e8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002162:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	21f8      	movs	r1, #248	; 0xf8
 800216c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002174:	fa91 f1a1 	rbit	r1, r1
 8002178:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800217c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002180:	fab1 f181 	clz	r1, r1
 8002184:	b2c9      	uxtb	r1, r1
 8002186:	408b      	lsls	r3, r1
 8002188:	4920      	ldr	r1, [pc, #128]	; (800220c <HAL_RCC_OscConfig+0x5e8>)
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]
 800218e:	e06c      	b.n	800226a <HAL_RCC_OscConfig+0x646>
 8002190:	2301      	movs	r3, #1
 8002192:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80021a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	461a      	mov	r2, r3
 80021b8:	2300      	movs	r3, #0
 80021ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7ff f87c 	bl	80012b8 <HAL_GetTick>
 80021c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c4:	e00a      	b.n	80021dc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c6:	f7ff f877 	bl	80012b8 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d902      	bls.n	80021dc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	f000 bd5a 	b.w	8002c90 <HAL_RCC_OscConfig+0x106c>
 80021dc:	2302      	movs	r3, #2
 80021de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80021ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	095b      	lsrs	r3, r3, #5
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b01      	cmp	r3, #1
 8002204:	d104      	bne.n	8002210 <HAL_RCC_OscConfig+0x5ec>
 8002206:	4b01      	ldr	r3, [pc, #4]	; (800220c <HAL_RCC_OscConfig+0x5e8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	e015      	b.n	8002238 <HAL_RCC_OscConfig+0x614>
 800220c:	40021000 	.word	0x40021000
 8002210:	2302      	movs	r3, #2
 8002212:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002222:	2302      	movs	r3, #2
 8002224:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002228:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800222c:	fa93 f3a3 	rbit	r3, r3
 8002230:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002234:	4bc8      	ldr	r3, [pc, #800]	; (8002558 <HAL_RCC_OscConfig+0x934>)
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	2202      	movs	r2, #2
 800223a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800223e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002242:	fa92 f2a2 	rbit	r2, r2
 8002246:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800224a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800224e:	fab2 f282 	clz	r2, r2
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	f042 0220 	orr.w	r2, r2, #32
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	f002 021f 	and.w	r2, r2, #31
 800225e:	2101      	movs	r1, #1
 8002260:	fa01 f202 	lsl.w	r2, r1, r2
 8002264:	4013      	ands	r3, r2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1ad      	bne.n	80021c6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 8110 	beq.w	80024a0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002284:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d079      	beq.n	8002384 <HAL_RCC_OscConfig+0x760>
 8002290:	2301      	movs	r3, #1
 8002292:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80022a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a6:	fab3 f383 	clz	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	4bab      	ldr	r3, [pc, #684]	; (800255c <HAL_RCC_OscConfig+0x938>)
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	461a      	mov	r2, r3
 80022b6:	2301      	movs	r3, #1
 80022b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ba:	f7fe fffd 	bl	80012b8 <HAL_GetTick>
 80022be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c2:	e00a      	b.n	80022da <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c4:	f7fe fff8 	bl	80012b8 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d902      	bls.n	80022da <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	f000 bcdb 	b.w	8002c90 <HAL_RCC_OscConfig+0x106c>
 80022da:	2302      	movs	r3, #2
 80022dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80022ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022f4:	2202      	movs	r2, #2
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	fa93 f2a3 	rbit	r2, r3
 8002306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002318:	2202      	movs	r2, #2
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	fa93 f2a3 	rbit	r2, r3
 800232a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002332:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002334:	4b88      	ldr	r3, [pc, #544]	; (8002558 <HAL_RCC_OscConfig+0x934>)
 8002336:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002340:	2102      	movs	r1, #2
 8002342:	6019      	str	r1, [r3, #0]
 8002344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002348:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	fa93 f1a3 	rbit	r1, r3
 8002352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002356:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800235a:	6019      	str	r1, [r3, #0]
  return result;
 800235c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002360:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	fab3 f383 	clz	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	2101      	movs	r1, #1
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0a0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x6a0>
 8002382:	e08d      	b.n	80024a0 <HAL_RCC_OscConfig+0x87c>
 8002384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002388:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800238c:	2201      	movs	r2, #1
 800238e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002394:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	fa93 f2a3 	rbit	r2, r3
 800239e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80023a6:	601a      	str	r2, [r3, #0]
  return result;
 80023a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80023b0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b2:	fab3 f383 	clz	r3, r3
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b68      	ldr	r3, [pc, #416]	; (800255c <HAL_RCC_OscConfig+0x938>)
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	461a      	mov	r2, r3
 80023c2:	2300      	movs	r3, #0
 80023c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c6:	f7fe ff77 	bl	80012b8 <HAL_GetTick>
 80023ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ce:	e00a      	b.n	80023e6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023d0:	f7fe ff72 	bl	80012b8 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d902      	bls.n	80023e6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	f000 bc55 	b.w	8002c90 <HAL_RCC_OscConfig+0x106c>
 80023e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80023ee:	2202      	movs	r2, #2
 80023f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	fa93 f2a3 	rbit	r2, r3
 8002400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002404:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002412:	2202      	movs	r2, #2
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	fa93 f2a3 	rbit	r2, r3
 8002424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002428:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002436:	2202      	movs	r2, #2
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	fa93 f2a3 	rbit	r2, r3
 8002448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002450:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002452:	4b41      	ldr	r3, [pc, #260]	; (8002558 <HAL_RCC_OscConfig+0x934>)
 8002454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800245e:	2102      	movs	r1, #2
 8002460:	6019      	str	r1, [r3, #0]
 8002462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002466:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	fa93 f1a3 	rbit	r1, r3
 8002470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002474:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002478:	6019      	str	r1, [r3, #0]
  return result;
 800247a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	fab3 f383 	clz	r3, r3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800248e:	b2db      	uxtb	r3, r3
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	2101      	movs	r1, #1
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d197      	bne.n	80023d0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 81a1 	beq.w	80027f8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024bc:	4b26      	ldr	r3, [pc, #152]	; (8002558 <HAL_RCC_OscConfig+0x934>)
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d116      	bne.n	80024f6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c8:	4b23      	ldr	r3, [pc, #140]	; (8002558 <HAL_RCC_OscConfig+0x934>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	4a22      	ldr	r2, [pc, #136]	; (8002558 <HAL_RCC_OscConfig+0x934>)
 80024ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d2:	61d3      	str	r3, [r2, #28]
 80024d4:	4b20      	ldr	r3, [pc, #128]	; (8002558 <HAL_RCC_OscConfig+0x934>)
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80024dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ea:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80024ee:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80024f0:	2301      	movs	r3, #1
 80024f2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f6:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <HAL_RCC_OscConfig+0x93c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d11a      	bne.n	8002538 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002502:	4b17      	ldr	r3, [pc, #92]	; (8002560 <HAL_RCC_OscConfig+0x93c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a16      	ldr	r2, [pc, #88]	; (8002560 <HAL_RCC_OscConfig+0x93c>)
 8002508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800250e:	f7fe fed3 	bl	80012b8 <HAL_GetTick>
 8002512:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002516:	e009      	b.n	800252c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002518:	f7fe fece 	bl	80012b8 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b64      	cmp	r3, #100	; 0x64
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e3b1      	b.n	8002c90 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <HAL_RCC_OscConfig+0x93c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0ef      	beq.n	8002518 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d10d      	bne.n	8002564 <HAL_RCC_OscConfig+0x940>
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <HAL_RCC_OscConfig+0x934>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4a02      	ldr	r2, [pc, #8]	; (8002558 <HAL_RCC_OscConfig+0x934>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6213      	str	r3, [r2, #32]
 8002554:	e03c      	b.n	80025d0 <HAL_RCC_OscConfig+0x9ac>
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000
 800255c:	10908120 	.word	0x10908120
 8002560:	40007000 	.word	0x40007000
 8002564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002568:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10c      	bne.n	800258e <HAL_RCC_OscConfig+0x96a>
 8002574:	4bc1      	ldr	r3, [pc, #772]	; (800287c <HAL_RCC_OscConfig+0xc58>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	4ac0      	ldr	r2, [pc, #768]	; (800287c <HAL_RCC_OscConfig+0xc58>)
 800257a:	f023 0301 	bic.w	r3, r3, #1
 800257e:	6213      	str	r3, [r2, #32]
 8002580:	4bbe      	ldr	r3, [pc, #760]	; (800287c <HAL_RCC_OscConfig+0xc58>)
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	4abd      	ldr	r2, [pc, #756]	; (800287c <HAL_RCC_OscConfig+0xc58>)
 8002586:	f023 0304 	bic.w	r3, r3, #4
 800258a:	6213      	str	r3, [r2, #32]
 800258c:	e020      	b.n	80025d0 <HAL_RCC_OscConfig+0x9ac>
 800258e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002592:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2b05      	cmp	r3, #5
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x994>
 800259e:	4bb7      	ldr	r3, [pc, #732]	; (800287c <HAL_RCC_OscConfig+0xc58>)
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	4ab6      	ldr	r2, [pc, #728]	; (800287c <HAL_RCC_OscConfig+0xc58>)
 80025a4:	f043 0304 	orr.w	r3, r3, #4
 80025a8:	6213      	str	r3, [r2, #32]
 80025aa:	4bb4      	ldr	r3, [pc, #720]	; (800287c <HAL_RCC_OscConfig+0xc58>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	4ab3      	ldr	r2, [pc, #716]	; (800287c <HAL_RCC_OscConfig+0xc58>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6213      	str	r3, [r2, #32]
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0x9ac>
 80025b8:	4bb0      	ldr	r3, [pc, #704]	; (800287c <HAL_RCC_OscConfig+0xc58>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	4aaf      	ldr	r2, [pc, #700]	; (800287c <HAL_RCC_OscConfig+0xc58>)
 80025be:	f023 0301 	bic.w	r3, r3, #1
 80025c2:	6213      	str	r3, [r2, #32]
 80025c4:	4bad      	ldr	r3, [pc, #692]	; (800287c <HAL_RCC_OscConfig+0xc58>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	4aac      	ldr	r2, [pc, #688]	; (800287c <HAL_RCC_OscConfig+0xc58>)
 80025ca:	f023 0304 	bic.w	r3, r3, #4
 80025ce:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 8081 	beq.w	80026e4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e2:	f7fe fe69 	bl	80012b8 <HAL_GetTick>
 80025e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ea:	e00b      	b.n	8002604 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ec:	f7fe fe64 	bl	80012b8 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e345      	b.n	8002c90 <HAL_RCC_OscConfig+0x106c>
 8002604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002608:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800260c:	2202      	movs	r2, #2
 800260e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002614:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	fa93 f2a3 	rbit	r2, r3
 800261e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002622:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002630:	2202      	movs	r2, #2
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002638:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	fa93 f2a3 	rbit	r2, r3
 8002642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002646:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800264a:	601a      	str	r2, [r3, #0]
  return result;
 800264c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002650:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002654:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	095b      	lsrs	r3, r3, #5
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f043 0302 	orr.w	r3, r3, #2
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d102      	bne.n	8002670 <HAL_RCC_OscConfig+0xa4c>
 800266a:	4b84      	ldr	r3, [pc, #528]	; (800287c <HAL_RCC_OscConfig+0xc58>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	e013      	b.n	8002698 <HAL_RCC_OscConfig+0xa74>
 8002670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002674:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002678:	2202      	movs	r2, #2
 800267a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002680:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	fa93 f2a3 	rbit	r2, r3
 800268a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	4b79      	ldr	r3, [pc, #484]	; (800287c <HAL_RCC_OscConfig+0xc58>)
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800269c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80026a0:	2102      	movs	r1, #2
 80026a2:	6011      	str	r1, [r2, #0]
 80026a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026a8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	fa92 f1a2 	rbit	r1, r2
 80026b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026b6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80026ba:	6011      	str	r1, [r2, #0]
  return result;
 80026bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026c0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80026c4:	6812      	ldr	r2, [r2, #0]
 80026c6:	fab2 f282 	clz	r2, r2
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	f002 021f 	and.w	r2, r2, #31
 80026d6:	2101      	movs	r1, #1
 80026d8:	fa01 f202 	lsl.w	r2, r1, r2
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d084      	beq.n	80025ec <HAL_RCC_OscConfig+0x9c8>
 80026e2:	e07f      	b.n	80027e4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e4:	f7fe fde8 	bl	80012b8 <HAL_GetTick>
 80026e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ec:	e00b      	b.n	8002706 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ee:	f7fe fde3 	bl	80012b8 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e2c4      	b.n	8002c90 <HAL_RCC_OscConfig+0x106c>
 8002706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800270e:	2202      	movs	r2, #2
 8002710:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002716:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	fa93 f2a3 	rbit	r2, r3
 8002720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002724:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002732:	2202      	movs	r2, #2
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	fa93 f2a3 	rbit	r2, r3
 8002744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002748:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800274c:	601a      	str	r2, [r3, #0]
  return result;
 800274e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002752:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002756:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002758:	fab3 f383 	clz	r3, r3
 800275c:	b2db      	uxtb	r3, r3
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	b2db      	uxtb	r3, r3
 8002762:	f043 0302 	orr.w	r3, r3, #2
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d102      	bne.n	8002772 <HAL_RCC_OscConfig+0xb4e>
 800276c:	4b43      	ldr	r3, [pc, #268]	; (800287c <HAL_RCC_OscConfig+0xc58>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	e013      	b.n	800279a <HAL_RCC_OscConfig+0xb76>
 8002772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002776:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800277a:	2202      	movs	r2, #2
 800277c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002782:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	fa93 f2a3 	rbit	r2, r3
 800278c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002790:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	4b39      	ldr	r3, [pc, #228]	; (800287c <HAL_RCC_OscConfig+0xc58>)
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800279e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80027a2:	2102      	movs	r1, #2
 80027a4:	6011      	str	r1, [r2, #0]
 80027a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027aa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80027ae:	6812      	ldr	r2, [r2, #0]
 80027b0:	fa92 f1a2 	rbit	r1, r2
 80027b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027b8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80027bc:	6011      	str	r1, [r2, #0]
  return result;
 80027be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027c2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	fab2 f282 	clz	r2, r2
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	f002 021f 	and.w	r2, r2, #31
 80027d8:	2101      	movs	r1, #1
 80027da:	fa01 f202 	lsl.w	r2, r1, r2
 80027de:	4013      	ands	r3, r2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d184      	bne.n	80026ee <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027e4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d105      	bne.n	80027f8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ec:	4b23      	ldr	r3, [pc, #140]	; (800287c <HAL_RCC_OscConfig+0xc58>)
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	4a22      	ldr	r2, [pc, #136]	; (800287c <HAL_RCC_OscConfig+0xc58>)
 80027f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 8242 	beq.w	8002c8e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800280a:	4b1c      	ldr	r3, [pc, #112]	; (800287c <HAL_RCC_OscConfig+0xc58>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b08      	cmp	r3, #8
 8002814:	f000 8213 	beq.w	8002c3e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	2b02      	cmp	r3, #2
 8002826:	f040 8162 	bne.w	8002aee <HAL_RCC_OscConfig+0xeca>
 800282a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002832:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002836:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	fa93 f2a3 	rbit	r2, r3
 8002846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800284e:	601a      	str	r2, [r3, #0]
  return result;
 8002850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002854:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002858:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285a:	fab3 f383 	clz	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002864:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	461a      	mov	r2, r3
 800286c:	2300      	movs	r3, #0
 800286e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7fe fd22 	bl	80012b8 <HAL_GetTick>
 8002874:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002878:	e00c      	b.n	8002894 <HAL_RCC_OscConfig+0xc70>
 800287a:	bf00      	nop
 800287c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002880:	f7fe fd1a 	bl	80012b8 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e1fd      	b.n	8002c90 <HAL_RCC_OscConfig+0x106c>
 8002894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002898:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800289c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	fa93 f2a3 	rbit	r2, r3
 80028b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80028b8:	601a      	str	r2, [r3, #0]
  return result;
 80028ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028be:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80028c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c4:	fab3 f383 	clz	r3, r3
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d102      	bne.n	80028de <HAL_RCC_OscConfig+0xcba>
 80028d8:	4bb0      	ldr	r3, [pc, #704]	; (8002b9c <HAL_RCC_OscConfig+0xf78>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	e027      	b.n	800292e <HAL_RCC_OscConfig+0xd0a>
 80028de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80028e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	fa93 f2a3 	rbit	r2, r3
 80028fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002908:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800290c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002916:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	fa93 f2a3 	rbit	r2, r3
 8002920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002924:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	4b9c      	ldr	r3, [pc, #624]	; (8002b9c <HAL_RCC_OscConfig+0xf78>)
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002932:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002936:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800293a:	6011      	str	r1, [r2, #0]
 800293c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002940:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	fa92 f1a2 	rbit	r1, r2
 800294a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800294e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002952:	6011      	str	r1, [r2, #0]
  return result;
 8002954:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002958:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	fab2 f282 	clz	r2, r2
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	f042 0220 	orr.w	r2, r2, #32
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	f002 021f 	and.w	r2, r2, #31
 800296e:	2101      	movs	r1, #1
 8002970:	fa01 f202 	lsl.w	r2, r1, r2
 8002974:	4013      	ands	r3, r2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d182      	bne.n	8002880 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800297a:	4b88      	ldr	r3, [pc, #544]	; (8002b9c <HAL_RCC_OscConfig+0xf78>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002986:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800298e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002992:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	430b      	orrs	r3, r1
 800299c:	497f      	ldr	r1, [pc, #508]	; (8002b9c <HAL_RCC_OscConfig+0xf78>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
 80029a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80029aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	fa93 f2a3 	rbit	r2, r3
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80029c6:	601a      	str	r2, [r3, #0]
  return result;
 80029c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029cc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80029d0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	461a      	mov	r2, r3
 80029e4:	2301      	movs	r3, #1
 80029e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7fe fc66 	bl	80012b8 <HAL_GetTick>
 80029ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029f0:	e009      	b.n	8002a06 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f2:	f7fe fc61 	bl	80012b8 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e144      	b.n	8002c90 <HAL_RCC_OscConfig+0x106c>
 8002a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002a0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a18:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	fa93 f2a3 	rbit	r2, r3
 8002a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a26:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002a2a:	601a      	str	r2, [r3, #0]
  return result;
 8002a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a30:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002a34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d102      	bne.n	8002a50 <HAL_RCC_OscConfig+0xe2c>
 8002a4a:	4b54      	ldr	r3, [pc, #336]	; (8002b9c <HAL_RCC_OscConfig+0xf78>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	e027      	b.n	8002aa0 <HAL_RCC_OscConfig+0xe7c>
 8002a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a54:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002a58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a62:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	fa93 f2a3 	rbit	r2, r3
 8002a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a70:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002a7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a88:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	fa93 f2a3 	rbit	r2, r3
 8002a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a96:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	4b3f      	ldr	r3, [pc, #252]	; (8002b9c <HAL_RCC_OscConfig+0xf78>)
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aa4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002aa8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002aac:	6011      	str	r1, [r2, #0]
 8002aae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ab2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	fa92 f1a2 	rbit	r1, r2
 8002abc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ac0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ac4:	6011      	str	r1, [r2, #0]
  return result;
 8002ac6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aca:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	fab2 f282 	clz	r2, r2
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	f042 0220 	orr.w	r2, r2, #32
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	f002 021f 	and.w	r2, r2, #31
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d082      	beq.n	80029f2 <HAL_RCC_OscConfig+0xdce>
 8002aec:	e0cf      	b.n	8002c8e <HAL_RCC_OscConfig+0x106a>
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002af6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002afa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b00:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	fa93 f2a3 	rbit	r2, r3
 8002b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b12:	601a      	str	r2, [r3, #0]
  return result;
 8002b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b18:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b1c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	461a      	mov	r2, r3
 8002b30:	2300      	movs	r3, #0
 8002b32:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7fe fbc0 	bl	80012b8 <HAL_GetTick>
 8002b38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b3c:	e009      	b.n	8002b52 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b3e:	f7fe fbbb 	bl	80012b8 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e09e      	b.n	8002c90 <HAL_RCC_OscConfig+0x106c>
 8002b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b56:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002b5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b64:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	fa93 f2a3 	rbit	r2, r3
 8002b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b72:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b76:	601a      	str	r2, [r3, #0]
  return result;
 8002b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b80:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	095b      	lsrs	r3, r3, #5
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d104      	bne.n	8002ba0 <HAL_RCC_OscConfig+0xf7c>
 8002b96:	4b01      	ldr	r3, [pc, #4]	; (8002b9c <HAL_RCC_OscConfig+0xf78>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	e029      	b.n	8002bf0 <HAL_RCC_OscConfig+0xfcc>
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ba8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	fa93 f2a3 	rbit	r2, r3
 8002bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bca:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002bce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	fa93 f2a3 	rbit	r2, r3
 8002be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	4b2b      	ldr	r3, [pc, #172]	; (8002c9c <HAL_RCC_OscConfig+0x1078>)
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bf4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002bf8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bfc:	6011      	str	r1, [r2, #0]
 8002bfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c02:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	fa92 f1a2 	rbit	r1, r2
 8002c0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c10:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002c14:	6011      	str	r1, [r2, #0]
  return result;
 8002c16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c1a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	fab2 f282 	clz	r2, r2
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	f042 0220 	orr.w	r2, r2, #32
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	f002 021f 	and.w	r2, r2, #31
 8002c30:	2101      	movs	r1, #1
 8002c32:	fa01 f202 	lsl.w	r2, r1, r2
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d180      	bne.n	8002b3e <HAL_RCC_OscConfig+0xf1a>
 8002c3c:	e027      	b.n	8002c8e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e01e      	b.n	8002c90 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <HAL_RCC_OscConfig+0x1078>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c5e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d10b      	bne.n	8002c8a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002c72:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d001      	beq.n	8002c8e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000

08002ca0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b09e      	sub	sp, #120	; 0x78
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e162      	b.n	8002f7e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b90      	ldr	r3, [pc, #576]	; (8002efc <HAL_RCC_ClockConfig+0x25c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d910      	bls.n	8002ce8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b8d      	ldr	r3, [pc, #564]	; (8002efc <HAL_RCC_ClockConfig+0x25c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 0207 	bic.w	r2, r3, #7
 8002cce:	498b      	ldr	r1, [pc, #556]	; (8002efc <HAL_RCC_ClockConfig+0x25c>)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b89      	ldr	r3, [pc, #548]	; (8002efc <HAL_RCC_ClockConfig+0x25c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e14a      	b.n	8002f7e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf4:	4b82      	ldr	r3, [pc, #520]	; (8002f00 <HAL_RCC_ClockConfig+0x260>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	497f      	ldr	r1, [pc, #508]	; (8002f00 <HAL_RCC_ClockConfig+0x260>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 80dc 	beq.w	8002ecc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d13c      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xf6>
 8002d1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d20:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d24:	fa93 f3a3 	rbit	r3, r3
 8002d28:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2c:	fab3 f383 	clz	r3, r3
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d102      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xa6>
 8002d40:	4b6f      	ldr	r3, [pc, #444]	; (8002f00 <HAL_RCC_ClockConfig+0x260>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	e00f      	b.n	8002d66 <HAL_RCC_ClockConfig+0xc6>
 8002d46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	667b      	str	r3, [r7, #100]	; 0x64
 8002d54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d58:	663b      	str	r3, [r7, #96]	; 0x60
 8002d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d62:	4b67      	ldr	r3, [pc, #412]	; (8002f00 <HAL_RCC_ClockConfig+0x260>)
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d6a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d6e:	fa92 f2a2 	rbit	r2, r2
 8002d72:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002d74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d76:	fab2 f282 	clz	r2, r2
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	f042 0220 	orr.w	r2, r2, #32
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	f002 021f 	and.w	r2, r2, #31
 8002d86:	2101      	movs	r1, #1
 8002d88:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d17b      	bne.n	8002e8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e0f3      	b.n	8002f7e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d13c      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x178>
 8002d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002da2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	095b      	lsrs	r3, r3, #5
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d102      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x128>
 8002dc2:	4b4f      	ldr	r3, [pc, #316]	; (8002f00 <HAL_RCC_ClockConfig+0x260>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	e00f      	b.n	8002de8 <HAL_RCC_ClockConfig+0x148>
 8002dc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dcc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dd0:	fa93 f3a3 	rbit	r3, r3
 8002dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8002dd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dda:	643b      	str	r3, [r7, #64]	; 0x40
 8002ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002de4:	4b46      	ldr	r3, [pc, #280]	; (8002f00 <HAL_RCC_ClockConfig+0x260>)
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dec:	63ba      	str	r2, [r7, #56]	; 0x38
 8002dee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002df0:	fa92 f2a2 	rbit	r2, r2
 8002df4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002df6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002df8:	fab2 f282 	clz	r2, r2
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	f042 0220 	orr.w	r2, r2, #32
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	f002 021f 	and.w	r2, r2, #31
 8002e08:	2101      	movs	r1, #1
 8002e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d13a      	bne.n	8002e8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0b2      	b.n	8002f7e <HAL_RCC_ClockConfig+0x2de>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e26:	fab3 f383 	clz	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	095b      	lsrs	r3, r3, #5
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d102      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x1a0>
 8002e3a:	4b31      	ldr	r3, [pc, #196]	; (8002f00 <HAL_RCC_ClockConfig+0x260>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	e00d      	b.n	8002e5c <HAL_RCC_ClockConfig+0x1bc>
 8002e40:	2302      	movs	r3, #2
 8002e42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	623b      	str	r3, [r7, #32]
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	61fb      	str	r3, [r7, #28]
 8002e58:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <HAL_RCC_ClockConfig+0x260>)
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	61ba      	str	r2, [r7, #24]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	fa92 f2a2 	rbit	r2, r2
 8002e66:	617a      	str	r2, [r7, #20]
  return result;
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	fab2 f282 	clz	r2, r2
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	f042 0220 	orr.w	r2, r2, #32
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	f002 021f 	and.w	r2, r2, #31
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e079      	b.n	8002f7e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e8a:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <HAL_RCC_ClockConfig+0x260>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f023 0203 	bic.w	r2, r3, #3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	491a      	ldr	r1, [pc, #104]	; (8002f00 <HAL_RCC_ClockConfig+0x260>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e9c:	f7fe fa0c 	bl	80012b8 <HAL_GetTick>
 8002ea0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea2:	e00a      	b.n	8002eba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea4:	f7fe fa08 	bl	80012b8 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e061      	b.n	8002f7e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <HAL_RCC_ClockConfig+0x260>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f003 020c 	and.w	r2, r3, #12
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d1eb      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <HAL_RCC_ClockConfig+0x25c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d214      	bcs.n	8002f04 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <HAL_RCC_ClockConfig+0x25c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f023 0207 	bic.w	r2, r3, #7
 8002ee2:	4906      	ldr	r1, [pc, #24]	; (8002efc <HAL_RCC_ClockConfig+0x25c>)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eea:	4b04      	ldr	r3, [pc, #16]	; (8002efc <HAL_RCC_ClockConfig+0x25c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d005      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e040      	b.n	8002f7e <HAL_RCC_ClockConfig+0x2de>
 8002efc:	40022000 	.word	0x40022000
 8002f00:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f10:	4b1d      	ldr	r3, [pc, #116]	; (8002f88 <HAL_RCC_ClockConfig+0x2e8>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	491a      	ldr	r1, [pc, #104]	; (8002f88 <HAL_RCC_ClockConfig+0x2e8>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f2e:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <HAL_RCC_ClockConfig+0x2e8>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4912      	ldr	r1, [pc, #72]	; (8002f88 <HAL_RCC_ClockConfig+0x2e8>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f42:	f000 f829 	bl	8002f98 <HAL_RCC_GetSysClockFreq>
 8002f46:	4601      	mov	r1, r0
 8002f48:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <HAL_RCC_ClockConfig+0x2e8>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f50:	22f0      	movs	r2, #240	; 0xf0
 8002f52:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	fa92 f2a2 	rbit	r2, r2
 8002f5a:	60fa      	str	r2, [r7, #12]
  return result;
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	fab2 f282 	clz	r2, r2
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	40d3      	lsrs	r3, r2
 8002f66:	4a09      	ldr	r2, [pc, #36]	; (8002f8c <HAL_RCC_ClockConfig+0x2ec>)
 8002f68:	5cd3      	ldrb	r3, [r2, r3]
 8002f6a:	fa21 f303 	lsr.w	r3, r1, r3
 8002f6e:	4a08      	ldr	r2, [pc, #32]	; (8002f90 <HAL_RCC_ClockConfig+0x2f0>)
 8002f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f72:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <HAL_RCC_ClockConfig+0x2f4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fe f95a 	bl	8001230 <HAL_InitTick>
  
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3778      	adds	r7, #120	; 0x78
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	08005c14 	.word	0x08005c14
 8002f90:	20000000 	.word	0x20000000
 8002f94:	20000008 	.word	0x20000008

08002f98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b08b      	sub	sp, #44	; 0x2c
 8002f9c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61bb      	str	r3, [r7, #24]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002fb2:	4b29      	ldr	r3, [pc, #164]	; (8003058 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d002      	beq.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x30>
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d003      	beq.n	8002fce <HAL_RCC_GetSysClockFreq+0x36>
 8002fc6:	e03c      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fc8:	4b24      	ldr	r3, [pc, #144]	; (800305c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fca:	623b      	str	r3, [r7, #32]
      break;
 8002fcc:	e03c      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002fd4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002fd8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	fa92 f2a2 	rbit	r2, r2
 8002fe0:	607a      	str	r2, [r7, #4]
  return result;
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	fab2 f282 	clz	r2, r2
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	40d3      	lsrs	r3, r2
 8002fec:	4a1c      	ldr	r2, [pc, #112]	; (8003060 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fee:	5cd3      	ldrb	r3, [r2, r3]
 8002ff0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002ff2:	4b19      	ldr	r3, [pc, #100]	; (8003058 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	220f      	movs	r2, #15
 8002ffc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	fa92 f2a2 	rbit	r2, r2
 8003004:	60fa      	str	r2, [r7, #12]
  return result;
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	fab2 f282 	clz	r2, r2
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	40d3      	lsrs	r3, r2
 8003010:	4a14      	ldr	r2, [pc, #80]	; (8003064 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003012:	5cd3      	ldrb	r3, [r2, r3]
 8003014:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003020:	4a0e      	ldr	r2, [pc, #56]	; (800305c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	fbb2 f2f3 	udiv	r2, r2, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	fb02 f303 	mul.w	r3, r2, r3
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
 8003030:	e004      	b.n	800303c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	4a0c      	ldr	r2, [pc, #48]	; (8003068 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	623b      	str	r3, [r7, #32]
      break;
 8003040:	e002      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003044:	623b      	str	r3, [r7, #32]
      break;
 8003046:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003048:	6a3b      	ldr	r3, [r7, #32]
}
 800304a:	4618      	mov	r0, r3
 800304c:	372c      	adds	r7, #44	; 0x2c
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000
 800305c:	007a1200 	.word	0x007a1200
 8003060:	08005c2c 	.word	0x08005c2c
 8003064:	08005c3c 	.word	0x08005c3c
 8003068:	003d0900 	.word	0x003d0900

0800306c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003070:	4b03      	ldr	r3, [pc, #12]	; (8003080 <HAL_RCC_GetHCLKFreq+0x14>)
 8003072:	681b      	ldr	r3, [r3, #0]
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20000000 	.word	0x20000000

08003084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800308a:	f7ff ffef 	bl	800306c <HAL_RCC_GetHCLKFreq>
 800308e:	4601      	mov	r1, r0
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003098:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800309c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	fa92 f2a2 	rbit	r2, r2
 80030a4:	603a      	str	r2, [r7, #0]
  return result;
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	fab2 f282 	clz	r2, r2
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	40d3      	lsrs	r3, r2
 80030b0:	4a04      	ldr	r2, [pc, #16]	; (80030c4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80030b2:	5cd3      	ldrb	r3, [r2, r3]
 80030b4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000
 80030c4:	08005c24 	.word	0x08005c24

080030c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80030ce:	f7ff ffcd 	bl	800306c <HAL_RCC_GetHCLKFreq>
 80030d2:	4601      	mov	r1, r0
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80030dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80030e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	fa92 f2a2 	rbit	r2, r2
 80030e8:	603a      	str	r2, [r7, #0]
  return result;
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	fab2 f282 	clz	r2, r2
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	40d3      	lsrs	r3, r2
 80030f4:	4a04      	ldr	r2, [pc, #16]	; (8003108 <HAL_RCC_GetPCLK2Freq+0x40>)
 80030f6:	5cd3      	ldrb	r3, [r2, r3]
 80030f8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40021000 	.word	0x40021000
 8003108:	08005c24 	.word	0x08005c24

0800310c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b092      	sub	sp, #72	; 0x48
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800311c:	2300      	movs	r3, #0
 800311e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 80d4 	beq.w	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003130:	4b4e      	ldr	r3, [pc, #312]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10e      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313c:	4b4b      	ldr	r3, [pc, #300]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	4a4a      	ldr	r2, [pc, #296]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003146:	61d3      	str	r3, [r2, #28]
 8003148:	4b48      	ldr	r3, [pc, #288]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315a:	4b45      	ldr	r3, [pc, #276]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	2b00      	cmp	r3, #0
 8003164:	d118      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003166:	4b42      	ldr	r3, [pc, #264]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a41      	ldr	r2, [pc, #260]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800316c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003170:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003172:	f7fe f8a1 	bl	80012b8 <HAL_GetTick>
 8003176:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003178:	e008      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317a:	f7fe f89d 	bl	80012b8 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b64      	cmp	r3, #100	; 0x64
 8003186:	d901      	bls.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e14b      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318c:	4b38      	ldr	r3, [pc, #224]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0f0      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003198:	4b34      	ldr	r3, [pc, #208]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 8084 	beq.w	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d07c      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031b8:	4b2c      	ldr	r3, [pc, #176]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ca:	fa93 f3a3 	rbit	r3, r3
 80031ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80031d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	461a      	mov	r2, r3
 80031da:	4b26      	ldr	r3, [pc, #152]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	461a      	mov	r2, r3
 80031e2:	2301      	movs	r3, #1
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ee:	fa93 f3a3 	rbit	r3, r3
 80031f2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031f6:	fab3 f383 	clz	r3, r3
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	4b1d      	ldr	r3, [pc, #116]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	461a      	mov	r2, r3
 8003206:	2300      	movs	r3, #0
 8003208:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800320a:	4a18      	ldr	r2, [pc, #96]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800320e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d04b      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321a:	f7fe f84d 	bl	80012b8 <HAL_GetTick>
 800321e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003220:	e00a      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003222:	f7fe f849 	bl	80012b8 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003230:	4293      	cmp	r3, r2
 8003232:	d901      	bls.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e0f5      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003238:	2302      	movs	r3, #2
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323e:	fa93 f3a3 	rbit	r3, r3
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
 8003244:	2302      	movs	r3, #2
 8003246:	623b      	str	r3, [r7, #32]
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	61fb      	str	r3, [r7, #28]
  return result;
 8003250:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	095b      	lsrs	r3, r3, #5
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f043 0302 	orr.w	r3, r3, #2
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d108      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003266:	4b01      	ldr	r3, [pc, #4]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	e00d      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800326c:	40021000 	.word	0x40021000
 8003270:	40007000 	.word	0x40007000
 8003274:	10908100 	.word	0x10908100
 8003278:	2302      	movs	r3, #2
 800327a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	fa93 f3a3 	rbit	r3, r3
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	4b69      	ldr	r3, [pc, #420]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	2202      	movs	r2, #2
 800328a:	613a      	str	r2, [r7, #16]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	fa92 f2a2 	rbit	r2, r2
 8003292:	60fa      	str	r2, [r7, #12]
  return result;
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	fab2 f282 	clz	r2, r2
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	f002 021f 	and.w	r2, r2, #31
 80032a6:	2101      	movs	r1, #1
 80032a8:	fa01 f202 	lsl.w	r2, r1, r2
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0b7      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80032b2:	4b5e      	ldr	r3, [pc, #376]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	495b      	ldr	r1, [pc, #364]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d105      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032cc:	4b57      	ldr	r3, [pc, #348]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	4a56      	ldr	r2, [pc, #344]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80032d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032e4:	4b51      	ldr	r3, [pc, #324]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	f023 0203 	bic.w	r2, r3, #3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	494e      	ldr	r1, [pc, #312]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d008      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003302:	4b4a      	ldr	r3, [pc, #296]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	f023 0210 	bic.w	r2, r3, #16
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	4947      	ldr	r1, [pc, #284]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003310:	4313      	orrs	r3, r2
 8003312:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d008      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003320:	4b42      	ldr	r3, [pc, #264]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	493f      	ldr	r1, [pc, #252]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800332e:	4313      	orrs	r3, r2
 8003330:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d008      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800333e:	4b3b      	ldr	r3, [pc, #236]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f023 0220 	bic.w	r2, r3, #32
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	4938      	ldr	r1, [pc, #224]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800334c:	4313      	orrs	r3, r2
 800334e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d008      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800335c:	4b33      	ldr	r3, [pc, #204]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	4930      	ldr	r1, [pc, #192]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800336a:	4313      	orrs	r3, r2
 800336c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800337a:	4b2c      	ldr	r3, [pc, #176]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	4929      	ldr	r1, [pc, #164]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003388:	4313      	orrs	r3, r2
 800338a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003398:	4b24      	ldr	r3, [pc, #144]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	4921      	ldr	r1, [pc, #132]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d008      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80033b6:	4b1d      	ldr	r3, [pc, #116]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	491a      	ldr	r1, [pc, #104]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80033d4:	4b15      	ldr	r3, [pc, #84]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	4912      	ldr	r1, [pc, #72]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d008      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80033f2:	4b0e      	ldr	r3, [pc, #56]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	490b      	ldr	r1, [pc, #44]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003400:	4313      	orrs	r3, r2
 8003402:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	4903      	ldr	r1, [pc, #12]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800341e:	4313      	orrs	r3, r2
 8003420:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3748      	adds	r7, #72	; 0x48
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40021000 	.word	0x40021000

08003430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e049      	b.n	80034d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fd fa22 	bl	80008a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3304      	adds	r3, #4
 800346c:	4619      	mov	r1, r3
 800346e:	4610      	mov	r0, r2
 8003470:	f000 fa9a 	bl	80039a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d001      	beq.n	80034f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e03b      	b.n	8003570 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0201 	orr.w	r2, r2, #1
 800350e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a19      	ldr	r2, [pc, #100]	; (800357c <HAL_TIM_Base_Start_IT+0x9c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d009      	beq.n	800352e <HAL_TIM_Base_Start_IT+0x4e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003522:	d004      	beq.n	800352e <HAL_TIM_Base_Start_IT+0x4e>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a15      	ldr	r2, [pc, #84]	; (8003580 <HAL_TIM_Base_Start_IT+0xa0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d115      	bne.n	800355a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	4b13      	ldr	r3, [pc, #76]	; (8003584 <HAL_TIM_Base_Start_IT+0xa4>)
 8003536:	4013      	ands	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b06      	cmp	r3, #6
 800353e:	d015      	beq.n	800356c <HAL_TIM_Base_Start_IT+0x8c>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003546:	d011      	beq.n	800356c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003558:	e008      	b.n	800356c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 0201 	orr.w	r2, r2, #1
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e000      	b.n	800356e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	40012c00 	.word	0x40012c00
 8003580:	40014000 	.word	0x40014000
 8003584:	00010007 	.word	0x00010007

08003588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b02      	cmp	r3, #2
 800359c:	d122      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d11b      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0202 	mvn.w	r2, #2
 80035b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f9ce 	bl	800396c <HAL_TIM_IC_CaptureCallback>
 80035d0:	e005      	b.n	80035de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f9c0 	bl	8003958 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f9d1 	bl	8003980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d122      	bne.n	8003638 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d11b      	bne.n	8003638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0204 	mvn.w	r2, #4
 8003608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2202      	movs	r2, #2
 800360e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f9a4 	bl	800396c <HAL_TIM_IC_CaptureCallback>
 8003624:	e005      	b.n	8003632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f996 	bl	8003958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f9a7 	bl	8003980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b08      	cmp	r3, #8
 8003644:	d122      	bne.n	800368c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b08      	cmp	r3, #8
 8003652:	d11b      	bne.n	800368c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0208 	mvn.w	r2, #8
 800365c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2204      	movs	r2, #4
 8003662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f97a 	bl	800396c <HAL_TIM_IC_CaptureCallback>
 8003678:	e005      	b.n	8003686 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f96c 	bl	8003958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f97d 	bl	8003980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f003 0310 	and.w	r3, r3, #16
 8003696:	2b10      	cmp	r3, #16
 8003698:	d122      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0310 	and.w	r3, r3, #16
 80036a4:	2b10      	cmp	r3, #16
 80036a6:	d11b      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0210 	mvn.w	r2, #16
 80036b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2208      	movs	r2, #8
 80036b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f950 	bl	800396c <HAL_TIM_IC_CaptureCallback>
 80036cc:	e005      	b.n	80036da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f942 	bl	8003958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f953 	bl	8003980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d10e      	bne.n	800370c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d107      	bne.n	800370c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0201 	mvn.w	r2, #1
 8003704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fc fdca 	bl	80002a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003716:	2b80      	cmp	r3, #128	; 0x80
 8003718:	d10e      	bne.n	8003738 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003724:	2b80      	cmp	r3, #128	; 0x80
 8003726:	d107      	bne.n	8003738 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fab0 	bl	8003c98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003746:	d10e      	bne.n	8003766 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003752:	2b80      	cmp	r3, #128	; 0x80
 8003754:	d107      	bne.n	8003766 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800375e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 faa3 	bl	8003cac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003770:	2b40      	cmp	r3, #64	; 0x40
 8003772:	d10e      	bne.n	8003792 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	d107      	bne.n	8003792 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800378a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f901 	bl	8003994 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b20      	cmp	r3, #32
 800379e:	d10e      	bne.n	80037be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d107      	bne.n	80037be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f06f 0220 	mvn.w	r2, #32
 80037b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fa63 	bl	8003c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b084      	sub	sp, #16
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_TIM_ConfigClockSource+0x1c>
 80037de:	2302      	movs	r3, #2
 80037e0:	e0b6      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x18a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2202      	movs	r2, #2
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003800:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003804:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800380c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381e:	d03e      	beq.n	800389e <HAL_TIM_ConfigClockSource+0xd8>
 8003820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003824:	f200 8087 	bhi.w	8003936 <HAL_TIM_ConfigClockSource+0x170>
 8003828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382c:	f000 8086 	beq.w	800393c <HAL_TIM_ConfigClockSource+0x176>
 8003830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003834:	d87f      	bhi.n	8003936 <HAL_TIM_ConfigClockSource+0x170>
 8003836:	2b70      	cmp	r3, #112	; 0x70
 8003838:	d01a      	beq.n	8003870 <HAL_TIM_ConfigClockSource+0xaa>
 800383a:	2b70      	cmp	r3, #112	; 0x70
 800383c:	d87b      	bhi.n	8003936 <HAL_TIM_ConfigClockSource+0x170>
 800383e:	2b60      	cmp	r3, #96	; 0x60
 8003840:	d050      	beq.n	80038e4 <HAL_TIM_ConfigClockSource+0x11e>
 8003842:	2b60      	cmp	r3, #96	; 0x60
 8003844:	d877      	bhi.n	8003936 <HAL_TIM_ConfigClockSource+0x170>
 8003846:	2b50      	cmp	r3, #80	; 0x50
 8003848:	d03c      	beq.n	80038c4 <HAL_TIM_ConfigClockSource+0xfe>
 800384a:	2b50      	cmp	r3, #80	; 0x50
 800384c:	d873      	bhi.n	8003936 <HAL_TIM_ConfigClockSource+0x170>
 800384e:	2b40      	cmp	r3, #64	; 0x40
 8003850:	d058      	beq.n	8003904 <HAL_TIM_ConfigClockSource+0x13e>
 8003852:	2b40      	cmp	r3, #64	; 0x40
 8003854:	d86f      	bhi.n	8003936 <HAL_TIM_ConfigClockSource+0x170>
 8003856:	2b30      	cmp	r3, #48	; 0x30
 8003858:	d064      	beq.n	8003924 <HAL_TIM_ConfigClockSource+0x15e>
 800385a:	2b30      	cmp	r3, #48	; 0x30
 800385c:	d86b      	bhi.n	8003936 <HAL_TIM_ConfigClockSource+0x170>
 800385e:	2b20      	cmp	r3, #32
 8003860:	d060      	beq.n	8003924 <HAL_TIM_ConfigClockSource+0x15e>
 8003862:	2b20      	cmp	r3, #32
 8003864:	d867      	bhi.n	8003936 <HAL_TIM_ConfigClockSource+0x170>
 8003866:	2b00      	cmp	r3, #0
 8003868:	d05c      	beq.n	8003924 <HAL_TIM_ConfigClockSource+0x15e>
 800386a:	2b10      	cmp	r3, #16
 800386c:	d05a      	beq.n	8003924 <HAL_TIM_ConfigClockSource+0x15e>
 800386e:	e062      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	6899      	ldr	r1, [r3, #8]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f000 f97a 	bl	8003b78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003892:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	609a      	str	r2, [r3, #8]
      break;
 800389c:	e04f      	b.n	800393e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6899      	ldr	r1, [r3, #8]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f000 f963 	bl	8003b78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038c0:	609a      	str	r2, [r3, #8]
      break;
 80038c2:	e03c      	b.n	800393e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6818      	ldr	r0, [r3, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	6859      	ldr	r1, [r3, #4]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	461a      	mov	r2, r3
 80038d2:	f000 f8d7 	bl	8003a84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2150      	movs	r1, #80	; 0x50
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 f930 	bl	8003b42 <TIM_ITRx_SetConfig>
      break;
 80038e2:	e02c      	b.n	800393e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	6859      	ldr	r1, [r3, #4]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	461a      	mov	r2, r3
 80038f2:	f000 f8f6 	bl	8003ae2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2160      	movs	r1, #96	; 0x60
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 f920 	bl	8003b42 <TIM_ITRx_SetConfig>
      break;
 8003902:	e01c      	b.n	800393e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	6859      	ldr	r1, [r3, #4]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	461a      	mov	r2, r3
 8003912:	f000 f8b7 	bl	8003a84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2140      	movs	r1, #64	; 0x40
 800391c:	4618      	mov	r0, r3
 800391e:	f000 f910 	bl	8003b42 <TIM_ITRx_SetConfig>
      break;
 8003922:	e00c      	b.n	800393e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4619      	mov	r1, r3
 800392e:	4610      	mov	r0, r2
 8003930:	f000 f907 	bl	8003b42 <TIM_ITRx_SetConfig>
      break;
 8003934:	e003      	b.n	800393e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	73fb      	strb	r3, [r7, #15]
      break;
 800393a:	e000      	b.n	800393e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800393c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800394e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a2e      	ldr	r2, [pc, #184]	; (8003a74 <TIM_Base_SetConfig+0xcc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d003      	beq.n	80039c8 <TIM_Base_SetConfig+0x20>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c6:	d108      	bne.n	80039da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a25      	ldr	r2, [pc, #148]	; (8003a74 <TIM_Base_SetConfig+0xcc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d00f      	beq.n	8003a02 <TIM_Base_SetConfig+0x5a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e8:	d00b      	beq.n	8003a02 <TIM_Base_SetConfig+0x5a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a22      	ldr	r2, [pc, #136]	; (8003a78 <TIM_Base_SetConfig+0xd0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d007      	beq.n	8003a02 <TIM_Base_SetConfig+0x5a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a21      	ldr	r2, [pc, #132]	; (8003a7c <TIM_Base_SetConfig+0xd4>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d003      	beq.n	8003a02 <TIM_Base_SetConfig+0x5a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a20      	ldr	r2, [pc, #128]	; (8003a80 <TIM_Base_SetConfig+0xd8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d108      	bne.n	8003a14 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a0e      	ldr	r2, [pc, #56]	; (8003a74 <TIM_Base_SetConfig+0xcc>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00b      	beq.n	8003a58 <TIM_Base_SetConfig+0xb0>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a0d      	ldr	r2, [pc, #52]	; (8003a78 <TIM_Base_SetConfig+0xd0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d007      	beq.n	8003a58 <TIM_Base_SetConfig+0xb0>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a0c      	ldr	r2, [pc, #48]	; (8003a7c <TIM_Base_SetConfig+0xd4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <TIM_Base_SetConfig+0xb0>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a0b      	ldr	r2, [pc, #44]	; (8003a80 <TIM_Base_SetConfig+0xd8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d103      	bne.n	8003a60 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	615a      	str	r2, [r3, #20]
}
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40012c00 	.word	0x40012c00
 8003a78:	40014000 	.word	0x40014000
 8003a7c:	40014400 	.word	0x40014400
 8003a80:	40014800 	.word	0x40014800

08003a84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	f023 0201 	bic.w	r2, r3, #1
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f023 030a 	bic.w	r3, r3, #10
 8003ac0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	621a      	str	r2, [r3, #32]
}
 8003ad6:	bf00      	nop
 8003ad8:	371c      	adds	r7, #28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b087      	sub	sp, #28
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	f023 0210 	bic.w	r2, r3, #16
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	031b      	lsls	r3, r3, #12
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	621a      	str	r2, [r3, #32]
}
 8003b36:	bf00      	nop
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b085      	sub	sp, #20
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f043 0307 	orr.w	r3, r3, #7
 8003b64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	609a      	str	r2, [r3, #8]
}
 8003b6c:	bf00      	nop
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	021a      	lsls	r2, r3, #8
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	609a      	str	r2, [r3, #8]
}
 8003bac:	bf00      	nop
 8003bae:	371c      	adds	r7, #28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e04f      	b.n	8003c70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a21      	ldr	r2, [pc, #132]	; (8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d108      	bne.n	8003c0c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a14      	ldr	r2, [pc, #80]	; (8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d009      	beq.n	8003c44 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c38:	d004      	beq.n	8003c44 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a10      	ldr	r2, [pc, #64]	; (8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d10c      	bne.n	8003c5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	40012c00 	.word	0x40012c00
 8003c80:	40014000 	.word	0x40014000

08003c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e040      	b.n	8003d54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d106      	bne.n	8003ce8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7fc fe00 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2224      	movs	r2, #36	; 0x24
 8003cec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fb8e 	bl	8004420 <UART_SetConfig>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e022      	b.n	8003d54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fcb8 	bl	800468c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fd3f 	bl	80047d0 <UART_CheckIdleState>
 8003d52:	4603      	mov	r3, r0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b08b      	sub	sp, #44	; 0x2c
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	4613      	mov	r3, r2
 8003d68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	d147      	bne.n	8003e02 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <HAL_UART_Transmit_IT+0x22>
 8003d78:	88fb      	ldrh	r3, [r7, #6]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e040      	b.n	8003e04 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	88fa      	ldrh	r2, [r7, #6]
 8003d8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	88fa      	ldrh	r2, [r7, #6]
 8003d94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2221      	movs	r2, #33	; 0x21
 8003daa:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db4:	d107      	bne.n	8003dc6 <HAL_UART_Transmit_IT+0x6a>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d103      	bne.n	8003dc6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4a13      	ldr	r2, [pc, #76]	; (8003e10 <HAL_UART_Transmit_IT+0xb4>)
 8003dc2:	66da      	str	r2, [r3, #108]	; 0x6c
 8003dc4:	e002      	b.n	8003dcc <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4a12      	ldr	r2, [pc, #72]	; (8003e14 <HAL_UART_Transmit_IT+0xb8>)
 8003dca:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	e853 3f00 	ldrex	r3, [r3]
 8003dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	623b      	str	r3, [r7, #32]
 8003dec:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dee:	69f9      	ldr	r1, [r7, #28]
 8003df0:	6a3a      	ldr	r2, [r7, #32]
 8003df2:	e841 2300 	strex	r3, r2, [r1]
 8003df6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1e6      	bne.n	8003dcc <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	e000      	b.n	8003e04 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003e02:	2302      	movs	r3, #2
  }
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	372c      	adds	r7, #44	; 0x2c
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	08004f0b 	.word	0x08004f0b
 8003e14:	08004e53 	.word	0x08004e53

08003e18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b0ba      	sub	sp, #232	; 0xe8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003e42:	f640 030f 	movw	r3, #2063	; 0x80f
 8003e46:	4013      	ands	r3, r2
 8003e48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003e4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d115      	bne.n	8003e80 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e58:	f003 0320 	and.w	r3, r3, #32
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00f      	beq.n	8003e80 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e64:	f003 0320 	and.w	r3, r3, #32
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d009      	beq.n	8003e80 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 82ab 	beq.w	80043cc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	4798      	blx	r3
      }
      return;
 8003e7e:	e2a5      	b.n	80043cc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003e80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 8117 	beq.w	80040b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003e96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003e9a:	4b85      	ldr	r3, [pc, #532]	; (80040b0 <HAL_UART_IRQHandler+0x298>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 810a 	beq.w	80040b8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d011      	beq.n	8003ed4 <HAL_UART_IRQHandler+0xbc>
 8003eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eca:	f043 0201 	orr.w	r2, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d011      	beq.n	8003f04 <HAL_UART_IRQHandler+0xec>
 8003ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00b      	beq.n	8003f04 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003efa:	f043 0204 	orr.w	r2, r3, #4
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d011      	beq.n	8003f34 <HAL_UART_IRQHandler+0x11c>
 8003f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00b      	beq.n	8003f34 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2204      	movs	r2, #4
 8003f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f2a:	f043 0202 	orr.w	r2, r3, #2
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d017      	beq.n	8003f70 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d105      	bne.n	8003f58 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f50:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00b      	beq.n	8003f70 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2208      	movs	r2, #8
 8003f5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f66:	f043 0208 	orr.w	r2, r3, #8
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d012      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x18a>
 8003f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00c      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f98:	f043 0220 	orr.w	r2, r3, #32
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 8211 	beq.w	80043d0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00d      	beq.n	8003fd6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d007      	beq.n	8003fd6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fea:	2b40      	cmp	r3, #64	; 0x40
 8003fec:	d005      	beq.n	8003ffa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003fee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ff2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d04f      	beq.n	800409a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fdbe 	bl	8004b7c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400a:	2b40      	cmp	r3, #64	; 0x40
 800400c:	d141      	bne.n	8004092 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3308      	adds	r3, #8
 8004014:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004024:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800402c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3308      	adds	r3, #8
 8004036:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800403a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800403e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004046:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004052:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1d9      	bne.n	800400e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800405e:	2b00      	cmp	r3, #0
 8004060:	d013      	beq.n	800408a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004066:	4a13      	ldr	r2, [pc, #76]	; (80040b4 <HAL_UART_IRQHandler+0x29c>)
 8004068:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800406e:	4618      	mov	r0, r3
 8004070:	f7fd fb1e 	bl	80016b0 <HAL_DMA_Abort_IT>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d017      	beq.n	80040aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800407e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004084:	4610      	mov	r0, r2
 8004086:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004088:	e00f      	b.n	80040aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f9be 	bl	800440c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004090:	e00b      	b.n	80040aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f9ba 	bl	800440c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004098:	e007      	b.n	80040aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f9b6 	bl	800440c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80040a8:	e192      	b.n	80043d0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040aa:	bf00      	nop
    return;
 80040ac:	e190      	b.n	80043d0 <HAL_UART_IRQHandler+0x5b8>
 80040ae:	bf00      	nop
 80040b0:	04000120 	.word	0x04000120
 80040b4:	08004e27 	.word	0x08004e27

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040bc:	2b01      	cmp	r3, #1
 80040be:	f040 814b 	bne.w	8004358 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80040c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c6:	f003 0310 	and.w	r3, r3, #16
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8144 	beq.w	8004358 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80040d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 813d 	beq.w	8004358 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2210      	movs	r2, #16
 80040e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f0:	2b40      	cmp	r3, #64	; 0x40
 80040f2:	f040 80b5 	bne.w	8004260 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004102:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 8164 	beq.w	80043d4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004112:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004116:	429a      	cmp	r2, r3
 8004118:	f080 815c 	bcs.w	80043d4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004122:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	2b20      	cmp	r3, #32
 800412e:	f000 8086 	beq.w	800423e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800413e:	e853 3f00 	ldrex	r3, [r3]
 8004142:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004146:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800414a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800414e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800415c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004160:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004164:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004168:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800416c:	e841 2300 	strex	r3, r2, [r1]
 8004170:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004174:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1da      	bne.n	8004132 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3308      	adds	r3, #8
 8004182:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004186:	e853 3f00 	ldrex	r3, [r3]
 800418a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800418c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800418e:	f023 0301 	bic.w	r3, r3, #1
 8004192:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3308      	adds	r3, #8
 800419c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041a0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041a4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041ac:	e841 2300 	strex	r3, r2, [r1]
 80041b0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80041b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1e1      	bne.n	800417c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3308      	adds	r3, #8
 80041be:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041c2:	e853 3f00 	ldrex	r3, [r3]
 80041c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3308      	adds	r3, #8
 80041d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041dc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041e4:	e841 2300 	strex	r3, r2, [r1]
 80041e8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1e3      	bne.n	80041b8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800420c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800420e:	f023 0310 	bic.w	r3, r3, #16
 8004212:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004220:	65bb      	str	r3, [r7, #88]	; 0x58
 8004222:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004226:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800422e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e4      	bne.n	80041fe <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004238:	4618      	mov	r0, r3
 800423a:	f7fd fa00 	bl	800163e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2202      	movs	r2, #2
 8004242:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004250:	b29b      	uxth	r3, r3
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	b29b      	uxth	r3, r3
 8004256:	4619      	mov	r1, r3
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7fc fd45 	bl	8000ce8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800425e:	e0b9      	b.n	80043d4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800426c:	b29b      	uxth	r3, r3
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800427a:	b29b      	uxth	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 80ab 	beq.w	80043d8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004282:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 80a6 	beq.w	80043d8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800429a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800429c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042ae:	647b      	str	r3, [r7, #68]	; 0x44
 80042b0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e4      	bne.n	800428c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3308      	adds	r3, #8
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	623b      	str	r3, [r7, #32]
   return(result);
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	f023 0301 	bic.w	r3, r3, #1
 80042d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3308      	adds	r3, #8
 80042e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042e6:	633a      	str	r2, [r7, #48]	; 0x30
 80042e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e3      	bne.n	80042c2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	e853 3f00 	ldrex	r3, [r3]
 800431a:	60fb      	str	r3, [r7, #12]
   return(result);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0310 	bic.w	r3, r3, #16
 8004322:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	69b9      	ldr	r1, [r7, #24]
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	617b      	str	r3, [r7, #20]
   return(result);
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e4      	bne.n	800430e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800434a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800434e:	4619      	mov	r1, r3
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7fc fcc9 	bl	8000ce8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004356:	e03f      	b.n	80043d8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800435c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00e      	beq.n	8004382 <HAL_UART_IRQHandler+0x56a>
 8004364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004378:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fe4f 	bl	800501e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004380:	e02d      	b.n	80043de <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00e      	beq.n	80043ac <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800438e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004396:	2b00      	cmp	r3, #0
 8004398:	d008      	beq.n	80043ac <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d01c      	beq.n	80043dc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	4798      	blx	r3
    }
    return;
 80043aa:	e017      	b.n	80043dc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d012      	beq.n	80043de <HAL_UART_IRQHandler+0x5c6>
 80043b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00c      	beq.n	80043de <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fe00 	bl	8004fca <UART_EndTransmit_IT>
    return;
 80043ca:	e008      	b.n	80043de <HAL_UART_IRQHandler+0x5c6>
      return;
 80043cc:	bf00      	nop
 80043ce:	e006      	b.n	80043de <HAL_UART_IRQHandler+0x5c6>
    return;
 80043d0:	bf00      	nop
 80043d2:	e004      	b.n	80043de <HAL_UART_IRQHandler+0x5c6>
      return;
 80043d4:	bf00      	nop
 80043d6:	e002      	b.n	80043de <HAL_UART_IRQHandler+0x5c6>
      return;
 80043d8:	bf00      	nop
 80043da:	e000      	b.n	80043de <HAL_UART_IRQHandler+0x5c6>
    return;
 80043dc:	bf00      	nop
  }

}
 80043de:	37e8      	adds	r7, #232	; 0xe8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	4313      	orrs	r3, r2
 8004442:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4b8a      	ldr	r3, [pc, #552]	; (8004674 <UART_SetConfig+0x254>)
 800444c:	4013      	ands	r3, r2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6812      	ldr	r2, [r2, #0]
 8004452:	6979      	ldr	r1, [r7, #20]
 8004454:	430b      	orrs	r3, r1
 8004456:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	430a      	orrs	r2, r1
 8004490:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a78      	ldr	r2, [pc, #480]	; (8004678 <UART_SetConfig+0x258>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d120      	bne.n	80044de <UART_SetConfig+0xbe>
 800449c:	4b77      	ldr	r3, [pc, #476]	; (800467c <UART_SetConfig+0x25c>)
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	f003 0303 	and.w	r3, r3, #3
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d817      	bhi.n	80044d8 <UART_SetConfig+0xb8>
 80044a8:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <UART_SetConfig+0x90>)
 80044aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ae:	bf00      	nop
 80044b0:	080044c1 	.word	0x080044c1
 80044b4:	080044cd 	.word	0x080044cd
 80044b8:	080044d3 	.word	0x080044d3
 80044bc:	080044c7 	.word	0x080044c7
 80044c0:	2300      	movs	r3, #0
 80044c2:	77fb      	strb	r3, [r7, #31]
 80044c4:	e01d      	b.n	8004502 <UART_SetConfig+0xe2>
 80044c6:	2302      	movs	r3, #2
 80044c8:	77fb      	strb	r3, [r7, #31]
 80044ca:	e01a      	b.n	8004502 <UART_SetConfig+0xe2>
 80044cc:	2304      	movs	r3, #4
 80044ce:	77fb      	strb	r3, [r7, #31]
 80044d0:	e017      	b.n	8004502 <UART_SetConfig+0xe2>
 80044d2:	2308      	movs	r3, #8
 80044d4:	77fb      	strb	r3, [r7, #31]
 80044d6:	e014      	b.n	8004502 <UART_SetConfig+0xe2>
 80044d8:	2310      	movs	r3, #16
 80044da:	77fb      	strb	r3, [r7, #31]
 80044dc:	e011      	b.n	8004502 <UART_SetConfig+0xe2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a67      	ldr	r2, [pc, #412]	; (8004680 <UART_SetConfig+0x260>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d102      	bne.n	80044ee <UART_SetConfig+0xce>
 80044e8:	2300      	movs	r3, #0
 80044ea:	77fb      	strb	r3, [r7, #31]
 80044ec:	e009      	b.n	8004502 <UART_SetConfig+0xe2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a64      	ldr	r2, [pc, #400]	; (8004684 <UART_SetConfig+0x264>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d102      	bne.n	80044fe <UART_SetConfig+0xde>
 80044f8:	2300      	movs	r3, #0
 80044fa:	77fb      	strb	r3, [r7, #31]
 80044fc:	e001      	b.n	8004502 <UART_SetConfig+0xe2>
 80044fe:	2310      	movs	r3, #16
 8004500:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800450a:	d15a      	bne.n	80045c2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800450c:	7ffb      	ldrb	r3, [r7, #31]
 800450e:	2b08      	cmp	r3, #8
 8004510:	d827      	bhi.n	8004562 <UART_SetConfig+0x142>
 8004512:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <UART_SetConfig+0xf8>)
 8004514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004518:	0800453d 	.word	0x0800453d
 800451c:	08004545 	.word	0x08004545
 8004520:	0800454d 	.word	0x0800454d
 8004524:	08004563 	.word	0x08004563
 8004528:	08004553 	.word	0x08004553
 800452c:	08004563 	.word	0x08004563
 8004530:	08004563 	.word	0x08004563
 8004534:	08004563 	.word	0x08004563
 8004538:	0800455b 	.word	0x0800455b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800453c:	f7fe fda2 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
 8004540:	61b8      	str	r0, [r7, #24]
        break;
 8004542:	e013      	b.n	800456c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004544:	f7fe fdc0 	bl	80030c8 <HAL_RCC_GetPCLK2Freq>
 8004548:	61b8      	str	r0, [r7, #24]
        break;
 800454a:	e00f      	b.n	800456c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800454c:	4b4e      	ldr	r3, [pc, #312]	; (8004688 <UART_SetConfig+0x268>)
 800454e:	61bb      	str	r3, [r7, #24]
        break;
 8004550:	e00c      	b.n	800456c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004552:	f7fe fd21 	bl	8002f98 <HAL_RCC_GetSysClockFreq>
 8004556:	61b8      	str	r0, [r7, #24]
        break;
 8004558:	e008      	b.n	800456c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800455a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800455e:	61bb      	str	r3, [r7, #24]
        break;
 8004560:	e004      	b.n	800456c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	77bb      	strb	r3, [r7, #30]
        break;
 800456a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d074      	beq.n	800465c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	005a      	lsls	r2, r3, #1
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	085b      	lsrs	r3, r3, #1
 800457c:	441a      	add	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	fbb2 f3f3 	udiv	r3, r2, r3
 8004586:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	2b0f      	cmp	r3, #15
 800458c:	d916      	bls.n	80045bc <UART_SetConfig+0x19c>
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004594:	d212      	bcs.n	80045bc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	b29b      	uxth	r3, r3
 800459a:	f023 030f 	bic.w	r3, r3, #15
 800459e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	085b      	lsrs	r3, r3, #1
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	89fb      	ldrh	r3, [r7, #14]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	89fa      	ldrh	r2, [r7, #14]
 80045b8:	60da      	str	r2, [r3, #12]
 80045ba:	e04f      	b.n	800465c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	77bb      	strb	r3, [r7, #30]
 80045c0:	e04c      	b.n	800465c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045c2:	7ffb      	ldrb	r3, [r7, #31]
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d828      	bhi.n	800461a <UART_SetConfig+0x1fa>
 80045c8:	a201      	add	r2, pc, #4	; (adr r2, 80045d0 <UART_SetConfig+0x1b0>)
 80045ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ce:	bf00      	nop
 80045d0:	080045f5 	.word	0x080045f5
 80045d4:	080045fd 	.word	0x080045fd
 80045d8:	08004605 	.word	0x08004605
 80045dc:	0800461b 	.word	0x0800461b
 80045e0:	0800460b 	.word	0x0800460b
 80045e4:	0800461b 	.word	0x0800461b
 80045e8:	0800461b 	.word	0x0800461b
 80045ec:	0800461b 	.word	0x0800461b
 80045f0:	08004613 	.word	0x08004613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045f4:	f7fe fd46 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
 80045f8:	61b8      	str	r0, [r7, #24]
        break;
 80045fa:	e013      	b.n	8004624 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045fc:	f7fe fd64 	bl	80030c8 <HAL_RCC_GetPCLK2Freq>
 8004600:	61b8      	str	r0, [r7, #24]
        break;
 8004602:	e00f      	b.n	8004624 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004604:	4b20      	ldr	r3, [pc, #128]	; (8004688 <UART_SetConfig+0x268>)
 8004606:	61bb      	str	r3, [r7, #24]
        break;
 8004608:	e00c      	b.n	8004624 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800460a:	f7fe fcc5 	bl	8002f98 <HAL_RCC_GetSysClockFreq>
 800460e:	61b8      	str	r0, [r7, #24]
        break;
 8004610:	e008      	b.n	8004624 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004616:	61bb      	str	r3, [r7, #24]
        break;
 8004618:	e004      	b.n	8004624 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	77bb      	strb	r3, [r7, #30]
        break;
 8004622:	bf00      	nop
    }

    if (pclk != 0U)
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d018      	beq.n	800465c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	085a      	lsrs	r2, r3, #1
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	441a      	add	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	fbb2 f3f3 	udiv	r3, r2, r3
 800463c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b0f      	cmp	r3, #15
 8004642:	d909      	bls.n	8004658 <UART_SetConfig+0x238>
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464a:	d205      	bcs.n	8004658 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	b29a      	uxth	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	60da      	str	r2, [r3, #12]
 8004656:	e001      	b.n	800465c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004668:	7fbb      	ldrb	r3, [r7, #30]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3720      	adds	r7, #32
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	efff69f3 	.word	0xefff69f3
 8004678:	40013800 	.word	0x40013800
 800467c:	40021000 	.word	0x40021000
 8004680:	40004400 	.word	0x40004400
 8004684:	40004800 	.word	0x40004800
 8004688:	007a1200 	.word	0x007a1200

0800468c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	f003 0310 	and.w	r3, r3, #16
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004768:	2b00      	cmp	r3, #0
 800476a:	d01a      	beq.n	80047a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800478a:	d10a      	bne.n	80047a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	605a      	str	r2, [r3, #4]
  }
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b098      	sub	sp, #96	; 0x60
 80047d4:	af02      	add	r7, sp, #8
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047e0:	f7fc fd6a 	bl	80012b8 <HAL_GetTick>
 80047e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d12e      	bne.n	8004852 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047fc:	2200      	movs	r2, #0
 80047fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f88c 	bl	8004920 <UART_WaitOnFlagUntilTimeout>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d021      	beq.n	8004852 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800481c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004822:	653b      	str	r3, [r7, #80]	; 0x50
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	461a      	mov	r2, r3
 800482a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800482c:	647b      	str	r3, [r7, #68]	; 0x44
 800482e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004832:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800483a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e6      	bne.n	800480e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2220      	movs	r2, #32
 8004844:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e062      	b.n	8004918 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b04      	cmp	r3, #4
 800485e:	d149      	bne.n	80048f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004860:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004868:	2200      	movs	r2, #0
 800486a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f856 	bl	8004920 <UART_WaitOnFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d03c      	beq.n	80048f4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	e853 3f00 	ldrex	r3, [r3]
 8004886:	623b      	str	r3, [r7, #32]
   return(result);
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800488e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004898:	633b      	str	r3, [r7, #48]	; 0x30
 800489a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800489e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e6      	bne.n	800487a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3308      	adds	r3, #8
 80048b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	e853 3f00 	ldrex	r3, [r3]
 80048ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0301 	bic.w	r3, r3, #1
 80048c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3308      	adds	r3, #8
 80048ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048cc:	61fa      	str	r2, [r7, #28]
 80048ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d0:	69b9      	ldr	r1, [r7, #24]
 80048d2:	69fa      	ldr	r2, [r7, #28]
 80048d4:	e841 2300 	strex	r3, r2, [r1]
 80048d8:	617b      	str	r3, [r7, #20]
   return(result);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e5      	bne.n	80048ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e011      	b.n	8004918 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2220      	movs	r2, #32
 80048f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3758      	adds	r7, #88	; 0x58
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	4613      	mov	r3, r2
 800492e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004930:	e049      	b.n	80049c6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004938:	d045      	beq.n	80049c6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493a:	f7fc fcbd 	bl	80012b8 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	429a      	cmp	r2, r3
 8004948:	d302      	bcc.n	8004950 <UART_WaitOnFlagUntilTimeout+0x30>
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e048      	b.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	2b00      	cmp	r3, #0
 8004960:	d031      	beq.n	80049c6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b08      	cmp	r3, #8
 800496e:	d110      	bne.n	8004992 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2208      	movs	r2, #8
 8004976:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f8ff 	bl	8004b7c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2208      	movs	r2, #8
 8004982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e029      	b.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800499c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049a0:	d111      	bne.n	80049c6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 f8e5 	bl	8004b7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e00f      	b.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69da      	ldr	r2, [r3, #28]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4013      	ands	r3, r2
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	bf0c      	ite	eq
 80049d6:	2301      	moveq	r3, #1
 80049d8:	2300      	movne	r3, #0
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	461a      	mov	r2, r3
 80049de:	79fb      	ldrb	r3, [r7, #7]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d0a6      	beq.n	8004932 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b096      	sub	sp, #88	; 0x58
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	4613      	mov	r3, r2
 80049fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	88fa      	ldrh	r2, [r7, #6]
 8004a08:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2222      	movs	r2, #34	; 0x22
 8004a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d028      	beq.n	8004a76 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a28:	4a3e      	ldr	r2, [pc, #248]	; (8004b24 <UART_Start_Receive_DMA+0x134>)
 8004a2a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a30:	4a3d      	ldr	r2, [pc, #244]	; (8004b28 <UART_Start_Receive_DMA+0x138>)
 8004a32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a38:	4a3c      	ldr	r2, [pc, #240]	; (8004b2c <UART_Start_Receive_DMA+0x13c>)
 8004a3a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a40:	2200      	movs	r2, #0
 8004a42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3324      	adds	r3, #36	; 0x24
 8004a4e:	4619      	mov	r1, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a54:	461a      	mov	r2, r3
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	f7fc fd92 	bl	8001580 <HAL_DMA_Start_IT>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d009      	beq.n	8004a76 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2210      	movs	r2, #16
 8004a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e051      	b.n	8004b1a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d018      	beq.n	8004ab0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a86:	e853 3f00 	ldrex	r3, [r3]
 8004a8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a92:	657b      	str	r3, [r7, #84]	; 0x54
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a9e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004aa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aa4:	e841 2300 	strex	r3, r2, [r1]
 8004aa8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1e6      	bne.n	8004a7e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3308      	adds	r3, #8
 8004ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	e853 3f00 	ldrex	r3, [r3]
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	f043 0301 	orr.w	r3, r3, #1
 8004ac6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3308      	adds	r3, #8
 8004ace:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ad0:	637a      	str	r2, [r7, #52]	; 0x34
 8004ad2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ad8:	e841 2300 	strex	r3, r2, [r1]
 8004adc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1e5      	bne.n	8004ab0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3308      	adds	r3, #8
 8004aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	613b      	str	r3, [r7, #16]
   return(result);
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3308      	adds	r3, #8
 8004b02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b04:	623a      	str	r2, [r7, #32]
 8004b06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	69f9      	ldr	r1, [r7, #28]
 8004b0a:	6a3a      	ldr	r2, [r7, #32]
 8004b0c:	e841 2300 	strex	r3, r2, [r1]
 8004b10:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e5      	bne.n	8004ae4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3758      	adds	r7, #88	; 0x58
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	08004c45 	.word	0x08004c45
 8004b28:	08004d6b 	.word	0x08004d6b
 8004b2c:	08004da9 	.word	0x08004da9

08004b30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b089      	sub	sp, #36	; 0x24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	e853 3f00 	ldrex	r3, [r3]
 8004b44:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004b4c:	61fb      	str	r3, [r7, #28]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	61bb      	str	r3, [r7, #24]
 8004b58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5a:	6979      	ldr	r1, [r7, #20]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	e841 2300 	strex	r3, r2, [r1]
 8004b62:	613b      	str	r3, [r7, #16]
   return(result);
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1e6      	bne.n	8004b38 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8004b70:	bf00      	nop
 8004b72:	3724      	adds	r7, #36	; 0x24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b095      	sub	sp, #84	; 0x54
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8c:	e853 3f00 	ldrex	r3, [r3]
 8004b90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba2:	643b      	str	r3, [r7, #64]	; 0x40
 8004ba4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ba8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004baa:	e841 2300 	strex	r3, r2, [r1]
 8004bae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e6      	bne.n	8004b84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3308      	adds	r3, #8
 8004bbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	e853 3f00 	ldrex	r3, [r3]
 8004bc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	f023 0301 	bic.w	r3, r3, #1
 8004bcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3308      	adds	r3, #8
 8004bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bde:	e841 2300 	strex	r3, r2, [r1]
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1e5      	bne.n	8004bb6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d118      	bne.n	8004c24 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f023 0310 	bic.w	r3, r3, #16
 8004c06:	647b      	str	r3, [r7, #68]	; 0x44
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c10:	61bb      	str	r3, [r7, #24]
 8004c12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6979      	ldr	r1, [r7, #20]
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e6      	bne.n	8004bf2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c38:	bf00      	nop
 8004c3a:	3754      	adds	r7, #84	; 0x54
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b09c      	sub	sp, #112	; 0x70
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	2b20      	cmp	r3, #32
 8004c58:	d071      	beq.n	8004d3e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c6a:	e853 3f00 	ldrex	r3, [r3]
 8004c6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c76:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c80:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c82:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c88:	e841 2300 	strex	r3, r2, [r1]
 8004c8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e6      	bne.n	8004c62 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3308      	adds	r3, #8
 8004c9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9e:	e853 3f00 	ldrex	r3, [r3]
 8004ca2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca6:	f023 0301 	bic.w	r3, r3, #1
 8004caa:	667b      	str	r3, [r7, #100]	; 0x64
 8004cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3308      	adds	r3, #8
 8004cb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004cb4:	647a      	str	r2, [r7, #68]	; 0x44
 8004cb6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cbc:	e841 2300 	strex	r3, r2, [r1]
 8004cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1e5      	bne.n	8004c94 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3308      	adds	r3, #8
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	e853 3f00 	ldrex	r3, [r3]
 8004cd6:	623b      	str	r3, [r7, #32]
   return(result);
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cde:	663b      	str	r3, [r7, #96]	; 0x60
 8004ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ce8:	633a      	str	r2, [r7, #48]	; 0x30
 8004cea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cf0:	e841 2300 	strex	r3, r2, [r1]
 8004cf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e5      	bne.n	8004cc8 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d118      	bne.n	8004d3e <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f023 0310 	bic.w	r3, r3, #16
 8004d20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	69b9      	ldr	r1, [r7, #24]
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	617b      	str	r3, [r7, #20]
   return(result);
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1e6      	bne.n	8004d0c <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d40:	2200      	movs	r2, #0
 8004d42:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d107      	bne.n	8004d5c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d52:	4619      	mov	r1, r3
 8004d54:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004d56:	f7fb ffc7 	bl	8000ce8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d5a:	e002      	b.n	8004d62 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004d5c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004d5e:	f7ff fb41 	bl	80043e4 <HAL_UART_RxCpltCallback>
}
 8004d62:	bf00      	nop
 8004d64:	3770      	adds	r7, #112	; 0x70
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d109      	bne.n	8004d9a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d8c:	085b      	lsrs	r3, r3, #1
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	4619      	mov	r1, r3
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f7fb ffa8 	bl	8000ce8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d98:	e002      	b.n	8004da0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f7ff fb2c 	bl	80043f8 <HAL_UART_RxHalfCpltCallback>
}
 8004da0:	bf00      	nop
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dba:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dce:	2b80      	cmp	r3, #128	; 0x80
 8004dd0:	d109      	bne.n	8004de6 <UART_DMAError+0x3e>
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2b21      	cmp	r3, #33	; 0x21
 8004dd6:	d106      	bne.n	8004de6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004de0:	6978      	ldr	r0, [r7, #20]
 8004de2:	f7ff fea5 	bl	8004b30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df0:	2b40      	cmp	r3, #64	; 0x40
 8004df2:	d109      	bne.n	8004e08 <UART_DMAError+0x60>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b22      	cmp	r3, #34	; 0x22
 8004df8:	d106      	bne.n	8004e08 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004e02:	6978      	ldr	r0, [r7, #20]
 8004e04:	f7ff feba 	bl	8004b7c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e0e:	f043 0210 	orr.w	r2, r3, #16
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e18:	6978      	ldr	r0, [r7, #20]
 8004e1a:	f7ff faf7 	bl	800440c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e1e:	bf00      	nop
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f7ff fae1 	bl	800440c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e4a:	bf00      	nop
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b08f      	sub	sp, #60	; 0x3c
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e5e:	2b21      	cmp	r3, #33	; 0x21
 8004e60:	d14d      	bne.n	8004efe <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d132      	bne.n	8004ed4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	e853 3f00 	ldrex	r3, [r3]
 8004e7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e82:	637b      	str	r3, [r7, #52]	; 0x34
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e8e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e94:	e841 2300 	strex	r3, r2, [r1]
 8004e98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1e6      	bne.n	8004e6e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	60bb      	str	r3, [r7, #8]
   return(result);
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eb4:	633b      	str	r3, [r7, #48]	; 0x30
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebe:	61bb      	str	r3, [r7, #24]
 8004ec0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	6979      	ldr	r1, [r7, #20]
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	613b      	str	r3, [r7, #16]
   return(result);
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e6      	bne.n	8004ea0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004ed2:	e014      	b.n	8004efe <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed8:	781a      	ldrb	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	b292      	uxth	r2, r2
 8004ee0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004efe:	bf00      	nop
 8004f00:	373c      	adds	r7, #60	; 0x3c
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b091      	sub	sp, #68	; 0x44
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f16:	2b21      	cmp	r3, #33	; 0x21
 8004f18:	d151      	bne.n	8004fbe <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d132      	bne.n	8004f8c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	e853 3f00 	ldrex	r3, [r3]
 8004f32:	623b      	str	r3, [r7, #32]
   return(result);
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	461a      	mov	r2, r3
 8004f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f44:	633b      	str	r3, [r7, #48]	; 0x30
 8004f46:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f4c:	e841 2300 	strex	r3, r2, [r1]
 8004f50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e6      	bne.n	8004f26 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	e853 3f00 	ldrex	r3, [r3]
 8004f64:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f76:	61fb      	str	r3, [r7, #28]
 8004f78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	69b9      	ldr	r1, [r7, #24]
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	617b      	str	r3, [r7, #20]
   return(result);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e6      	bne.n	8004f58 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004f8a:	e018      	b.n	8004fbe <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f90:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f94:	881a      	ldrh	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f9e:	b292      	uxth	r2, r2
 8004fa0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa6:	1c9a      	adds	r2, r3, #2
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004fbe:	bf00      	nop
 8004fc0:	3744      	adds	r7, #68	; 0x44
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b088      	sub	sp, #32
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe6:	61fb      	str	r3, [r7, #28]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	461a      	mov	r2, r3
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	61bb      	str	r3, [r7, #24]
 8004ff2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	6979      	ldr	r1, [r7, #20]
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	e841 2300 	strex	r3, r2, [r1]
 8004ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1e6      	bne.n	8004fd2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7fb ff91 	bl	8000f38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005016:	bf00      	nop
 8005018:	3720      	adds	r7, #32
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b08c      	sub	sp, #48	; 0x30
 8005036:	af00      	add	r7, sp, #0
 8005038:	60f8      	str	r0, [r7, #12]
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	4613      	mov	r3, r2
 800503e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005046:	2b20      	cmp	r3, #32
 8005048:	d142      	bne.n	80050d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8005050:	88fb      	ldrh	r3, [r7, #6]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e03b      	b.n	80050d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005066:	88fb      	ldrh	r3, [r7, #6]
 8005068:	461a      	mov	r2, r3
 800506a:	68b9      	ldr	r1, [r7, #8]
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f7ff fcbf 	bl	80049f0 <UART_Start_Receive_DMA>
 8005072:	4603      	mov	r3, r0
 8005074:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005078:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800507c:	2b00      	cmp	r3, #0
 800507e:	d124      	bne.n	80050ca <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005084:	2b01      	cmp	r3, #1
 8005086:	d11d      	bne.n	80050c4 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2210      	movs	r2, #16
 800508e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	e853 3f00 	ldrex	r3, [r3]
 800509c:	617b      	str	r3, [r7, #20]
   return(result);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f043 0310 	orr.w	r3, r3, #16
 80050a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
 80050b0:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b2:	6a39      	ldr	r1, [r7, #32]
 80050b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b6:	e841 2300 	strex	r3, r2, [r1]
 80050ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1e6      	bne.n	8005090 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80050c2:	e002      	b.n	80050ca <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80050ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80050ce:	e000      	b.n	80050d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80050d0:	2302      	movs	r3, #2
  }
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3730      	adds	r7, #48	; 0x30
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <atoi>:
 80050da:	220a      	movs	r2, #10
 80050dc:	2100      	movs	r1, #0
 80050de:	f000 b90b 	b.w	80052f8 <strtol>
	...

080050e4 <__errno>:
 80050e4:	4b01      	ldr	r3, [pc, #4]	; (80050ec <__errno+0x8>)
 80050e6:	6818      	ldr	r0, [r3, #0]
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	20000010 	.word	0x20000010

080050f0 <__libc_init_array>:
 80050f0:	b570      	push	{r4, r5, r6, lr}
 80050f2:	4d0d      	ldr	r5, [pc, #52]	; (8005128 <__libc_init_array+0x38>)
 80050f4:	4c0d      	ldr	r4, [pc, #52]	; (800512c <__libc_init_array+0x3c>)
 80050f6:	1b64      	subs	r4, r4, r5
 80050f8:	10a4      	asrs	r4, r4, #2
 80050fa:	2600      	movs	r6, #0
 80050fc:	42a6      	cmp	r6, r4
 80050fe:	d109      	bne.n	8005114 <__libc_init_array+0x24>
 8005100:	4d0b      	ldr	r5, [pc, #44]	; (8005130 <__libc_init_array+0x40>)
 8005102:	4c0c      	ldr	r4, [pc, #48]	; (8005134 <__libc_init_array+0x44>)
 8005104:	f000 fd42 	bl	8005b8c <_init>
 8005108:	1b64      	subs	r4, r4, r5
 800510a:	10a4      	asrs	r4, r4, #2
 800510c:	2600      	movs	r6, #0
 800510e:	42a6      	cmp	r6, r4
 8005110:	d105      	bne.n	800511e <__libc_init_array+0x2e>
 8005112:	bd70      	pop	{r4, r5, r6, pc}
 8005114:	f855 3b04 	ldr.w	r3, [r5], #4
 8005118:	4798      	blx	r3
 800511a:	3601      	adds	r6, #1
 800511c:	e7ee      	b.n	80050fc <__libc_init_array+0xc>
 800511e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005122:	4798      	blx	r3
 8005124:	3601      	adds	r6, #1
 8005126:	e7f2      	b.n	800510e <__libc_init_array+0x1e>
 8005128:	08005d80 	.word	0x08005d80
 800512c:	08005d80 	.word	0x08005d80
 8005130:	08005d80 	.word	0x08005d80
 8005134:	08005d84 	.word	0x08005d84

08005138 <memcpy>:
 8005138:	440a      	add	r2, r1
 800513a:	4291      	cmp	r1, r2
 800513c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005140:	d100      	bne.n	8005144 <memcpy+0xc>
 8005142:	4770      	bx	lr
 8005144:	b510      	push	{r4, lr}
 8005146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800514a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800514e:	4291      	cmp	r1, r2
 8005150:	d1f9      	bne.n	8005146 <memcpy+0xe>
 8005152:	bd10      	pop	{r4, pc}

08005154 <memset>:
 8005154:	4402      	add	r2, r0
 8005156:	4603      	mov	r3, r0
 8005158:	4293      	cmp	r3, r2
 800515a:	d100      	bne.n	800515e <memset+0xa>
 800515c:	4770      	bx	lr
 800515e:	f803 1b01 	strb.w	r1, [r3], #1
 8005162:	e7f9      	b.n	8005158 <memset+0x4>

08005164 <siprintf>:
 8005164:	b40e      	push	{r1, r2, r3}
 8005166:	b500      	push	{lr}
 8005168:	b09c      	sub	sp, #112	; 0x70
 800516a:	ab1d      	add	r3, sp, #116	; 0x74
 800516c:	9002      	str	r0, [sp, #8]
 800516e:	9006      	str	r0, [sp, #24]
 8005170:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005174:	4809      	ldr	r0, [pc, #36]	; (800519c <siprintf+0x38>)
 8005176:	9107      	str	r1, [sp, #28]
 8005178:	9104      	str	r1, [sp, #16]
 800517a:	4909      	ldr	r1, [pc, #36]	; (80051a0 <siprintf+0x3c>)
 800517c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005180:	9105      	str	r1, [sp, #20]
 8005182:	6800      	ldr	r0, [r0, #0]
 8005184:	9301      	str	r3, [sp, #4]
 8005186:	a902      	add	r1, sp, #8
 8005188:	f000 f91c 	bl	80053c4 <_svfiprintf_r>
 800518c:	9b02      	ldr	r3, [sp, #8]
 800518e:	2200      	movs	r2, #0
 8005190:	701a      	strb	r2, [r3, #0]
 8005192:	b01c      	add	sp, #112	; 0x70
 8005194:	f85d eb04 	ldr.w	lr, [sp], #4
 8005198:	b003      	add	sp, #12
 800519a:	4770      	bx	lr
 800519c:	20000010 	.word	0x20000010
 80051a0:	ffff0208 	.word	0xffff0208

080051a4 <strncmp>:
 80051a4:	b510      	push	{r4, lr}
 80051a6:	b17a      	cbz	r2, 80051c8 <strncmp+0x24>
 80051a8:	4603      	mov	r3, r0
 80051aa:	3901      	subs	r1, #1
 80051ac:	1884      	adds	r4, r0, r2
 80051ae:	f813 0b01 	ldrb.w	r0, [r3], #1
 80051b2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80051b6:	4290      	cmp	r0, r2
 80051b8:	d101      	bne.n	80051be <strncmp+0x1a>
 80051ba:	42a3      	cmp	r3, r4
 80051bc:	d101      	bne.n	80051c2 <strncmp+0x1e>
 80051be:	1a80      	subs	r0, r0, r2
 80051c0:	bd10      	pop	{r4, pc}
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d1f3      	bne.n	80051ae <strncmp+0xa>
 80051c6:	e7fa      	b.n	80051be <strncmp+0x1a>
 80051c8:	4610      	mov	r0, r2
 80051ca:	e7f9      	b.n	80051c0 <strncmp+0x1c>

080051cc <strncpy>:
 80051cc:	b510      	push	{r4, lr}
 80051ce:	3901      	subs	r1, #1
 80051d0:	4603      	mov	r3, r0
 80051d2:	b132      	cbz	r2, 80051e2 <strncpy+0x16>
 80051d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80051d8:	f803 4b01 	strb.w	r4, [r3], #1
 80051dc:	3a01      	subs	r2, #1
 80051de:	2c00      	cmp	r4, #0
 80051e0:	d1f7      	bne.n	80051d2 <strncpy+0x6>
 80051e2:	441a      	add	r2, r3
 80051e4:	2100      	movs	r1, #0
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d100      	bne.n	80051ec <strncpy+0x20>
 80051ea:	bd10      	pop	{r4, pc}
 80051ec:	f803 1b01 	strb.w	r1, [r3], #1
 80051f0:	e7f9      	b.n	80051e6 <strncpy+0x1a>
	...

080051f4 <_strtol_l.constprop.0>:
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051fa:	d001      	beq.n	8005200 <_strtol_l.constprop.0+0xc>
 80051fc:	2b24      	cmp	r3, #36	; 0x24
 80051fe:	d906      	bls.n	800520e <_strtol_l.constprop.0+0x1a>
 8005200:	f7ff ff70 	bl	80050e4 <__errno>
 8005204:	2316      	movs	r3, #22
 8005206:	6003      	str	r3, [r0, #0]
 8005208:	2000      	movs	r0, #0
 800520a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80052f4 <_strtol_l.constprop.0+0x100>
 8005212:	460d      	mov	r5, r1
 8005214:	462e      	mov	r6, r5
 8005216:	f815 4b01 	ldrb.w	r4, [r5], #1
 800521a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800521e:	f017 0708 	ands.w	r7, r7, #8
 8005222:	d1f7      	bne.n	8005214 <_strtol_l.constprop.0+0x20>
 8005224:	2c2d      	cmp	r4, #45	; 0x2d
 8005226:	d132      	bne.n	800528e <_strtol_l.constprop.0+0x9a>
 8005228:	782c      	ldrb	r4, [r5, #0]
 800522a:	2701      	movs	r7, #1
 800522c:	1cb5      	adds	r5, r6, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d05b      	beq.n	80052ea <_strtol_l.constprop.0+0xf6>
 8005232:	2b10      	cmp	r3, #16
 8005234:	d109      	bne.n	800524a <_strtol_l.constprop.0+0x56>
 8005236:	2c30      	cmp	r4, #48	; 0x30
 8005238:	d107      	bne.n	800524a <_strtol_l.constprop.0+0x56>
 800523a:	782c      	ldrb	r4, [r5, #0]
 800523c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005240:	2c58      	cmp	r4, #88	; 0x58
 8005242:	d14d      	bne.n	80052e0 <_strtol_l.constprop.0+0xec>
 8005244:	786c      	ldrb	r4, [r5, #1]
 8005246:	2310      	movs	r3, #16
 8005248:	3502      	adds	r5, #2
 800524a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800524e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005252:	f04f 0c00 	mov.w	ip, #0
 8005256:	fbb8 f9f3 	udiv	r9, r8, r3
 800525a:	4666      	mov	r6, ip
 800525c:	fb03 8a19 	mls	sl, r3, r9, r8
 8005260:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005264:	f1be 0f09 	cmp.w	lr, #9
 8005268:	d816      	bhi.n	8005298 <_strtol_l.constprop.0+0xa4>
 800526a:	4674      	mov	r4, lr
 800526c:	42a3      	cmp	r3, r4
 800526e:	dd24      	ble.n	80052ba <_strtol_l.constprop.0+0xc6>
 8005270:	f1bc 0f00 	cmp.w	ip, #0
 8005274:	db1e      	blt.n	80052b4 <_strtol_l.constprop.0+0xc0>
 8005276:	45b1      	cmp	r9, r6
 8005278:	d31c      	bcc.n	80052b4 <_strtol_l.constprop.0+0xc0>
 800527a:	d101      	bne.n	8005280 <_strtol_l.constprop.0+0x8c>
 800527c:	45a2      	cmp	sl, r4
 800527e:	db19      	blt.n	80052b4 <_strtol_l.constprop.0+0xc0>
 8005280:	fb06 4603 	mla	r6, r6, r3, r4
 8005284:	f04f 0c01 	mov.w	ip, #1
 8005288:	f815 4b01 	ldrb.w	r4, [r5], #1
 800528c:	e7e8      	b.n	8005260 <_strtol_l.constprop.0+0x6c>
 800528e:	2c2b      	cmp	r4, #43	; 0x2b
 8005290:	bf04      	itt	eq
 8005292:	782c      	ldrbeq	r4, [r5, #0]
 8005294:	1cb5      	addeq	r5, r6, #2
 8005296:	e7ca      	b.n	800522e <_strtol_l.constprop.0+0x3a>
 8005298:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800529c:	f1be 0f19 	cmp.w	lr, #25
 80052a0:	d801      	bhi.n	80052a6 <_strtol_l.constprop.0+0xb2>
 80052a2:	3c37      	subs	r4, #55	; 0x37
 80052a4:	e7e2      	b.n	800526c <_strtol_l.constprop.0+0x78>
 80052a6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80052aa:	f1be 0f19 	cmp.w	lr, #25
 80052ae:	d804      	bhi.n	80052ba <_strtol_l.constprop.0+0xc6>
 80052b0:	3c57      	subs	r4, #87	; 0x57
 80052b2:	e7db      	b.n	800526c <_strtol_l.constprop.0+0x78>
 80052b4:	f04f 3cff 	mov.w	ip, #4294967295
 80052b8:	e7e6      	b.n	8005288 <_strtol_l.constprop.0+0x94>
 80052ba:	f1bc 0f00 	cmp.w	ip, #0
 80052be:	da05      	bge.n	80052cc <_strtol_l.constprop.0+0xd8>
 80052c0:	2322      	movs	r3, #34	; 0x22
 80052c2:	6003      	str	r3, [r0, #0]
 80052c4:	4646      	mov	r6, r8
 80052c6:	b942      	cbnz	r2, 80052da <_strtol_l.constprop.0+0xe6>
 80052c8:	4630      	mov	r0, r6
 80052ca:	e79e      	b.n	800520a <_strtol_l.constprop.0+0x16>
 80052cc:	b107      	cbz	r7, 80052d0 <_strtol_l.constprop.0+0xdc>
 80052ce:	4276      	negs	r6, r6
 80052d0:	2a00      	cmp	r2, #0
 80052d2:	d0f9      	beq.n	80052c8 <_strtol_l.constprop.0+0xd4>
 80052d4:	f1bc 0f00 	cmp.w	ip, #0
 80052d8:	d000      	beq.n	80052dc <_strtol_l.constprop.0+0xe8>
 80052da:	1e69      	subs	r1, r5, #1
 80052dc:	6011      	str	r1, [r2, #0]
 80052de:	e7f3      	b.n	80052c8 <_strtol_l.constprop.0+0xd4>
 80052e0:	2430      	movs	r4, #48	; 0x30
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1b1      	bne.n	800524a <_strtol_l.constprop.0+0x56>
 80052e6:	2308      	movs	r3, #8
 80052e8:	e7af      	b.n	800524a <_strtol_l.constprop.0+0x56>
 80052ea:	2c30      	cmp	r4, #48	; 0x30
 80052ec:	d0a5      	beq.n	800523a <_strtol_l.constprop.0+0x46>
 80052ee:	230a      	movs	r3, #10
 80052f0:	e7ab      	b.n	800524a <_strtol_l.constprop.0+0x56>
 80052f2:	bf00      	nop
 80052f4:	08005c4d 	.word	0x08005c4d

080052f8 <strtol>:
 80052f8:	4613      	mov	r3, r2
 80052fa:	460a      	mov	r2, r1
 80052fc:	4601      	mov	r1, r0
 80052fe:	4802      	ldr	r0, [pc, #8]	; (8005308 <strtol+0x10>)
 8005300:	6800      	ldr	r0, [r0, #0]
 8005302:	f7ff bf77 	b.w	80051f4 <_strtol_l.constprop.0>
 8005306:	bf00      	nop
 8005308:	20000010 	.word	0x20000010

0800530c <__ssputs_r>:
 800530c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005310:	688e      	ldr	r6, [r1, #8]
 8005312:	429e      	cmp	r6, r3
 8005314:	4682      	mov	sl, r0
 8005316:	460c      	mov	r4, r1
 8005318:	4690      	mov	r8, r2
 800531a:	461f      	mov	r7, r3
 800531c:	d838      	bhi.n	8005390 <__ssputs_r+0x84>
 800531e:	898a      	ldrh	r2, [r1, #12]
 8005320:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005324:	d032      	beq.n	800538c <__ssputs_r+0x80>
 8005326:	6825      	ldr	r5, [r4, #0]
 8005328:	6909      	ldr	r1, [r1, #16]
 800532a:	eba5 0901 	sub.w	r9, r5, r1
 800532e:	6965      	ldr	r5, [r4, #20]
 8005330:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005334:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005338:	3301      	adds	r3, #1
 800533a:	444b      	add	r3, r9
 800533c:	106d      	asrs	r5, r5, #1
 800533e:	429d      	cmp	r5, r3
 8005340:	bf38      	it	cc
 8005342:	461d      	movcc	r5, r3
 8005344:	0553      	lsls	r3, r2, #21
 8005346:	d531      	bpl.n	80053ac <__ssputs_r+0xa0>
 8005348:	4629      	mov	r1, r5
 800534a:	f000 fb55 	bl	80059f8 <_malloc_r>
 800534e:	4606      	mov	r6, r0
 8005350:	b950      	cbnz	r0, 8005368 <__ssputs_r+0x5c>
 8005352:	230c      	movs	r3, #12
 8005354:	f8ca 3000 	str.w	r3, [sl]
 8005358:	89a3      	ldrh	r3, [r4, #12]
 800535a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800535e:	81a3      	strh	r3, [r4, #12]
 8005360:	f04f 30ff 	mov.w	r0, #4294967295
 8005364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005368:	6921      	ldr	r1, [r4, #16]
 800536a:	464a      	mov	r2, r9
 800536c:	f7ff fee4 	bl	8005138 <memcpy>
 8005370:	89a3      	ldrh	r3, [r4, #12]
 8005372:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800537a:	81a3      	strh	r3, [r4, #12]
 800537c:	6126      	str	r6, [r4, #16]
 800537e:	6165      	str	r5, [r4, #20]
 8005380:	444e      	add	r6, r9
 8005382:	eba5 0509 	sub.w	r5, r5, r9
 8005386:	6026      	str	r6, [r4, #0]
 8005388:	60a5      	str	r5, [r4, #8]
 800538a:	463e      	mov	r6, r7
 800538c:	42be      	cmp	r6, r7
 800538e:	d900      	bls.n	8005392 <__ssputs_r+0x86>
 8005390:	463e      	mov	r6, r7
 8005392:	6820      	ldr	r0, [r4, #0]
 8005394:	4632      	mov	r2, r6
 8005396:	4641      	mov	r1, r8
 8005398:	f000 faa8 	bl	80058ec <memmove>
 800539c:	68a3      	ldr	r3, [r4, #8]
 800539e:	1b9b      	subs	r3, r3, r6
 80053a0:	60a3      	str	r3, [r4, #8]
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	4433      	add	r3, r6
 80053a6:	6023      	str	r3, [r4, #0]
 80053a8:	2000      	movs	r0, #0
 80053aa:	e7db      	b.n	8005364 <__ssputs_r+0x58>
 80053ac:	462a      	mov	r2, r5
 80053ae:	f000 fb97 	bl	8005ae0 <_realloc_r>
 80053b2:	4606      	mov	r6, r0
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d1e1      	bne.n	800537c <__ssputs_r+0x70>
 80053b8:	6921      	ldr	r1, [r4, #16]
 80053ba:	4650      	mov	r0, sl
 80053bc:	f000 fab0 	bl	8005920 <_free_r>
 80053c0:	e7c7      	b.n	8005352 <__ssputs_r+0x46>
	...

080053c4 <_svfiprintf_r>:
 80053c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c8:	4698      	mov	r8, r3
 80053ca:	898b      	ldrh	r3, [r1, #12]
 80053cc:	061b      	lsls	r3, r3, #24
 80053ce:	b09d      	sub	sp, #116	; 0x74
 80053d0:	4607      	mov	r7, r0
 80053d2:	460d      	mov	r5, r1
 80053d4:	4614      	mov	r4, r2
 80053d6:	d50e      	bpl.n	80053f6 <_svfiprintf_r+0x32>
 80053d8:	690b      	ldr	r3, [r1, #16]
 80053da:	b963      	cbnz	r3, 80053f6 <_svfiprintf_r+0x32>
 80053dc:	2140      	movs	r1, #64	; 0x40
 80053de:	f000 fb0b 	bl	80059f8 <_malloc_r>
 80053e2:	6028      	str	r0, [r5, #0]
 80053e4:	6128      	str	r0, [r5, #16]
 80053e6:	b920      	cbnz	r0, 80053f2 <_svfiprintf_r+0x2e>
 80053e8:	230c      	movs	r3, #12
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	f04f 30ff 	mov.w	r0, #4294967295
 80053f0:	e0d1      	b.n	8005596 <_svfiprintf_r+0x1d2>
 80053f2:	2340      	movs	r3, #64	; 0x40
 80053f4:	616b      	str	r3, [r5, #20]
 80053f6:	2300      	movs	r3, #0
 80053f8:	9309      	str	r3, [sp, #36]	; 0x24
 80053fa:	2320      	movs	r3, #32
 80053fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005400:	f8cd 800c 	str.w	r8, [sp, #12]
 8005404:	2330      	movs	r3, #48	; 0x30
 8005406:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80055b0 <_svfiprintf_r+0x1ec>
 800540a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800540e:	f04f 0901 	mov.w	r9, #1
 8005412:	4623      	mov	r3, r4
 8005414:	469a      	mov	sl, r3
 8005416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800541a:	b10a      	cbz	r2, 8005420 <_svfiprintf_r+0x5c>
 800541c:	2a25      	cmp	r2, #37	; 0x25
 800541e:	d1f9      	bne.n	8005414 <_svfiprintf_r+0x50>
 8005420:	ebba 0b04 	subs.w	fp, sl, r4
 8005424:	d00b      	beq.n	800543e <_svfiprintf_r+0x7a>
 8005426:	465b      	mov	r3, fp
 8005428:	4622      	mov	r2, r4
 800542a:	4629      	mov	r1, r5
 800542c:	4638      	mov	r0, r7
 800542e:	f7ff ff6d 	bl	800530c <__ssputs_r>
 8005432:	3001      	adds	r0, #1
 8005434:	f000 80aa 	beq.w	800558c <_svfiprintf_r+0x1c8>
 8005438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800543a:	445a      	add	r2, fp
 800543c:	9209      	str	r2, [sp, #36]	; 0x24
 800543e:	f89a 3000 	ldrb.w	r3, [sl]
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 80a2 	beq.w	800558c <_svfiprintf_r+0x1c8>
 8005448:	2300      	movs	r3, #0
 800544a:	f04f 32ff 	mov.w	r2, #4294967295
 800544e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005452:	f10a 0a01 	add.w	sl, sl, #1
 8005456:	9304      	str	r3, [sp, #16]
 8005458:	9307      	str	r3, [sp, #28]
 800545a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800545e:	931a      	str	r3, [sp, #104]	; 0x68
 8005460:	4654      	mov	r4, sl
 8005462:	2205      	movs	r2, #5
 8005464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005468:	4851      	ldr	r0, [pc, #324]	; (80055b0 <_svfiprintf_r+0x1ec>)
 800546a:	f7fa fec9 	bl	8000200 <memchr>
 800546e:	9a04      	ldr	r2, [sp, #16]
 8005470:	b9d8      	cbnz	r0, 80054aa <_svfiprintf_r+0xe6>
 8005472:	06d0      	lsls	r0, r2, #27
 8005474:	bf44      	itt	mi
 8005476:	2320      	movmi	r3, #32
 8005478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800547c:	0711      	lsls	r1, r2, #28
 800547e:	bf44      	itt	mi
 8005480:	232b      	movmi	r3, #43	; 0x2b
 8005482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005486:	f89a 3000 	ldrb.w	r3, [sl]
 800548a:	2b2a      	cmp	r3, #42	; 0x2a
 800548c:	d015      	beq.n	80054ba <_svfiprintf_r+0xf6>
 800548e:	9a07      	ldr	r2, [sp, #28]
 8005490:	4654      	mov	r4, sl
 8005492:	2000      	movs	r0, #0
 8005494:	f04f 0c0a 	mov.w	ip, #10
 8005498:	4621      	mov	r1, r4
 800549a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800549e:	3b30      	subs	r3, #48	; 0x30
 80054a0:	2b09      	cmp	r3, #9
 80054a2:	d94e      	bls.n	8005542 <_svfiprintf_r+0x17e>
 80054a4:	b1b0      	cbz	r0, 80054d4 <_svfiprintf_r+0x110>
 80054a6:	9207      	str	r2, [sp, #28]
 80054a8:	e014      	b.n	80054d4 <_svfiprintf_r+0x110>
 80054aa:	eba0 0308 	sub.w	r3, r0, r8
 80054ae:	fa09 f303 	lsl.w	r3, r9, r3
 80054b2:	4313      	orrs	r3, r2
 80054b4:	9304      	str	r3, [sp, #16]
 80054b6:	46a2      	mov	sl, r4
 80054b8:	e7d2      	b.n	8005460 <_svfiprintf_r+0x9c>
 80054ba:	9b03      	ldr	r3, [sp, #12]
 80054bc:	1d19      	adds	r1, r3, #4
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	9103      	str	r1, [sp, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	bfbb      	ittet	lt
 80054c6:	425b      	neglt	r3, r3
 80054c8:	f042 0202 	orrlt.w	r2, r2, #2
 80054cc:	9307      	strge	r3, [sp, #28]
 80054ce:	9307      	strlt	r3, [sp, #28]
 80054d0:	bfb8      	it	lt
 80054d2:	9204      	strlt	r2, [sp, #16]
 80054d4:	7823      	ldrb	r3, [r4, #0]
 80054d6:	2b2e      	cmp	r3, #46	; 0x2e
 80054d8:	d10c      	bne.n	80054f4 <_svfiprintf_r+0x130>
 80054da:	7863      	ldrb	r3, [r4, #1]
 80054dc:	2b2a      	cmp	r3, #42	; 0x2a
 80054de:	d135      	bne.n	800554c <_svfiprintf_r+0x188>
 80054e0:	9b03      	ldr	r3, [sp, #12]
 80054e2:	1d1a      	adds	r2, r3, #4
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	9203      	str	r2, [sp, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	bfb8      	it	lt
 80054ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80054f0:	3402      	adds	r4, #2
 80054f2:	9305      	str	r3, [sp, #20]
 80054f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80055c0 <_svfiprintf_r+0x1fc>
 80054f8:	7821      	ldrb	r1, [r4, #0]
 80054fa:	2203      	movs	r2, #3
 80054fc:	4650      	mov	r0, sl
 80054fe:	f7fa fe7f 	bl	8000200 <memchr>
 8005502:	b140      	cbz	r0, 8005516 <_svfiprintf_r+0x152>
 8005504:	2340      	movs	r3, #64	; 0x40
 8005506:	eba0 000a 	sub.w	r0, r0, sl
 800550a:	fa03 f000 	lsl.w	r0, r3, r0
 800550e:	9b04      	ldr	r3, [sp, #16]
 8005510:	4303      	orrs	r3, r0
 8005512:	3401      	adds	r4, #1
 8005514:	9304      	str	r3, [sp, #16]
 8005516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800551a:	4826      	ldr	r0, [pc, #152]	; (80055b4 <_svfiprintf_r+0x1f0>)
 800551c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005520:	2206      	movs	r2, #6
 8005522:	f7fa fe6d 	bl	8000200 <memchr>
 8005526:	2800      	cmp	r0, #0
 8005528:	d038      	beq.n	800559c <_svfiprintf_r+0x1d8>
 800552a:	4b23      	ldr	r3, [pc, #140]	; (80055b8 <_svfiprintf_r+0x1f4>)
 800552c:	bb1b      	cbnz	r3, 8005576 <_svfiprintf_r+0x1b2>
 800552e:	9b03      	ldr	r3, [sp, #12]
 8005530:	3307      	adds	r3, #7
 8005532:	f023 0307 	bic.w	r3, r3, #7
 8005536:	3308      	adds	r3, #8
 8005538:	9303      	str	r3, [sp, #12]
 800553a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800553c:	4433      	add	r3, r6
 800553e:	9309      	str	r3, [sp, #36]	; 0x24
 8005540:	e767      	b.n	8005412 <_svfiprintf_r+0x4e>
 8005542:	fb0c 3202 	mla	r2, ip, r2, r3
 8005546:	460c      	mov	r4, r1
 8005548:	2001      	movs	r0, #1
 800554a:	e7a5      	b.n	8005498 <_svfiprintf_r+0xd4>
 800554c:	2300      	movs	r3, #0
 800554e:	3401      	adds	r4, #1
 8005550:	9305      	str	r3, [sp, #20]
 8005552:	4619      	mov	r1, r3
 8005554:	f04f 0c0a 	mov.w	ip, #10
 8005558:	4620      	mov	r0, r4
 800555a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800555e:	3a30      	subs	r2, #48	; 0x30
 8005560:	2a09      	cmp	r2, #9
 8005562:	d903      	bls.n	800556c <_svfiprintf_r+0x1a8>
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0c5      	beq.n	80054f4 <_svfiprintf_r+0x130>
 8005568:	9105      	str	r1, [sp, #20]
 800556a:	e7c3      	b.n	80054f4 <_svfiprintf_r+0x130>
 800556c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005570:	4604      	mov	r4, r0
 8005572:	2301      	movs	r3, #1
 8005574:	e7f0      	b.n	8005558 <_svfiprintf_r+0x194>
 8005576:	ab03      	add	r3, sp, #12
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	462a      	mov	r2, r5
 800557c:	4b0f      	ldr	r3, [pc, #60]	; (80055bc <_svfiprintf_r+0x1f8>)
 800557e:	a904      	add	r1, sp, #16
 8005580:	4638      	mov	r0, r7
 8005582:	f3af 8000 	nop.w
 8005586:	1c42      	adds	r2, r0, #1
 8005588:	4606      	mov	r6, r0
 800558a:	d1d6      	bne.n	800553a <_svfiprintf_r+0x176>
 800558c:	89ab      	ldrh	r3, [r5, #12]
 800558e:	065b      	lsls	r3, r3, #25
 8005590:	f53f af2c 	bmi.w	80053ec <_svfiprintf_r+0x28>
 8005594:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005596:	b01d      	add	sp, #116	; 0x74
 8005598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800559c:	ab03      	add	r3, sp, #12
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	462a      	mov	r2, r5
 80055a2:	4b06      	ldr	r3, [pc, #24]	; (80055bc <_svfiprintf_r+0x1f8>)
 80055a4:	a904      	add	r1, sp, #16
 80055a6:	4638      	mov	r0, r7
 80055a8:	f000 f87a 	bl	80056a0 <_printf_i>
 80055ac:	e7eb      	b.n	8005586 <_svfiprintf_r+0x1c2>
 80055ae:	bf00      	nop
 80055b0:	08005d4d 	.word	0x08005d4d
 80055b4:	08005d57 	.word	0x08005d57
 80055b8:	00000000 	.word	0x00000000
 80055bc:	0800530d 	.word	0x0800530d
 80055c0:	08005d53 	.word	0x08005d53

080055c4 <_printf_common>:
 80055c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c8:	4616      	mov	r6, r2
 80055ca:	4699      	mov	r9, r3
 80055cc:	688a      	ldr	r2, [r1, #8]
 80055ce:	690b      	ldr	r3, [r1, #16]
 80055d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055d4:	4293      	cmp	r3, r2
 80055d6:	bfb8      	it	lt
 80055d8:	4613      	movlt	r3, r2
 80055da:	6033      	str	r3, [r6, #0]
 80055dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055e0:	4607      	mov	r7, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	b10a      	cbz	r2, 80055ea <_printf_common+0x26>
 80055e6:	3301      	adds	r3, #1
 80055e8:	6033      	str	r3, [r6, #0]
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	0699      	lsls	r1, r3, #26
 80055ee:	bf42      	ittt	mi
 80055f0:	6833      	ldrmi	r3, [r6, #0]
 80055f2:	3302      	addmi	r3, #2
 80055f4:	6033      	strmi	r3, [r6, #0]
 80055f6:	6825      	ldr	r5, [r4, #0]
 80055f8:	f015 0506 	ands.w	r5, r5, #6
 80055fc:	d106      	bne.n	800560c <_printf_common+0x48>
 80055fe:	f104 0a19 	add.w	sl, r4, #25
 8005602:	68e3      	ldr	r3, [r4, #12]
 8005604:	6832      	ldr	r2, [r6, #0]
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	42ab      	cmp	r3, r5
 800560a:	dc26      	bgt.n	800565a <_printf_common+0x96>
 800560c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005610:	1e13      	subs	r3, r2, #0
 8005612:	6822      	ldr	r2, [r4, #0]
 8005614:	bf18      	it	ne
 8005616:	2301      	movne	r3, #1
 8005618:	0692      	lsls	r2, r2, #26
 800561a:	d42b      	bmi.n	8005674 <_printf_common+0xb0>
 800561c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005620:	4649      	mov	r1, r9
 8005622:	4638      	mov	r0, r7
 8005624:	47c0      	blx	r8
 8005626:	3001      	adds	r0, #1
 8005628:	d01e      	beq.n	8005668 <_printf_common+0xa4>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	68e5      	ldr	r5, [r4, #12]
 800562e:	6832      	ldr	r2, [r6, #0]
 8005630:	f003 0306 	and.w	r3, r3, #6
 8005634:	2b04      	cmp	r3, #4
 8005636:	bf08      	it	eq
 8005638:	1aad      	subeq	r5, r5, r2
 800563a:	68a3      	ldr	r3, [r4, #8]
 800563c:	6922      	ldr	r2, [r4, #16]
 800563e:	bf0c      	ite	eq
 8005640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005644:	2500      	movne	r5, #0
 8005646:	4293      	cmp	r3, r2
 8005648:	bfc4      	itt	gt
 800564a:	1a9b      	subgt	r3, r3, r2
 800564c:	18ed      	addgt	r5, r5, r3
 800564e:	2600      	movs	r6, #0
 8005650:	341a      	adds	r4, #26
 8005652:	42b5      	cmp	r5, r6
 8005654:	d11a      	bne.n	800568c <_printf_common+0xc8>
 8005656:	2000      	movs	r0, #0
 8005658:	e008      	b.n	800566c <_printf_common+0xa8>
 800565a:	2301      	movs	r3, #1
 800565c:	4652      	mov	r2, sl
 800565e:	4649      	mov	r1, r9
 8005660:	4638      	mov	r0, r7
 8005662:	47c0      	blx	r8
 8005664:	3001      	adds	r0, #1
 8005666:	d103      	bne.n	8005670 <_printf_common+0xac>
 8005668:	f04f 30ff 	mov.w	r0, #4294967295
 800566c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005670:	3501      	adds	r5, #1
 8005672:	e7c6      	b.n	8005602 <_printf_common+0x3e>
 8005674:	18e1      	adds	r1, r4, r3
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	2030      	movs	r0, #48	; 0x30
 800567a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800567e:	4422      	add	r2, r4
 8005680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005688:	3302      	adds	r3, #2
 800568a:	e7c7      	b.n	800561c <_printf_common+0x58>
 800568c:	2301      	movs	r3, #1
 800568e:	4622      	mov	r2, r4
 8005690:	4649      	mov	r1, r9
 8005692:	4638      	mov	r0, r7
 8005694:	47c0      	blx	r8
 8005696:	3001      	adds	r0, #1
 8005698:	d0e6      	beq.n	8005668 <_printf_common+0xa4>
 800569a:	3601      	adds	r6, #1
 800569c:	e7d9      	b.n	8005652 <_printf_common+0x8e>
	...

080056a0 <_printf_i>:
 80056a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056a4:	7e0f      	ldrb	r7, [r1, #24]
 80056a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056a8:	2f78      	cmp	r7, #120	; 0x78
 80056aa:	4691      	mov	r9, r2
 80056ac:	4680      	mov	r8, r0
 80056ae:	460c      	mov	r4, r1
 80056b0:	469a      	mov	sl, r3
 80056b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056b6:	d807      	bhi.n	80056c8 <_printf_i+0x28>
 80056b8:	2f62      	cmp	r7, #98	; 0x62
 80056ba:	d80a      	bhi.n	80056d2 <_printf_i+0x32>
 80056bc:	2f00      	cmp	r7, #0
 80056be:	f000 80d8 	beq.w	8005872 <_printf_i+0x1d2>
 80056c2:	2f58      	cmp	r7, #88	; 0x58
 80056c4:	f000 80a3 	beq.w	800580e <_printf_i+0x16e>
 80056c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056d0:	e03a      	b.n	8005748 <_printf_i+0xa8>
 80056d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056d6:	2b15      	cmp	r3, #21
 80056d8:	d8f6      	bhi.n	80056c8 <_printf_i+0x28>
 80056da:	a101      	add	r1, pc, #4	; (adr r1, 80056e0 <_printf_i+0x40>)
 80056dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056e0:	08005739 	.word	0x08005739
 80056e4:	0800574d 	.word	0x0800574d
 80056e8:	080056c9 	.word	0x080056c9
 80056ec:	080056c9 	.word	0x080056c9
 80056f0:	080056c9 	.word	0x080056c9
 80056f4:	080056c9 	.word	0x080056c9
 80056f8:	0800574d 	.word	0x0800574d
 80056fc:	080056c9 	.word	0x080056c9
 8005700:	080056c9 	.word	0x080056c9
 8005704:	080056c9 	.word	0x080056c9
 8005708:	080056c9 	.word	0x080056c9
 800570c:	08005859 	.word	0x08005859
 8005710:	0800577d 	.word	0x0800577d
 8005714:	0800583b 	.word	0x0800583b
 8005718:	080056c9 	.word	0x080056c9
 800571c:	080056c9 	.word	0x080056c9
 8005720:	0800587b 	.word	0x0800587b
 8005724:	080056c9 	.word	0x080056c9
 8005728:	0800577d 	.word	0x0800577d
 800572c:	080056c9 	.word	0x080056c9
 8005730:	080056c9 	.word	0x080056c9
 8005734:	08005843 	.word	0x08005843
 8005738:	682b      	ldr	r3, [r5, #0]
 800573a:	1d1a      	adds	r2, r3, #4
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	602a      	str	r2, [r5, #0]
 8005740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005748:	2301      	movs	r3, #1
 800574a:	e0a3      	b.n	8005894 <_printf_i+0x1f4>
 800574c:	6820      	ldr	r0, [r4, #0]
 800574e:	6829      	ldr	r1, [r5, #0]
 8005750:	0606      	lsls	r6, r0, #24
 8005752:	f101 0304 	add.w	r3, r1, #4
 8005756:	d50a      	bpl.n	800576e <_printf_i+0xce>
 8005758:	680e      	ldr	r6, [r1, #0]
 800575a:	602b      	str	r3, [r5, #0]
 800575c:	2e00      	cmp	r6, #0
 800575e:	da03      	bge.n	8005768 <_printf_i+0xc8>
 8005760:	232d      	movs	r3, #45	; 0x2d
 8005762:	4276      	negs	r6, r6
 8005764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005768:	485e      	ldr	r0, [pc, #376]	; (80058e4 <_printf_i+0x244>)
 800576a:	230a      	movs	r3, #10
 800576c:	e019      	b.n	80057a2 <_printf_i+0x102>
 800576e:	680e      	ldr	r6, [r1, #0]
 8005770:	602b      	str	r3, [r5, #0]
 8005772:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005776:	bf18      	it	ne
 8005778:	b236      	sxthne	r6, r6
 800577a:	e7ef      	b.n	800575c <_printf_i+0xbc>
 800577c:	682b      	ldr	r3, [r5, #0]
 800577e:	6820      	ldr	r0, [r4, #0]
 8005780:	1d19      	adds	r1, r3, #4
 8005782:	6029      	str	r1, [r5, #0]
 8005784:	0601      	lsls	r1, r0, #24
 8005786:	d501      	bpl.n	800578c <_printf_i+0xec>
 8005788:	681e      	ldr	r6, [r3, #0]
 800578a:	e002      	b.n	8005792 <_printf_i+0xf2>
 800578c:	0646      	lsls	r6, r0, #25
 800578e:	d5fb      	bpl.n	8005788 <_printf_i+0xe8>
 8005790:	881e      	ldrh	r6, [r3, #0]
 8005792:	4854      	ldr	r0, [pc, #336]	; (80058e4 <_printf_i+0x244>)
 8005794:	2f6f      	cmp	r7, #111	; 0x6f
 8005796:	bf0c      	ite	eq
 8005798:	2308      	moveq	r3, #8
 800579a:	230a      	movne	r3, #10
 800579c:	2100      	movs	r1, #0
 800579e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057a2:	6865      	ldr	r5, [r4, #4]
 80057a4:	60a5      	str	r5, [r4, #8]
 80057a6:	2d00      	cmp	r5, #0
 80057a8:	bfa2      	ittt	ge
 80057aa:	6821      	ldrge	r1, [r4, #0]
 80057ac:	f021 0104 	bicge.w	r1, r1, #4
 80057b0:	6021      	strge	r1, [r4, #0]
 80057b2:	b90e      	cbnz	r6, 80057b8 <_printf_i+0x118>
 80057b4:	2d00      	cmp	r5, #0
 80057b6:	d04d      	beq.n	8005854 <_printf_i+0x1b4>
 80057b8:	4615      	mov	r5, r2
 80057ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80057be:	fb03 6711 	mls	r7, r3, r1, r6
 80057c2:	5dc7      	ldrb	r7, [r0, r7]
 80057c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057c8:	4637      	mov	r7, r6
 80057ca:	42bb      	cmp	r3, r7
 80057cc:	460e      	mov	r6, r1
 80057ce:	d9f4      	bls.n	80057ba <_printf_i+0x11a>
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d10b      	bne.n	80057ec <_printf_i+0x14c>
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	07de      	lsls	r6, r3, #31
 80057d8:	d508      	bpl.n	80057ec <_printf_i+0x14c>
 80057da:	6923      	ldr	r3, [r4, #16]
 80057dc:	6861      	ldr	r1, [r4, #4]
 80057de:	4299      	cmp	r1, r3
 80057e0:	bfde      	ittt	le
 80057e2:	2330      	movle	r3, #48	; 0x30
 80057e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057ec:	1b52      	subs	r2, r2, r5
 80057ee:	6122      	str	r2, [r4, #16]
 80057f0:	f8cd a000 	str.w	sl, [sp]
 80057f4:	464b      	mov	r3, r9
 80057f6:	aa03      	add	r2, sp, #12
 80057f8:	4621      	mov	r1, r4
 80057fa:	4640      	mov	r0, r8
 80057fc:	f7ff fee2 	bl	80055c4 <_printf_common>
 8005800:	3001      	adds	r0, #1
 8005802:	d14c      	bne.n	800589e <_printf_i+0x1fe>
 8005804:	f04f 30ff 	mov.w	r0, #4294967295
 8005808:	b004      	add	sp, #16
 800580a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800580e:	4835      	ldr	r0, [pc, #212]	; (80058e4 <_printf_i+0x244>)
 8005810:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005814:	6829      	ldr	r1, [r5, #0]
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	f851 6b04 	ldr.w	r6, [r1], #4
 800581c:	6029      	str	r1, [r5, #0]
 800581e:	061d      	lsls	r5, r3, #24
 8005820:	d514      	bpl.n	800584c <_printf_i+0x1ac>
 8005822:	07df      	lsls	r7, r3, #31
 8005824:	bf44      	itt	mi
 8005826:	f043 0320 	orrmi.w	r3, r3, #32
 800582a:	6023      	strmi	r3, [r4, #0]
 800582c:	b91e      	cbnz	r6, 8005836 <_printf_i+0x196>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	f023 0320 	bic.w	r3, r3, #32
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	2310      	movs	r3, #16
 8005838:	e7b0      	b.n	800579c <_printf_i+0xfc>
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	f043 0320 	orr.w	r3, r3, #32
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	2378      	movs	r3, #120	; 0x78
 8005844:	4828      	ldr	r0, [pc, #160]	; (80058e8 <_printf_i+0x248>)
 8005846:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800584a:	e7e3      	b.n	8005814 <_printf_i+0x174>
 800584c:	0659      	lsls	r1, r3, #25
 800584e:	bf48      	it	mi
 8005850:	b2b6      	uxthmi	r6, r6
 8005852:	e7e6      	b.n	8005822 <_printf_i+0x182>
 8005854:	4615      	mov	r5, r2
 8005856:	e7bb      	b.n	80057d0 <_printf_i+0x130>
 8005858:	682b      	ldr	r3, [r5, #0]
 800585a:	6826      	ldr	r6, [r4, #0]
 800585c:	6961      	ldr	r1, [r4, #20]
 800585e:	1d18      	adds	r0, r3, #4
 8005860:	6028      	str	r0, [r5, #0]
 8005862:	0635      	lsls	r5, r6, #24
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	d501      	bpl.n	800586c <_printf_i+0x1cc>
 8005868:	6019      	str	r1, [r3, #0]
 800586a:	e002      	b.n	8005872 <_printf_i+0x1d2>
 800586c:	0670      	lsls	r0, r6, #25
 800586e:	d5fb      	bpl.n	8005868 <_printf_i+0x1c8>
 8005870:	8019      	strh	r1, [r3, #0]
 8005872:	2300      	movs	r3, #0
 8005874:	6123      	str	r3, [r4, #16]
 8005876:	4615      	mov	r5, r2
 8005878:	e7ba      	b.n	80057f0 <_printf_i+0x150>
 800587a:	682b      	ldr	r3, [r5, #0]
 800587c:	1d1a      	adds	r2, r3, #4
 800587e:	602a      	str	r2, [r5, #0]
 8005880:	681d      	ldr	r5, [r3, #0]
 8005882:	6862      	ldr	r2, [r4, #4]
 8005884:	2100      	movs	r1, #0
 8005886:	4628      	mov	r0, r5
 8005888:	f7fa fcba 	bl	8000200 <memchr>
 800588c:	b108      	cbz	r0, 8005892 <_printf_i+0x1f2>
 800588e:	1b40      	subs	r0, r0, r5
 8005890:	6060      	str	r0, [r4, #4]
 8005892:	6863      	ldr	r3, [r4, #4]
 8005894:	6123      	str	r3, [r4, #16]
 8005896:	2300      	movs	r3, #0
 8005898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800589c:	e7a8      	b.n	80057f0 <_printf_i+0x150>
 800589e:	6923      	ldr	r3, [r4, #16]
 80058a0:	462a      	mov	r2, r5
 80058a2:	4649      	mov	r1, r9
 80058a4:	4640      	mov	r0, r8
 80058a6:	47d0      	blx	sl
 80058a8:	3001      	adds	r0, #1
 80058aa:	d0ab      	beq.n	8005804 <_printf_i+0x164>
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	079b      	lsls	r3, r3, #30
 80058b0:	d413      	bmi.n	80058da <_printf_i+0x23a>
 80058b2:	68e0      	ldr	r0, [r4, #12]
 80058b4:	9b03      	ldr	r3, [sp, #12]
 80058b6:	4298      	cmp	r0, r3
 80058b8:	bfb8      	it	lt
 80058ba:	4618      	movlt	r0, r3
 80058bc:	e7a4      	b.n	8005808 <_printf_i+0x168>
 80058be:	2301      	movs	r3, #1
 80058c0:	4632      	mov	r2, r6
 80058c2:	4649      	mov	r1, r9
 80058c4:	4640      	mov	r0, r8
 80058c6:	47d0      	blx	sl
 80058c8:	3001      	adds	r0, #1
 80058ca:	d09b      	beq.n	8005804 <_printf_i+0x164>
 80058cc:	3501      	adds	r5, #1
 80058ce:	68e3      	ldr	r3, [r4, #12]
 80058d0:	9903      	ldr	r1, [sp, #12]
 80058d2:	1a5b      	subs	r3, r3, r1
 80058d4:	42ab      	cmp	r3, r5
 80058d6:	dcf2      	bgt.n	80058be <_printf_i+0x21e>
 80058d8:	e7eb      	b.n	80058b2 <_printf_i+0x212>
 80058da:	2500      	movs	r5, #0
 80058dc:	f104 0619 	add.w	r6, r4, #25
 80058e0:	e7f5      	b.n	80058ce <_printf_i+0x22e>
 80058e2:	bf00      	nop
 80058e4:	08005d5e 	.word	0x08005d5e
 80058e8:	08005d6f 	.word	0x08005d6f

080058ec <memmove>:
 80058ec:	4288      	cmp	r0, r1
 80058ee:	b510      	push	{r4, lr}
 80058f0:	eb01 0402 	add.w	r4, r1, r2
 80058f4:	d902      	bls.n	80058fc <memmove+0x10>
 80058f6:	4284      	cmp	r4, r0
 80058f8:	4623      	mov	r3, r4
 80058fa:	d807      	bhi.n	800590c <memmove+0x20>
 80058fc:	1e43      	subs	r3, r0, #1
 80058fe:	42a1      	cmp	r1, r4
 8005900:	d008      	beq.n	8005914 <memmove+0x28>
 8005902:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005906:	f803 2f01 	strb.w	r2, [r3, #1]!
 800590a:	e7f8      	b.n	80058fe <memmove+0x12>
 800590c:	4402      	add	r2, r0
 800590e:	4601      	mov	r1, r0
 8005910:	428a      	cmp	r2, r1
 8005912:	d100      	bne.n	8005916 <memmove+0x2a>
 8005914:	bd10      	pop	{r4, pc}
 8005916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800591a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800591e:	e7f7      	b.n	8005910 <memmove+0x24>

08005920 <_free_r>:
 8005920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005922:	2900      	cmp	r1, #0
 8005924:	d044      	beq.n	80059b0 <_free_r+0x90>
 8005926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800592a:	9001      	str	r0, [sp, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	f1a1 0404 	sub.w	r4, r1, #4
 8005932:	bfb8      	it	lt
 8005934:	18e4      	addlt	r4, r4, r3
 8005936:	f000 f913 	bl	8005b60 <__malloc_lock>
 800593a:	4a1e      	ldr	r2, [pc, #120]	; (80059b4 <_free_r+0x94>)
 800593c:	9801      	ldr	r0, [sp, #4]
 800593e:	6813      	ldr	r3, [r2, #0]
 8005940:	b933      	cbnz	r3, 8005950 <_free_r+0x30>
 8005942:	6063      	str	r3, [r4, #4]
 8005944:	6014      	str	r4, [r2, #0]
 8005946:	b003      	add	sp, #12
 8005948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800594c:	f000 b90e 	b.w	8005b6c <__malloc_unlock>
 8005950:	42a3      	cmp	r3, r4
 8005952:	d908      	bls.n	8005966 <_free_r+0x46>
 8005954:	6825      	ldr	r5, [r4, #0]
 8005956:	1961      	adds	r1, r4, r5
 8005958:	428b      	cmp	r3, r1
 800595a:	bf01      	itttt	eq
 800595c:	6819      	ldreq	r1, [r3, #0]
 800595e:	685b      	ldreq	r3, [r3, #4]
 8005960:	1949      	addeq	r1, r1, r5
 8005962:	6021      	streq	r1, [r4, #0]
 8005964:	e7ed      	b.n	8005942 <_free_r+0x22>
 8005966:	461a      	mov	r2, r3
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	b10b      	cbz	r3, 8005970 <_free_r+0x50>
 800596c:	42a3      	cmp	r3, r4
 800596e:	d9fa      	bls.n	8005966 <_free_r+0x46>
 8005970:	6811      	ldr	r1, [r2, #0]
 8005972:	1855      	adds	r5, r2, r1
 8005974:	42a5      	cmp	r5, r4
 8005976:	d10b      	bne.n	8005990 <_free_r+0x70>
 8005978:	6824      	ldr	r4, [r4, #0]
 800597a:	4421      	add	r1, r4
 800597c:	1854      	adds	r4, r2, r1
 800597e:	42a3      	cmp	r3, r4
 8005980:	6011      	str	r1, [r2, #0]
 8005982:	d1e0      	bne.n	8005946 <_free_r+0x26>
 8005984:	681c      	ldr	r4, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	6053      	str	r3, [r2, #4]
 800598a:	4421      	add	r1, r4
 800598c:	6011      	str	r1, [r2, #0]
 800598e:	e7da      	b.n	8005946 <_free_r+0x26>
 8005990:	d902      	bls.n	8005998 <_free_r+0x78>
 8005992:	230c      	movs	r3, #12
 8005994:	6003      	str	r3, [r0, #0]
 8005996:	e7d6      	b.n	8005946 <_free_r+0x26>
 8005998:	6825      	ldr	r5, [r4, #0]
 800599a:	1961      	adds	r1, r4, r5
 800599c:	428b      	cmp	r3, r1
 800599e:	bf04      	itt	eq
 80059a0:	6819      	ldreq	r1, [r3, #0]
 80059a2:	685b      	ldreq	r3, [r3, #4]
 80059a4:	6063      	str	r3, [r4, #4]
 80059a6:	bf04      	itt	eq
 80059a8:	1949      	addeq	r1, r1, r5
 80059aa:	6021      	streq	r1, [r4, #0]
 80059ac:	6054      	str	r4, [r2, #4]
 80059ae:	e7ca      	b.n	8005946 <_free_r+0x26>
 80059b0:	b003      	add	sp, #12
 80059b2:	bd30      	pop	{r4, r5, pc}
 80059b4:	20000898 	.word	0x20000898

080059b8 <sbrk_aligned>:
 80059b8:	b570      	push	{r4, r5, r6, lr}
 80059ba:	4e0e      	ldr	r6, [pc, #56]	; (80059f4 <sbrk_aligned+0x3c>)
 80059bc:	460c      	mov	r4, r1
 80059be:	6831      	ldr	r1, [r6, #0]
 80059c0:	4605      	mov	r5, r0
 80059c2:	b911      	cbnz	r1, 80059ca <sbrk_aligned+0x12>
 80059c4:	f000 f8bc 	bl	8005b40 <_sbrk_r>
 80059c8:	6030      	str	r0, [r6, #0]
 80059ca:	4621      	mov	r1, r4
 80059cc:	4628      	mov	r0, r5
 80059ce:	f000 f8b7 	bl	8005b40 <_sbrk_r>
 80059d2:	1c43      	adds	r3, r0, #1
 80059d4:	d00a      	beq.n	80059ec <sbrk_aligned+0x34>
 80059d6:	1cc4      	adds	r4, r0, #3
 80059d8:	f024 0403 	bic.w	r4, r4, #3
 80059dc:	42a0      	cmp	r0, r4
 80059de:	d007      	beq.n	80059f0 <sbrk_aligned+0x38>
 80059e0:	1a21      	subs	r1, r4, r0
 80059e2:	4628      	mov	r0, r5
 80059e4:	f000 f8ac 	bl	8005b40 <_sbrk_r>
 80059e8:	3001      	adds	r0, #1
 80059ea:	d101      	bne.n	80059f0 <sbrk_aligned+0x38>
 80059ec:	f04f 34ff 	mov.w	r4, #4294967295
 80059f0:	4620      	mov	r0, r4
 80059f2:	bd70      	pop	{r4, r5, r6, pc}
 80059f4:	2000089c 	.word	0x2000089c

080059f8 <_malloc_r>:
 80059f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059fc:	1ccd      	adds	r5, r1, #3
 80059fe:	f025 0503 	bic.w	r5, r5, #3
 8005a02:	3508      	adds	r5, #8
 8005a04:	2d0c      	cmp	r5, #12
 8005a06:	bf38      	it	cc
 8005a08:	250c      	movcc	r5, #12
 8005a0a:	2d00      	cmp	r5, #0
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	db01      	blt.n	8005a14 <_malloc_r+0x1c>
 8005a10:	42a9      	cmp	r1, r5
 8005a12:	d905      	bls.n	8005a20 <_malloc_r+0x28>
 8005a14:	230c      	movs	r3, #12
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	2600      	movs	r6, #0
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a20:	4e2e      	ldr	r6, [pc, #184]	; (8005adc <_malloc_r+0xe4>)
 8005a22:	f000 f89d 	bl	8005b60 <__malloc_lock>
 8005a26:	6833      	ldr	r3, [r6, #0]
 8005a28:	461c      	mov	r4, r3
 8005a2a:	bb34      	cbnz	r4, 8005a7a <_malloc_r+0x82>
 8005a2c:	4629      	mov	r1, r5
 8005a2e:	4638      	mov	r0, r7
 8005a30:	f7ff ffc2 	bl	80059b8 <sbrk_aligned>
 8005a34:	1c43      	adds	r3, r0, #1
 8005a36:	4604      	mov	r4, r0
 8005a38:	d14d      	bne.n	8005ad6 <_malloc_r+0xde>
 8005a3a:	6834      	ldr	r4, [r6, #0]
 8005a3c:	4626      	mov	r6, r4
 8005a3e:	2e00      	cmp	r6, #0
 8005a40:	d140      	bne.n	8005ac4 <_malloc_r+0xcc>
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	4631      	mov	r1, r6
 8005a46:	4638      	mov	r0, r7
 8005a48:	eb04 0803 	add.w	r8, r4, r3
 8005a4c:	f000 f878 	bl	8005b40 <_sbrk_r>
 8005a50:	4580      	cmp	r8, r0
 8005a52:	d13a      	bne.n	8005aca <_malloc_r+0xd2>
 8005a54:	6821      	ldr	r1, [r4, #0]
 8005a56:	3503      	adds	r5, #3
 8005a58:	1a6d      	subs	r5, r5, r1
 8005a5a:	f025 0503 	bic.w	r5, r5, #3
 8005a5e:	3508      	adds	r5, #8
 8005a60:	2d0c      	cmp	r5, #12
 8005a62:	bf38      	it	cc
 8005a64:	250c      	movcc	r5, #12
 8005a66:	4629      	mov	r1, r5
 8005a68:	4638      	mov	r0, r7
 8005a6a:	f7ff ffa5 	bl	80059b8 <sbrk_aligned>
 8005a6e:	3001      	adds	r0, #1
 8005a70:	d02b      	beq.n	8005aca <_malloc_r+0xd2>
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	442b      	add	r3, r5
 8005a76:	6023      	str	r3, [r4, #0]
 8005a78:	e00e      	b.n	8005a98 <_malloc_r+0xa0>
 8005a7a:	6822      	ldr	r2, [r4, #0]
 8005a7c:	1b52      	subs	r2, r2, r5
 8005a7e:	d41e      	bmi.n	8005abe <_malloc_r+0xc6>
 8005a80:	2a0b      	cmp	r2, #11
 8005a82:	d916      	bls.n	8005ab2 <_malloc_r+0xba>
 8005a84:	1961      	adds	r1, r4, r5
 8005a86:	42a3      	cmp	r3, r4
 8005a88:	6025      	str	r5, [r4, #0]
 8005a8a:	bf18      	it	ne
 8005a8c:	6059      	strne	r1, [r3, #4]
 8005a8e:	6863      	ldr	r3, [r4, #4]
 8005a90:	bf08      	it	eq
 8005a92:	6031      	streq	r1, [r6, #0]
 8005a94:	5162      	str	r2, [r4, r5]
 8005a96:	604b      	str	r3, [r1, #4]
 8005a98:	4638      	mov	r0, r7
 8005a9a:	f104 060b 	add.w	r6, r4, #11
 8005a9e:	f000 f865 	bl	8005b6c <__malloc_unlock>
 8005aa2:	f026 0607 	bic.w	r6, r6, #7
 8005aa6:	1d23      	adds	r3, r4, #4
 8005aa8:	1af2      	subs	r2, r6, r3
 8005aaa:	d0b6      	beq.n	8005a1a <_malloc_r+0x22>
 8005aac:	1b9b      	subs	r3, r3, r6
 8005aae:	50a3      	str	r3, [r4, r2]
 8005ab0:	e7b3      	b.n	8005a1a <_malloc_r+0x22>
 8005ab2:	6862      	ldr	r2, [r4, #4]
 8005ab4:	42a3      	cmp	r3, r4
 8005ab6:	bf0c      	ite	eq
 8005ab8:	6032      	streq	r2, [r6, #0]
 8005aba:	605a      	strne	r2, [r3, #4]
 8005abc:	e7ec      	b.n	8005a98 <_malloc_r+0xa0>
 8005abe:	4623      	mov	r3, r4
 8005ac0:	6864      	ldr	r4, [r4, #4]
 8005ac2:	e7b2      	b.n	8005a2a <_malloc_r+0x32>
 8005ac4:	4634      	mov	r4, r6
 8005ac6:	6876      	ldr	r6, [r6, #4]
 8005ac8:	e7b9      	b.n	8005a3e <_malloc_r+0x46>
 8005aca:	230c      	movs	r3, #12
 8005acc:	603b      	str	r3, [r7, #0]
 8005ace:	4638      	mov	r0, r7
 8005ad0:	f000 f84c 	bl	8005b6c <__malloc_unlock>
 8005ad4:	e7a1      	b.n	8005a1a <_malloc_r+0x22>
 8005ad6:	6025      	str	r5, [r4, #0]
 8005ad8:	e7de      	b.n	8005a98 <_malloc_r+0xa0>
 8005ada:	bf00      	nop
 8005adc:	20000898 	.word	0x20000898

08005ae0 <_realloc_r>:
 8005ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae4:	4680      	mov	r8, r0
 8005ae6:	4614      	mov	r4, r2
 8005ae8:	460e      	mov	r6, r1
 8005aea:	b921      	cbnz	r1, 8005af6 <_realloc_r+0x16>
 8005aec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005af0:	4611      	mov	r1, r2
 8005af2:	f7ff bf81 	b.w	80059f8 <_malloc_r>
 8005af6:	b92a      	cbnz	r2, 8005b04 <_realloc_r+0x24>
 8005af8:	f7ff ff12 	bl	8005920 <_free_r>
 8005afc:	4625      	mov	r5, r4
 8005afe:	4628      	mov	r0, r5
 8005b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b04:	f000 f838 	bl	8005b78 <_malloc_usable_size_r>
 8005b08:	4284      	cmp	r4, r0
 8005b0a:	4607      	mov	r7, r0
 8005b0c:	d802      	bhi.n	8005b14 <_realloc_r+0x34>
 8005b0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b12:	d812      	bhi.n	8005b3a <_realloc_r+0x5a>
 8005b14:	4621      	mov	r1, r4
 8005b16:	4640      	mov	r0, r8
 8005b18:	f7ff ff6e 	bl	80059f8 <_malloc_r>
 8005b1c:	4605      	mov	r5, r0
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d0ed      	beq.n	8005afe <_realloc_r+0x1e>
 8005b22:	42bc      	cmp	r4, r7
 8005b24:	4622      	mov	r2, r4
 8005b26:	4631      	mov	r1, r6
 8005b28:	bf28      	it	cs
 8005b2a:	463a      	movcs	r2, r7
 8005b2c:	f7ff fb04 	bl	8005138 <memcpy>
 8005b30:	4631      	mov	r1, r6
 8005b32:	4640      	mov	r0, r8
 8005b34:	f7ff fef4 	bl	8005920 <_free_r>
 8005b38:	e7e1      	b.n	8005afe <_realloc_r+0x1e>
 8005b3a:	4635      	mov	r5, r6
 8005b3c:	e7df      	b.n	8005afe <_realloc_r+0x1e>
	...

08005b40 <_sbrk_r>:
 8005b40:	b538      	push	{r3, r4, r5, lr}
 8005b42:	4d06      	ldr	r5, [pc, #24]	; (8005b5c <_sbrk_r+0x1c>)
 8005b44:	2300      	movs	r3, #0
 8005b46:	4604      	mov	r4, r0
 8005b48:	4608      	mov	r0, r1
 8005b4a:	602b      	str	r3, [r5, #0]
 8005b4c:	f7fb f834 	bl	8000bb8 <_sbrk>
 8005b50:	1c43      	adds	r3, r0, #1
 8005b52:	d102      	bne.n	8005b5a <_sbrk_r+0x1a>
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	b103      	cbz	r3, 8005b5a <_sbrk_r+0x1a>
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	bd38      	pop	{r3, r4, r5, pc}
 8005b5c:	200008a0 	.word	0x200008a0

08005b60 <__malloc_lock>:
 8005b60:	4801      	ldr	r0, [pc, #4]	; (8005b68 <__malloc_lock+0x8>)
 8005b62:	f000 b811 	b.w	8005b88 <__retarget_lock_acquire_recursive>
 8005b66:	bf00      	nop
 8005b68:	200008a4 	.word	0x200008a4

08005b6c <__malloc_unlock>:
 8005b6c:	4801      	ldr	r0, [pc, #4]	; (8005b74 <__malloc_unlock+0x8>)
 8005b6e:	f000 b80c 	b.w	8005b8a <__retarget_lock_release_recursive>
 8005b72:	bf00      	nop
 8005b74:	200008a4 	.word	0x200008a4

08005b78 <_malloc_usable_size_r>:
 8005b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b7c:	1f18      	subs	r0, r3, #4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	bfbc      	itt	lt
 8005b82:	580b      	ldrlt	r3, [r1, r0]
 8005b84:	18c0      	addlt	r0, r0, r3
 8005b86:	4770      	bx	lr

08005b88 <__retarget_lock_acquire_recursive>:
 8005b88:	4770      	bx	lr

08005b8a <__retarget_lock_release_recursive>:
 8005b8a:	4770      	bx	lr

08005b8c <_init>:
 8005b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8e:	bf00      	nop
 8005b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b92:	bc08      	pop	{r3}
 8005b94:	469e      	mov	lr, r3
 8005b96:	4770      	bx	lr

08005b98 <_fini>:
 8005b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9a:	bf00      	nop
 8005b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9e:	bc08      	pop	{r3}
 8005ba0:	469e      	mov	lr, r3
 8005ba2:	4770      	bx	lr
